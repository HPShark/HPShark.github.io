<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Happy Shark</title>
  
  <subtitle>Happyshark&amp;Kevin</subtitle>
  <link href="https://www.happyshark.cn/atom.xml" rel="self"/>
  
  <link href="https://www.happyshark.cn/"/>
  <updated>2022-05-30T14:22:34.000Z</updated>
  <id>https://www.happyshark.cn/</id>
  
  <author>
    <name>HPShark</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SNNU校园网白嫖&amp;校园网nas搭建指南</title>
    <link href="https://www.happyshark.cn/2022/05/10/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
    <id>https://www.happyshark.cn/2022/05/10/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</id>
    <published>2022-05-10T15:21:56.000Z</published>
    <updated>2022-05-30T14:22:34.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>12月份和3月份的疫情封宿舍导致只能在宿舍学（mo）习（yu），校园网的免费额度严重不够用，听闻办公区（包括且不限于教室、实验室、图书馆）校园网是免费的，所以有了这篇如果在宿舍区实现校园网免流指南和一些进阶技巧。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>SNNU校园网的收费原理如下：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU校园网白嫖&amp;校园网nas搭建指南/%E7%BB%93%E6%9E%84.png" alt=""></p><ul><li>如果你的设备是处在宿舍区（黄色部分），那在这个区域产生的外网流量（经由中央网关发送至互联网产生的流量）会经过计费网关进行计费，在校园宽带自助服务系统的黑色部分就是计费流量<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220510235206802.png" alt="image-20220510235206802"></li><li><p>如果你的设备在办公区（绿色部分），那在那在这个区域产生的外网流量（经由中央网关发送至互联网产生的流量）不会产生任何费用，在校园宽带自助服务系统中的流量详情都是绿色的<img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220510235546091.png" alt="image-20220510235546091"></p></li><li><p>如果如果你的设备在宿舍区（绿色部分），那在那在这个区域连接办公区设备产生的内网流量（经由中央网关发送至办公区的流量）不会产生任何费用，在校园宽带自助服务系统中的流量详情中校内流量就属于这种<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220510235809299.png" alt="image-20220510235809299"></p></li><li>*如果你的设备在任意区域，那通过校园网ipv6访问外网产生的流量是免费的，在校园宽带自助服务系统中的流量详情中教育网流量就属于这种<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220510235956347.png" alt="image-20220510235956347"></li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ul><li>我们就可以根据原理1、2、3在办公区可以连外网的域内搭一个vpn服务器，让宿舍区的电脑走校内流量（原理3）链接vpn服务器（上图的路线1），在通过vpn服务器将数据包转发到外网（原理2）实现免流（路线2），下面详细介绍这种方法</li><li>*也可以在外网搭一个ipv6的服务器，通过将所有数据包走ipv6转发给公网服务器（原理4）实现免流，这个方法按下不表</li></ul><h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><h2 id="VPN服务器搭建"><a href="#VPN服务器搭建" class="headerlink" title="VPN服务器搭建"></a>VPN服务器搭建</h2><h3 id="linux（部署到路由器上）"><a href="#linux（部署到路由器上）" class="headerlink" title="linux（部署到路由器上）"></a>linux（部署到路由器上）</h3><p>linux的话github上面有很多一键安装脚本，安装就略过了，以华硕老毛子固件配置为例：</p><ol><li><p>办公区网络搭建vpn服务器，我的路由器（斐讯k2）刷的华硕老毛子自带<code>vpn服务器</code>功能可以直接用，如果是在路由下级建的vpn服务器要在路由器做好端口转发（或者直接dmz主机也行）</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220511000846748.png" alt="image-20220511000846748"></p></li><li><p>在<code>客户端账号</code>中配置用户名和密码，然后点<code>+</code>确定<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220511001047914.png" alt="image-20220511001047914"></p></li></ol><h3 id="windows（如果实验室没有路由器网线直接链接到电脑上的话可以使用这种方案）"><a href="#windows（如果实验室没有路由器网线直接链接到电脑上的话可以使用这种方案）" class="headerlink" title="windows（如果实验室没有路由器网线直接链接到电脑上的话可以使用这种方案）"></a>windows（如果实验室没有路由器网线直接链接到电脑上的话可以使用这种方案）</h3><h4 id="使用SoftEther-VPN-搭建l2tp服务器"><a href="#使用SoftEther-VPN-搭建l2tp服务器" class="headerlink" title="使用SoftEther VPN 搭建l2tp服务器"></a>使用SoftEther VPN 搭建l2tp服务器</h4><p>SoftEther VPN是日本筑波大学的一个研究项目，它包括服务器端、客户端、服务器端管理工具等数个软件，支持 SSL-VPN (SoftEther VPN) 协议、 L2TP/IPsec 协议、 OpenVPN 协议和 Microsoft SSTP 协议，Windows、Linux、Android和IOS等操作系统都可以连接到SoftEther VPN服务器。</p><ol><li><p>访问 <a href="https://www.softether-download.com/cn.aspx">https://www.softether-download.com/cn.aspx</a> 下载服务端，server里面继承了管理工具所以就不用在额外下载manager工具了<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220530214102365.png" alt="image-20220530214102365"></p><blockquote><p>当然服务端也可以下载linux版本的，这里只介绍windows版本安装</p></blockquote></li><li><p>下载完后安装，目录选择自己装软件的目录即可，语言选择<code>中文</code>，安装种类选择<code>SoftEther VPN Server</code><br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/=7-2-6.jpg" alt="7-2-6.jpg"></p></li><li><p>安装完成后管理工具就在桌面上了，运行<code>SE-VPN Server Manager (Tools)</code>，选择<code>新设置</code>，在新面板中填写<code>设置名(自定义即可)</code>和<code>主机名（直接勾选下面的链接到本地主机）</code>，点击<code>确定</code>保存配置信息；<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220530215127171.png" alt="image-20220530215127171"></p></li><li><p>点击<code>连接</code>，连接到vpn server，首次登陆会让设置一个管理员密码<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220530215229299.png" alt="image-20220530215229299"></p></li><li><p>执行简易设置向导，选择<code>远程访问VPN Server</code>后点<code>下一步</code><br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220530215538281.png" alt="image-20220530215538281"></p></li><li><p>ddns设置页面不用管，直接点下一步<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220530215713306.png" alt="image-20220530215713306"></p></li><li><p>此时会提示“此VPN Server已具有支持兼容IPSec/L2TP/EtherIP/L2TPv3协议的VPN Client或VPN路由器的新功能……您要设置IPSec吗？”，选择”是“。勾选以下两个选项，<code>填写“IPsec预共享密钥</code>，确定<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220530215916874.png" alt="image-20220530215916874"></p></li><li><p>如果不需要内网穿透那就直接<code>禁用VPN Azure</code><br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220530220032506.png" alt="image-20220530220032506"></p></li><li><p>添加认证用户<br>点击这个hub-<code>管理虚拟hub-管理用户</code>-<code>新增</code>-在这里填写用户名和密码，认证方式选择密钥认证</p><blockquote><p>这里的密码和上面的预共享密钥不是一个密码</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220530220317856.png" alt="image-20220530220317856"></p></li><li><p>开启NAT转换和DHCP服务<br>点击这个hub-<code>管理虚拟hub</code>-<code>虚拟AT和虚拟 DHCF服务器</code>-<code>启用SecureHAT</code></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU校园网白嫖&amp;校园网nas搭建指南/image-20220530220549599.png" alt="image-20220530220549599"></p></li><li><p>开启tcp1701.500,4500端口和udp1701.500,4500端口：<br>打开<code>控制面板</code>-<code>系统和安全</code>-<code>windows Defender防火墙</code>-点击左侧的<code>高级设置</code>-点击左侧的<code>入站规则</code>-在点击右侧的<code>新建规则</code>,添加以下<strong>两个</strong>协议，注意每个端口用<strong>英文逗号</strong>隔开：</p><ul><li>端口-选择<code>tcp</code>协议，特定本地端口处填1701,500,4500。名称填tcp1701,500,4500，其他默认。<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220530221341773.png" alt="image-20220530221341773"></li><li>端口-选择<code>udp</code>协议，特定本地端口处填1701,500,4500。名称填udp1701,500,4500，其他默认。<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220530221424007.png" alt="image-20220530221424007"></li></ul></li></ol><p>至此服务器端设置完成。</p><h4 id="通过系统自带的vpn接入点配置server（不建议在除了windows-server的其他windows版本上面使用这种方法，因为无法解决nat问题会导致客户端能访问vpn服务器却无法访问互联网）"><a href="#通过系统自带的vpn接入点配置server（不建议在除了windows-server的其他windows版本上面使用这种方法，因为无法解决nat问题会导致客户端能访问vpn服务器却无法访问互联网）" class="headerlink" title="通过系统自带的vpn接入点配置server（不建议在除了windows server的其他windows版本上面使用这种方法，因为无法解决nat问题会导致客户端能访问vpn服务器却无法访问互联网）"></a><del>通过系统自带的vpn接入点配置server（不建议在除了windows server的其他windows版本上面使用这种方法，因为无法解决nat问题会导致客户端能访问vpn服务器却无法访问互联网）</del></h4><ol><li><p><del>桌面按win+R键打开运行，输入”ncpa.cpl”回车打开改适配器设置界面，点击文件-新建传入连接（如果没有文件选项卡的话请按Alt+F）</del></p><p><del><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220512182152910.png" alt="image-20220512182152910"></del></p></li><li><p><del>添加用户，自定义用户名和密码（这里的用户名和密码就是客户端链接的时候需要输入的用户名和密码）,点击下一步</del><br><del><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220512182551894.png" alt="image-20220512182551894"></del></p></li><li><p><del>勾选<code>通过internet</code>选项，点击下一步</del><br><del><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220512182646078.png" alt="image-20220512182646078"></del></p></li><li><p><del>选择ipv4，然后选择属性，指定ip地址（如果没有全局梯子/nas的需求也可以直接使用DHCP分配），点击允许访问</del><br><del><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220512182954851.png" alt="image-20220512182954851"></del></p><blockquote><p><del>下面还需要放行1723端口和gre协议，如果电脑上级接了路由器那这一步需要在路由器里设置端口转发，如果是网线直接连的电脑那按下面的步骤设置</del></p></blockquote></li><li><p><del>打开<code>控制面板</code>-<code>系统和安全</code>-<code>windows Defender防火墙</code>-点击左侧的<code>高级设置</code>-点击左侧的<code>入站规则</code>-在点击右侧的<code>新建规则</code>,添加以下两个协议：</del></p><ul><li><del>端口-选择tcp协议，特定本地端口处填1723-名称填pptp1723，其他默认。</del><br><del><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220512183536178.png" alt="image-20220512183536178"></del></li><li><del>自定义-协议选择GRE-名称填gre，其他默认</del><br><del><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220512183506585.png" alt="image-20220512183506585"></del></li></ul></li></ol><blockquote><p><del>到这一步vpn服务就配置完了，目前有个已知的问题如果电脑上开了杀毒软件会导致后面客户端连接失败，建议关掉用windows defender就好。</del></p></blockquote><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><ol><li><p>宿舍区电脑（windows）打开设置-网络和Internet-vpn-添加vpn链接，添加配置信息后保存</p><ul><li>vpn提供商：windows内置</li><li>链接名称：自己填就好，这是个备注名</li><li>服务器名称或地址：vpn服务器所在域的ip地址，一般是10.xxx.xxx.xxx</li><li>vpn类型：根据服务器选择<ul><li>如果服务端是pptp那就选pptp服务器（上面教程使用windows 自带接入点配置的服务就是pptp）<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220530221945124.png" alt="image-20220530221945124"></li><li>如果服务端是l2tp那就选l2tp服务器（共享密钥，上面教程使用SoftEther VPN配置的就是<strong>预共享密钥</strong>的l2tp）<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220530222021123.png" alt="image-20220530222021123"></li></ul></li><li>*（可选）：如果选择预共享密钥的l2tp，那还需要输入预共享密钥</li><li>登录信息类型：用户名和密码</li><li>用户名：在vpn服务器中设置的用户名</li><li>密码：在vpn服务器中设置的密码</li></ul></li><li><p>宿舍区电脑通过web网关认证登陆校园网</p></li><li><p>链接vpn</p></li><li><p>最终效果，网络和vpn应该都是已连接状态<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220511001631003.png" alt="image-20220511001631003"></p></li></ol><blockquote><p>如果可以浏览网页但是UWP应用（比如Microsoft store，天气app）无法联网的情况需要解除UWP回环代理限制</p></blockquote><ol><li><p>打开管理员模式powershell或者cmd，输入以下内容回车解除UWP应用代理限制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOR /F &quot;tokens=11 delims=\&quot; %p IN (&#x27;REG QUERY &quot;HKCU\Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppContainer\Mappings&quot;&#x27;) DO CheckNetIsolation.exe LoopbackExempt -a -p=%p</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>如果出现连接成功无法上网或者希望vpn域内流量走vpn服务器，正常访问Internet的流量直连，可以进行以下配置。<strong>但是这种配置会使正常访问Internet的流量被计费，按需选择慎用</strong>桌面按win+R键打开运行，输入”ncpa.cpl”回车打开改适配器设置界面，右键vpn链接-<code>属性</code>-<code>网络</code>-点击<code>ipv4</code>-<code>属性</code>-<code>高级</code>-关闭<code>在远程网络上使用默认网关</code>，点确定<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220512190801340.png" alt="image-20220512190801340"></p><p>客户端到这里配置就结束了，连接成功后就可以走校内流量免流，如果不放心可以用一下然后登陆校园宽带自助服务系统<a href="http://202.117.144.205/zili/online_list.php">http://202.117.144.205/zili/online_list.php</a> 查看流量使用情况，正常的情况应该是收费流量很少校内流量很多<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220511001954532.png" alt="image-20220511001954532"></p></blockquote><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="nas映射，远程桌面"><a href="#nas映射，远程桌面" class="headerlink" title="nas映射，远程桌面"></a>nas映射，远程桌面</h2><p>上一步配置成功后所有的流量应该就被转发至vpn服务器了，宿舍的电脑，办公区vpn服务器所在域内其他设备都处于一个局域网中，比如实验室nas的ip为192.168.123.1，实验室电脑的ip为192.168.123.3，宿舍电脑链接vpn后在其所在域的ip地址是192.168.123.2，那就可以把实验室的nas映射到宿舍的电脑上，或者通过实验室电脑内网远控宿舍电脑（高速低延迟稳定性极高）</p><h3 id="nas映射配置"><a href="#nas映射配置" class="headerlink" title="nas映射配置"></a>nas映射配置</h3><ol><li>宿舍电脑打开文件管理器，在最上面输入<code>\\+nas的ip</code>，输入用户名和密码即可链接nas<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220511085042144.png" alt="image-20220511085042144"></li><li>然后选择任意一个文件夹，右键-映射网络驱动器即可将这个文件夹映射到本地</li></ol><h3 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h3><p>实验室电脑打开<code>远程桌面</code>ip输入宿舍电脑的局域网ip（192.168.123.2），用户名和密码是宿舍电脑。点击链接即可进行远程控制<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220511003138324.png" alt="image-20220511003138324"></p><h2 id="统一梯子服务"><a href="#统一梯子服务" class="headerlink" title="统一梯子服务"></a>统一梯子服务</h2><p>当然既然一个域内都有这么多设备了，那也可以在其中一台电脑上搭一个梯子服务，挂好局域网链接配置之后在其他电脑上配置梯子所在的局域网ip+端口即可让域内所有设备都获得科学上网的能力。以chrome插件switchyOmega为例：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220511003509676.png" alt="image-20220511003509676"></p>]]></content>
    
    
    <summary type="html">一种从收费区域（宿舍）通过vpn连接到免费区域（实验室）从而实现在收费区域免费上网的办法，同时还有一些进阶功能，比如实现在10开头的内网中把nas存储映射到设备中</summary>
    
    
    
    <category term="技术" scheme="https://www.happyshark.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="网络" scheme="https://www.happyshark.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="技术" scheme="https://www.happyshark.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>安全规约第五讲——安全规约的困难性</title>
    <link href="https://www.happyshark.cn/2022/03/05/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%BA%94%E8%AE%B2%E2%80%94%E2%80%94%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%9A%84%E5%9B%B0%E9%9A%BE%E6%80%A7/"/>
    <id>https://www.happyshark.cn/2022/03/05/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%BA%94%E8%AE%B2%E2%80%94%E2%80%94%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%9A%84%E5%9B%B0%E9%9A%BE%E6%80%A7/</id>
    <published>2022-03-05T14:00:00.000Z</published>
    <updated>2022-03-05T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安全规约所涉及到的问题"><a href="#安全规约所涉及到的问题" class="headerlink" title="安全规约所涉及到的问题"></a>安全规约所涉及到的问题</h1><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%BA%94%E8%AE%B2/16345598490425.jpg" alt=""><br>矛盾点：</p><ol><li>敌手可以攻破一个真实方案（real）</li><li>但是我们要求敌手要攻破一个模拟方案（simulated）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%BA%94%E8%AE%B2/16345598712532.jpg" alt=""></p><ul><li>当given scheme不像real scheme的时候我们不知道敌手的攻击态度</li><li>当given scheme 看起来像real scheme的时候我们不知道敌手的具体攻击过程</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%BA%94%E8%AE%B2/16345600638754.jpg" alt=""><br>形象的说，我们的目标和敌手的目标不一致</p><h1 id="模拟-amp-模拟之后发生的事情（simulated）"><a href="#模拟-amp-模拟之后发生的事情（simulated）" class="headerlink" title="模拟&amp;模拟之后发生的事情（simulated）"></a>模拟&amp;模拟之后发生的事情（simulated）</h1><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%BA%94%E8%AE%B2/16345601286032.jpg" alt=""></p><h2 id="成功的模拟（successful-simulation）"><a href="#成功的模拟（successful-simulation）" class="headerlink" title="成功的模拟（successful simulation）"></a>成功的模拟（successful simulation）</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%BA%94%E8%AE%B2/16345602176238.jpg" alt=""></p><ul><li>模拟必须要定义什么时候abort：比如在面对敌手询问签名时不知道如何回答的情况下就必须abort</li></ul><p>一个成功的模拟，整个过程中不应该出现abort，而且对于所有来自敌手的response都应该是正确的</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%BA%94%E8%AE%B2/16345604793648.jpg" alt=""></p><ul><li>区分real scheme和simulated scheme一般通过正确性和随机性两种方法，一般不考虑第三种方法（response时间等等）</li><li>randomness：随机数，必须符合随机规律，否则可能会被敌手识别出时simulated scheme</li><li>correctness同理</li></ul><h2 id="敌手的攻击（attack）"><a href="#敌手的攻击（attack）" class="headerlink" title="敌手的攻击（attack）"></a>敌手的攻击（attack）</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%BA%94%E8%AE%B2/16345606842841.jpg" alt=""><br>对于最后两种，根据能否转化为解决困难问题可以分为两大类：useless attack 和 useful attack</p><ul><li>useless attack：不能用敌手的攻击解决困难问题。</li><li>useful attack：敌手的攻击可以转化为解决困难问题。</li></ul><blockquote><p>卧报的某一期有更详细的解释</p></blockquote><p>例子：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/安全规约第五讲/16345608249863.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%BA%94%E8%AE%B2/16345611736435.jpg" alt=""></p>]]></content>
    
    
    <summary type="html">安全规约课程笔记，整理一下以备以后查询使用，如果有错误欢迎留言讨论</summary>
    
    
    
    <category term="安全规约" scheme="https://www.happyshark.cn/categories/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6/"/>
    
    
    <category term="安全规约" scheme="https://www.happyshark.cn/tags/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>安全规约第四讲——安全规约入门</title>
    <link href="https://www.happyshark.cn/2022/03/04/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2%E2%80%94%E2%80%94%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E5%85%A5%E9%97%A8/"/>
    <id>https://www.happyshark.cn/2022/03/04/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2%E2%80%94%E2%80%94%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E5%85%A5%E9%97%A8/</id>
    <published>2022-03-04T14:00:00.000Z</published>
    <updated>2022-03-04T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算复杂性的规约理论"><a href="#计算复杂性的规约理论" class="headerlink" title="计算复杂性的规约理论"></a>计算复杂性的规约理论</h1><p>大致框架如下：<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345548801794.jpg" alt=""></p><ul><li>关于不可能：源于p和np问题是否等价未证明</li><li>计算问题里的表达方式和安全问题里的表达方式是相反的</li><li>一般表达的时候描述为a比b简单 </li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345555427447.jpg" alt=""></p><ul><li>解决b可以转化成解决a（a比b简单，故可通过解决b转化为解决a）</li></ul><blockquote><p>规约的描述是从较难到更难的过程，所谓规约就是证明我们关心的方案不比已有的方案简单，即研究一个问题困难度的下限</p></blockquote><p>一些例子：<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345557750281.jpg" alt=""></p><ol><li>先输入problem A 的instence</li><li>想办法转化成b中的insetence</li><li>在将b的solution转化回a</li></ol><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345559111667.jpg" alt=""></p><ul><li>proof的重点：如何构造参数使得b可以转化为a</li></ul><blockquote><p>故有时候review证明者的思路可以尝试从后往前看</p><p>只可意会不可言传</p></blockquote><p>例子2<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345561004653.jpg" alt=""></p><p>例子3<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345561430593.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345562172873.jpg" alt=""></p><ul><li>随机选取w（ramdomly choose）：只有这么设置，才能使得b中的instence space可以做到随机选取，具体原因和计算复杂性有关*。</li></ul><h1 id="密码中的安全规约"><a href="#密码中的安全规约" class="headerlink" title="密码中的安全规约"></a>密码中的安全规约</h1><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345564099768.jpg" alt=""></p><p>规约：problem-&gt;problem<br>安全规约：problem-&gt;scheme</p><p>安全规约的作用：解决一个困难问题要比攻破一个安全方案简单</p><p>注：安全规约和安全分析是不一样的，安全分析更多注重于已知的攻击算法，对于未公开的安全攻击方式无能为力，而安全规约则可以囊括一整个安全模型下的所有攻击方式，即使它没有公开。</p><h2 id="证明策略"><a href="#证明策略" class="headerlink" title="证明策略"></a>证明策略</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345569503800.jpg" alt=""></p><h2 id="具体的框架-amp-解释"><a href="#具体的框架-amp-解释" class="headerlink" title="具体的框架&amp;解释"></a>具体的框架&amp;解释</h2><p>首先做出一些定义<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345570243368.jpg" alt=""></p><p>证明开始之前需要假设一个敌手</p><ul><li>先模拟一个方案，设定允许询问什么&amp;计算什么</li><li>如何提取出yp</li><li>分析解决困难问题p的优势是不可忽略的</li></ul><p>Q：安全规约一定要分析嘛？<br>A：没有分析的安全规约一定不是完整的</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345572932255.jpg" alt=""></p><blockquote><p>安全规约更多的是证明a和b的关系，至于b是否存在不考虑</p></blockquote><p><strong>一些容易混淆的概念</strong><br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345574057803.jpg" alt=""><br>real scheme VS simulated scheme<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345574683853.jpg" alt=""></p><p>real scheme：通过运行算法得来的<br>simulated scheme：</p><p>challenger VS simulator<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345575395508.jpg" alt=""><br>challenger：最好出现在安全模型里<br>simulator：最好出现在安全规约里</p><p>real attack VS simulation </p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345576404200.jpg" alt=""></p><ul><li>informations：敌手需要知道的信息，根据模型而来的</li><li>二者的区别可以粗暴的理解成两个平行世界的角色</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345577083721.jpg" alt=""></p><blockquote><p>有点类似于网络聊天中判队对方是人是狗</p></blockquote><ul><li>这里的规约算法只需模拟出敌手要的结果而已而不是整个算法，比如在证明cpa安全的时候我们无需把所有具体的算法都模拟出来</li></ul><h2 id="indistinguishable"><a href="#indistinguishable" class="headerlink" title="indistinguishable"></a>indistinguishable</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345579046300.jpg" alt=""><br>如果不能判断b是通过哪种方法计算的，则称indistinguishable</p><blockquote><p> 注：这里的a要随机选取，否则可能会出现可区分行，比如如果a=1的概率超级高，则在选择方法的时候就可以对结果进行区分。</p></blockquote><h2 id="breaking-to-solution"><a href="#breaking-to-solution" class="headerlink" title="breaking to solution"></a>breaking to solution</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345581246358.jpg" alt=""><br>可以通过三种方式转换</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345581808667.jpg" alt=""><br>一二种比较常见<br>第三种比较特殊，是将一个判别式的规约问题转化为计算的规约问题</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345584839722.jpg" alt=""><br>T=Ｏ(q)：与询问次数有关，消不掉<br>q：与安全模型相关</p><h2 id="tight-reduction-amp-Loose-Reduction"><a href="#tight-reduction-amp-Loose-Reduction" class="headerlink" title="tight reduction &amp; Loose Reduction"></a>tight reduction &amp; Loose Reduction</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345586101617.jpg" alt=""></p><ul><li>目前所有的安全规约的方案都无法消除simulation time</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345587245646.jpg" alt=""></p><ul><li>tight reduction：仍然比loose reduction好</li><li>tight reduction会影响计算效率，如果一个方案需要考虑效率不要用这个</li><li>投偏应用的期刊（ieee）不要用tight reduction，会很别扭</li></ul><h2 id="lower-bound-security-level"><a href="#lower-bound-security-level" class="headerlink" title="lower bound security level"></a>lower bound security level</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345589181207.jpg" alt=""></p><p>concrete security：<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345589535483.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345591531908.jpg" alt=""></p><ul><li>l和t越小越好，似的右边的值无限接近2^k</li></ul><h2 id="完美的安全规约"><a href="#完美的安全规约" class="headerlink" title="完美的安全规约"></a>完美的安全规约</h2><p>需要满足以下四点：<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345592681346.jpg" alt=""></p><p>但一般情况下这四点互斥，即无法达到多块好省。如下图：<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/16345593422148.jpg" alt=""></p><ul><li>tradeoff：很神奇，覆盖了computer science</li></ul>]]></content>
    
    
    <summary type="html">安全规约课程笔记，整理一下以备以后查询使用，如果有错误欢迎留言讨论</summary>
    
    
    
    <category term="安全规约" scheme="https://www.happyshark.cn/categories/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6/"/>
    
    
    <category term="安全规约" scheme="https://www.happyshark.cn/tags/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>安全规约第三讲——困难问题和安全规约的基本解释</title>
    <link href="https://www.happyshark.cn/2022/03/03/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2%E2%80%94%E2%80%94%E5%9B%B0%E9%9A%BE%E9%97%AE%E9%A2%98%E5%92%8C%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%A3%E9%87%8A/"/>
    <id>https://www.happyshark.cn/2022/03/03/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2%E2%80%94%E2%80%94%E5%9B%B0%E9%9A%BE%E9%97%AE%E9%A2%98%E5%92%8C%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%A3%E9%87%8A/</id>
    <published>2022-03-03T14:00:00.000Z</published>
    <updated>2022-03-03T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>computing problem</strong></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/image-20220530225850353.png" alt="image-20220530225850353"></p><ul><li>一种定义在数学原语上的数学对象</li><li>x指问题实例，y指其解，有无限多对</li><li>大多数情况下随着x增加计算y的开销会随之变大，但不是所有情况都如此</li></ul><p>计算问题可以分为两大类：computational problems 和 decisional problems</p><p>关于computing problem：</p><p>在计算问题中，一般最大类是computing problems</p><p>在计算复杂性中一般最大类是computational peoblems</p><p>密码学中又分成computational problems 和 decisional problems</p><p>当然在其他地方会混淆</p><p>关于计算复杂性</p><p>通过计算随着x的增加y增加的速度，从而判断其增长的速度可以达到哪个层次是计算复杂性最核心的问题之一</p><p><strong>computational problem</strong></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/image-20220530225909308.png" alt="image-20220530225909308"></p><ul><li>large space：可以简单通俗的理解为y的空间与x空间数量级一致</li><li>computational problem 也可以被称为 search problem，维基百科上面也有function problem的说法</li></ul><p><strong>Decisional problem</strong></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/image-20220530225924204.png" alt="image-20220530225924204"></p><ul><li>{0,1}不一定代表数学上的0和1，也可代表true or false</li><li>formal language：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/4oYS3jZ9dDAN2Tk.jpg" alt=""></p><ul><li>formal language：可以理解为一些字符组成的集合。</li></ul><h2 id="确定性-amp-概率"><a href="#确定性-amp-概率" class="headerlink" title="确定性&amp;概率"></a>确定性&amp;概率</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/Ae5VOGCfI6wUo8p.jpg" alt=""></p><ul><li>所有的算法都可以分为两大类：确定算法&amp;概率算法</li><li>一般认为概率算法比确定算法更有效，比如攻破一些方案的时候。</li><li>一般用（t，ε）表示一个方案在运行了t时间后返回一个正确答案的概率是ε。</li></ul><blockquote><p>做素数测试的时候会用到概率算法，而且非常有效，但目前没有办法说明其比确定算法更有效。但目前的例子说明了这一现象，故使用了believed而不是proofed</p></blockquote><h2 id="算法的分类"><a href="#算法的分类" class="headerlink" title="算法的分类"></a>算法的分类</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/VUb6Q14HqWfoum9.jpg" alt=""></p><ul><li>方案算法：构造一种方案</li><li>攻击算法</li><li>solution algorithm</li><li>规约算法</li></ul><blockquote><p>算法的分类可以更方便的去对一些行为进行定义</p></blockquote><h2 id="ploynomial-and-exponential"><a href="#ploynomial-and-exponential" class="headerlink" title="ploynomial and exponential"></a>ploynomial and exponential</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/2dZYPLobI73pyKW.jpg" alt=""></p><p>一下是非正式的分类</p><ul><li>ploynomial：是对f上限的定义</li><li>exponential：对f下限的定义</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/iMkIPSNp34OTFtE.jpg" alt=""></p><ul><li>二者不是具体的的数值，而是反映了一种速度的趋势（二阶导）</li><li>2^160不算指数时间，因为他是确定的，只有2^λ才是</li></ul><blockquote><p>我们希望在多项式时间以内指数时间以上，通过这种方式吧合法用户和敌手分开：用户的合法计算时间很快，而敌手攻击的时间很慢</p></blockquote><h2 id="Negligible-and-Non-Negligible"><a href="#Negligible-and-Non-Negligible" class="headerlink" title="Negligible and Non-Negligible"></a>Negligible and Non-Negligible</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/WmEoQtO17wbPZyl.jpg" alt=""><br>可忽略&amp;不可忽略</p><ul><li>关于 cannot：f是以指数级的形式快速接近0，故可以忽略</li><li>关于super- ploynomial：多项式曲线以上的东西都称之</li><li>关于speed：同上，是一种趋势</li></ul><h2 id="概率-Probability"><a href="#概率-Probability" class="headerlink" title="概率 Probability"></a>概率 Probability</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/m8rP5d6jawoyB2h.jpg" alt=""></p><p>Q：为什么用概率算法而不用确定算法？<br>A：上文说过，概率算法更加有效</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/XvbBj3QnUrOuw4q.jpg" alt=""></p><ul><li>为啥要大于等于0:即使敌手输出一个签名在签名空间里面的概率等于0也是会发生的</li><li>在加密的时候为啥是1/2:在加密的时候敌手只有true &amp; false两种，故随机猜测的概率最少也要大于1/2</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/oAhYiFdjbnZf8er.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/CStM7oEfGF2uVyT.jpg" alt=""></p><ul><li>advantage：指在不同的事件中其概率不一致</li><li>给定一个概率值，无法区分一种攻击是否是成功or失败的攻击</li><li>advantage是一种调整后的概率来代替probability</li><li>最小值必须是0</li></ul><blockquote><p>实际上，为了给定一个概率值去区分敌手是否成功或者失败才发明了这个东西</p></blockquote><h2 id="定义advantage"><a href="#定义advantage" class="headerlink" title="定义advantage"></a>定义advantage</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/1WYyQHBtrXJRMKj.jpg" alt=""><br>pideal：在不获得任何信息的情况下盲猜的最大概率。</p><ul><li>上图显示了probability和advantage的区别</li></ul><blockquote><p>和前面的ε类似，需要在具体的语境和问题下才能确定probability和advantage是否等价</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/EIFNhrksUx4ARY1.jpg" alt=""></p><p>一般我们不讨论advantage多大，只讨论其是否可被忽略</p><ul><li>推荐使用第二种定义，这样可以保证统一性，比如数字签名，加密等，这样的好处是其概率都处于0和1之间。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/3zqJpNXoPkE4nm2.jpg" alt=""></p><p>通过验证advantage是否可忽略，可以轻松的确定任何一种方案是否是安全的，换句话说，如果advantage时可忽略的，则方案时安全的</p><h1 id="困难问题"><a href="#困难问题" class="headerlink" title="困难问题"></a>困难问题</h1><h2 id="计算型困难问题"><a href="#计算型困难问题" class="headerlink" title="计算型困难问题"></a>计算型困难问题</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/cQYKh3jRFoEJw9A.jpg" alt=""></p><ul><li>关于random：涉及到了平均统计，不仅仅根据具体的x和y计算出来的，而是根据所有的x和y计算出来的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/SAWirBYXQFHNIVx.jpg" alt=""></p><p>判别式定义如上，参数解释如下：</p><ul><li>A(x)=True|x=True:当x=true的时候敌手猜中的概率</li><li>A(x)=True|x=False:猜错的的概率</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/ER26WPjGIyfVlXb.jpg" alt=""></p><p>一些注解：<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/DUVAhndepMIW8Jy.jpg" alt=""></p><ul><li>对一些关键词不需要进行替换</li><li>weak &amp; strong 是好是坏需要结合语境和具体问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/QoJPKFnrR9f47I6.jpg" alt=""></p><p>所有的assumption都可以分成两大类</p><blockquote><p>如果问题越难，则假设越弱<br>如果问题越弱，则假设越强</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/eHMYiWtQb9K4JaI.jpg" alt=""></p><ul><li>只要是在安全模型下方案是安全的即可，一般来说在超出设定的场景中使用方案导致不安全的概率要大于方案本身出现不安全情况的概率</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/Xhlmy3kLiTUPr9C.jpg" alt=""></p><ul><li>详见密码学报的文章</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/s5bezU63Gk1wjJd.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/jFSsMTfP8ALV7xo.jpg" alt=""></p><h2 id="困难问题的分析"><a href="#困难问题的分析" class="headerlink" title="困难问题的分析"></a>困难问题的分析</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/YFifNSVecWTEMZv.jpg" alt=""></p><blockquote><p>虽然现在没办法证明np不等于p，但是所有的密码方案都是基于这个式子的，故使用believed-to-be<br>但是在一些情况下可以证明其困难性：比如给定另外一些条件&amp;更强的假设</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/nLmZS8Xz5dw2PTI.jpg" alt=""></p><ul><li>通过规约的形式：基于一个困难问题上提出一个方案</li><li>通过一个更弱的安全模型：比如限制，或者弱化敌手的能力</li></ul><blockquote><p>标准计算模型即图灵机</p></blockquote><p>一种证明困难问题的技巧<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/rvfDl2KFex5QbkZ.jpg" alt=""></p><h1 id="安全参数"><a href="#安全参数" class="headerlink" title="安全参数"></a>安全参数</h1><h2 id="parameter"><a href="#parameter" class="headerlink" title="parameter"></a>parameter</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/2tQiawfep83nVXL.jpg" alt=""></p><h2 id="level"><a href="#level" class="headerlink" title="level"></a>level</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/GdC5hKuIkzP3F61.jpg" alt=""><br>security level取决于具体的方案or问题的定义。</p><ul><li>我们定义一个方案或者问题具有k bit安全，当敌手在进行2^k次计算后成功的概率为2/3时<blockquote><p>卧报 34期会有更加具体的描述</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/ioearghU7wSuDzZ.jpg" alt=""></p><ul><li>通过计算得出的k bit安全等级是在当前情况下的安全等级若有更强的攻击方案出现则安全等级随之下降</li></ul><p>安全等级的上限：<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/GOzKyHoLgd7x4Xe.jpg" alt=""></p><ul><li>如果解决一个问题b能让我我门马上攻破一个方案则该困难问题b是安全等级的上限</li></ul><p><img src="https://i.loli.net/2021/10/18/tO6zbKqogidCfXU.jpg" alt=""></p><ul><li>如果攻破一个方案可以立马解决一个困难问题a，则方案的等级高于问题a的等级，即a是方案的下限</li></ul><p>如下图所示，a是有条件的</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/R4TCuQKVo8sfHLS.jpg" alt=""></p><ul><li>目前比较容易知道第三条和第四条，第二条无法做到</li></ul><blockquote><p>目前我们只讨论下限，因为一个方案的安全必须针对所有的敌手都安全，则方案的安全性必须高于最强的那一部分敌手的能力</p></blockquote><h1 id="安全的定义"><a href="#安全的定义" class="headerlink" title="安全的定义"></a>安全的定义</h1><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/jyHJRqfe6clmkZQ.jpg" alt=""></p><ul><li>关于security model：作为安全和方案之间的桥梁，将各种对方案的攻击转化为计算型问题，在用复杂性理论对其进行分析。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/oErsAwPpgyQHY2d.jpg" alt=""></p><ul><li>安全定义没有用到安全等级的概念</li><li>security definition只和security parameter相关，和security level无关</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%89%E8%AE%B2/cIpKoAfS4XwWYCe.jpg" alt=""></p><ul><li>security parameter与密码相关，和computing problem无关</li></ul>]]></content>
    
    
    <summary type="html">安全规约课程笔记，整理一下以备以后查询使用，如果有错误欢迎留言讨论</summary>
    
    
    
    <category term="安全规约" scheme="https://www.happyshark.cn/categories/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6/"/>
    
    
    <category term="安全规约" scheme="https://www.happyshark.cn/tags/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>安全规约第二讲——有限域，群，双线性对，哈希函数</title>
    <link href="https://www.happyshark.cn/2022/03/02/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%BA%8C%E8%AE%B2%E2%80%94%E2%80%94%E6%9C%89%E9%99%90%E5%9F%9F%EF%BC%8C%E7%BE%A4%EF%BC%8C%E5%8F%8C%E7%BA%BF%E6%80%A7%E5%AF%B9%EF%BC%8C%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/"/>
    <id>https://www.happyshark.cn/2022/03/02/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%BA%8C%E8%AE%B2%E2%80%94%E2%80%94%E6%9C%89%E9%99%90%E5%9F%9F%EF%BC%8C%E7%BE%A4%EF%BC%8C%E5%8F%8C%E7%BA%BF%E6%80%A7%E5%AF%B9%EF%BC%8C%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/</id>
    <published>2022-03-02T14:00:00.000Z</published>
    <updated>2022-03-02T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有限域"><a href="#有限域" class="headerlink" title="有限域"></a>有限域</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEc2762979e78af3f0ba59dc88224bc149.png" alt=""></p><h2 id="有限域的运算"><a href="#有限域的运算" class="headerlink" title="有限域的运算"></a>有限域的运算</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEa9570ced8bd358cd98889c19bc85a403.png" alt=""></p><p>通过乘 加 来实现 </p><ul><li><p>除：u * v的逆元</p></li><li><p>减：u + v的逆元</p></li></ul><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE5c588860c99c22b5b9e579a3487d7f08.png" alt=""></p><ul><li><p>n为整数</p></li><li><p>q为素数</p></li><li><p>有限域中包含了q^n个元素。</p></li><li><p>有限域内每个元的长度都为n * |q|</p></li></ul><h3 id="素数域"><a href="#素数域" class="headerlink" title="素数域"></a>素数域</h3><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE1d07ffa8a8949c651ec144c2e61812c8.png" alt=""></p><h1 id="群"><a href="#群" class="headerlink" title="群"></a>群</h1><h2 id="阿贝尔群"><a href="#阿贝尔群" class="headerlink" title="阿贝尔群"></a>阿贝尔群</h2><p>定义：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE817e4cedef7fefbe7e3c524a625eaa9a.png" alt=""></p><ul><li>用点号（而不用加或者乘），可以是有限域中的加号，乘号.etc</li></ul><p>Ex：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE87c5bd91f34fd81f6b10a0c53d091d6a.png" alt=""></p><ul><li>可以通过H生成整个群的元素，所有的元素都可以通过h^i i=1,2,…得到</li></ul><h2 id="如何描述一个循环群？"><a href="#如何描述一个循环群？" class="headerlink" title="如何描述一个循环群？"></a>如何描述一个循环群？</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEe0982072f639b0e98aff32db1bcdb48c.png" alt=""></p><ul><li><p>G：群的空间</p></li><li><p>g：生成元</p></li><li><p>p：阶数</p></li></ul><h2 id="群元素"><a href="#群元素" class="headerlink" title="群元素"></a>群元素</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE2d23ebce74dace208a3cb2165bb52509.png" alt=""></p><ul><li>每个群元最少需要160bit</li></ul><blockquote><p>30期中有对安全等级做进一步解释</p></blockquote><h2 id="群中的简单问题和困难问题"><a href="#群中的简单问题和困难问题" class="headerlink" title="群中的简单问题和困难问题"></a>群中的简单问题和困难问题</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE455fdcc706b2a7e5a3e74e4d2ec499ce.png" alt=""></p><ul><li><p>有些计算必须要足够简单</p></li><li><p>有些计算必须要足够困难，例如公私钥（一个基本的困难问题是离散对数问题，并且只有某些构造的比较好的群才有离散对数这样的性质）</p></li></ul><h2 id="easy-：group-exponentiation（群指数）"><a href="#easy-：group-exponentiation（群指数）" class="headerlink" title="easy ：group exponentiation（群指数）"></a>easy ：group exponentiation（群指数）</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE7cb2b21769b2254f07416da610a28db1.png" alt=""></p><p>如上，定义一个运算，当x特别大的时候计算会比较困难，故采取先平方在乘的算法（square-and-multiply algorithm）</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEf3416a938e2b04e523400e2f39f9d3d0.png" alt=""></p><p>采用上述方法，最大只需要2^2n次运算即可</p><h2 id="hard：Discrete-Logarithm（离散对数）"><a href="#hard：Discrete-Logarithm（离散对数）" class="headerlink" title="hard：Discrete Logarithm（离散对数）"></a>hard：Discrete Logarithm（离散对数）</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE2a9b46ae93dcc2def66fbcde88d8c088.png" alt=""></p><ul><li><p>如果G是一个具有素数阶的循环群，那么任意给定两个群元g h ，那么这个离散对数x必然存在，而且是唯一的，这就是为啥一般都比较喜欢具有素数阶的循环群。</p></li><li><p>如果可以很简单的解决离散对数问题，那么所有基于群对数的加密方案都会不安全。</p></li></ul><p>以下介绍离散对数问题的计算复杂性：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEb7a23a84cda385f253f2cc4801f041a6.png" alt=""></p><blockquote><p>Ω代表下界，指至少需要根号p</p><p>O代表上界</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE12f2f61a0952c7c414a65433ca631157.png" alt=""></p><ul><li>群的阶必须要大于160来抵抗特殊的攻击，如果小于则敌手最多只需2^80步即可攻破</li></ul><h2 id="群的选择"><a href="#群的选择" class="headerlink" title="群的选择"></a>群的选择</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE18b8ccbc002c66b64f29671ad336841e.png" alt=""></p><p>为什么要定义其他的一些更加复杂&amp;高级的群而不直接使用有限域中已有的两个群？</p><ul><li>有很多原因，比如椭圆曲线群，群元素可以用长度表示从而让其长度更短。</li></ul><h3 id="乘法群"><a href="#乘法群" class="headerlink" title="乘法群"></a>乘法群</h3><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEea4173b35c4333c74f36d7964c77392a.png" alt=""></p><ul><li><p>q指大素数，p是比q小的一个素数</p></li><li><p>p只需要大于160bit，但q要大于1024bit（与RSA相似），因为目前存在一种特殊的攻击可以攻破该方案，使用这种攻击的前提就是q足够小</p></li></ul><h3 id="椭圆曲线群"><a href="#椭圆曲线群" class="headerlink" title="椭圆曲线群"></a>椭圆曲线群</h3><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEc412e886a311fd901e41e9b33945821e.png" alt=""></p><ul><li><p>主需要给出横坐标，从而减小其长度表示（y通过计算得出，故增加了计算量）</p></li><li><p>u·v：包含了有限域中的加法和乘法运算</p></li></ul><h2 id="基于椭圆曲线群的计算"><a href="#基于椭圆曲线群的计算" class="headerlink" title="基于椭圆曲线群的计算"></a>基于椭圆曲线群的计算</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE838787879dbd05fad0c86bfc1c145971.png" alt=""></p><ul><li>基于以上算法，可以构造出更加复杂的方案，比如上图中的Question</li></ul><h1 id="双线性对"><a href="#双线性对" class="headerlink" title="双线性对"></a>双线性对</h1><p>特点：将椭圆曲线上群的两个群元映射到一个乘法群上的群元，同时这种运算可以保持同态性。</p><blockquote><p>同态性：最早由两位日本学者提出，他们想解决椭圆曲线上困难问题，故提出将定义在椭圆曲线上的问题映射到惩罚群上去，在乘法群内解决在反映射回来。</p></blockquote><p>双线性对有3种：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE320489e16ca7da93f81cfb60ed1d457c.png" alt=""></p><h2 id="Symmetric-Pairing"><a href="#Symmetric-Pairing" class="headerlink" title="Symmetric Pairing"></a>Symmetric Pairing</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEd928e03f27c675af21ec91584048feb4.png" alt=""></p><h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/安全规约第四讲/WEBRESOURCE98090e9af310e1756399b2dff81f4a88.png" alt=""></p><ul><li>实际上，80bit已经不够安全，现在最少需要128bit</li></ul><h2 id="Asymmetric-Pairing-非对称对"><a href="#Asymmetric-Pairing-非对称对" class="headerlink" title="Asymmetric Pairing 非对称对"></a>Asymmetric Pairing 非对称对</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEaa07bdc24b9d5e942606a215ae63aefd.png" alt=""></p><h3 id="大小-1"><a href="#大小-1" class="headerlink" title="大小"></a>大小</h3><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEe8f2304bd57b897b1ac67f90df027f1e.png" alt=""></p><ul><li>因为目前有三种群 g1 g2 gt，为了确保安全，目前g1最少需要160bit，g2=gt最少需要1024bit，目的为了让g1群越小越好</li></ul><h2 id="pairing上的计算"><a href="#pairing上的计算" class="headerlink" title="pairing上的计算"></a>pairing上的计算</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE49cc290fd3e68c09f924712503c5de6f.png" alt=""></p><ul><li>在pairing上的计算可以拓展成乘法，指数，。。。，等其他方式的计算，实际上很多方案（比如加密，签名，认证等等）都是基于此扩展出来的，但是需要很高的技巧</li></ul><h1 id="哈希函数-H-·"><a href="#哈希函数-H-·" class="headerlink" title="哈希函数 H(·)"></a>哈希函数 H(·)</h1><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE8746821140089f64e20d6c1e2259252b.png" alt=""></p><ul><li>其中的一个用途：缩短签名长度：如果有个签名方案是按每bit签名，若有个1g的文件不压缩的话就签到猴年马月了；相反通过hash缩小到一个定长长度在对hash签名就很快</li></ul><h2 id="基于安全性的分类"><a href="#基于安全性的分类" class="headerlink" title="基于安全性的分类"></a>基于安全性的分类</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEb1d3d5adab5bc1eb264ddfcf643c4b1b.png" alt=""></p><h2 id="基于输出对哈希函数进行分类"><a href="#基于输出对哈希函数进行分类" class="headerlink" title="基于输出对哈希函数进行分类"></a>基于输出对哈希函数进行分类</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE28088345de4600719e80552d0009a7c6.png" alt=""></p><p>可以分成三类：</p><ul><li><p>n bit 的串：输出结果可以用作key，与对称密码结合用于加解密</p></li><li><p>Zp：</p></li><li><p>输出到群中： </p></li></ul><blockquote><p>为什么不直接用第二种取代第三种：如果使用第二种方法在方案构造中会出现不安全，只有用第三种才能构造出安全的方案。</p></blockquote><h1 id="随机函数"><a href="#随机函数" class="headerlink" title="随机函数"></a>随机函数</h1><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEed4f8c1cdfa807e7136c505b29932975.png" alt=""></p><blockquote><p>现有的公钥加密也是需要随机数得到，否则无法达到ind安全</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEad988e3ff026c88b67fa82bf4b347693.png" alt=""></p><blockquote><p>现有的密码方案是依赖许多假设的 </p></blockquote><h1 id="不安全的方案"><a href="#不安全的方案" class="headerlink" title="不安全的方案"></a>不安全的方案</h1><blockquote><p>错误的方案原因都类似的，下面以签名为例</p></blockquote><h2 id="不安全的数字前面"><a href="#不安全的数字前面" class="headerlink" title="不安全的数字前面"></a>不安全的数字前面</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEb90c906ce54a3d0ded13831bae59cfda.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEf36c8845a0682996c6bbd6b06c4287ae.png" alt=""></p><ul><li>基础运算需要大量的去熟悉联系</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCEfc17b617a64b4043bd62523f15cb5853.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE4f9fbb0a9e11b91a643639dcf405081e.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE7193aa0ed95d59e60bc2f89126e23944.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE5c5de542ef3f6fb6e2d8825a27c3690e.png" alt=""></p><blockquote><p>第四个和第五个相似</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E5%9B%9B%E8%AE%B2/WEBRESOURCE99afb70e8ef8a911a7b38eb972aac87d.png" alt=""></p><blockquote><p>6与1类似</p></blockquote>]]></content>
    
    
    <summary type="html">安全规约课程笔记，整理一下以备以后查询使用，如果有错误欢迎留言讨论</summary>
    
    
    
    <category term="安全规约" scheme="https://www.happyshark.cn/categories/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6/"/>
    
    
    <category term="安全规约" scheme="https://www.happyshark.cn/tags/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>抓饭</title>
    <link href="https://www.happyshark.cn/2022/02/12/%E6%8A%93%E9%A5%AD/"/>
    <id>https://www.happyshark.cn/2022/02/12/%E6%8A%93%E9%A5%AD/</id>
    <published>2022-02-12T04:00:00.000Z</published>
    <updated>2022-02-12T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><ol><li><p>羊肉切开洗净，把水晾干，油锅加盐（不崩），中火把肉放进去抄抄，炒出水之后盖上锅盖把水闷干。</p><blockquote><p>过几分钟就开盖翻炒一下。 </p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132430021.png" alt="image-20220212132430021"></p></li><li><p>闷干之后出锅备用，油留锅里别倒掉<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132517077.png" alt="image-20220212132517077"></p></li><li><p>胡萝卜（3个）削皮切条，把米洗净备用<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132540721.png" alt="image-20220212132540721"></p></li><li><p>胡萝卜倒进锅里中火炒炒（油少了可以加些油），加些盐<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132605423.png" alt="image-20220212132605423"></p></li><li><p>抄完倒进高压锅，再往锅里加些水，米撒到胡萝卜上面，肉放到米上面。盖上锅盖大火烧到高压锅喷气，火改小一些（改到泄压阀不那么暴力为止）压10~15分钟米熟为止<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132627827.png" alt="image-20220212132627827"><br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132651559.png" alt="image-20220212132651559"></p></li><li><p>关火高压锅放一边泄气，气没了就可以开锅享受美食啦</p></li></ol>]]></content>
    
    
    <summary type="html">老爸的做法，高压锅版</summary>
    
    
    
    <category term="厨房里的秘密" scheme="https://www.happyshark.cn/categories/%E5%8E%A8%E6%88%BF%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    
    
    <category term="家的味道" scheme="https://www.happyshark.cn/tags/%E5%AE%B6%E7%9A%84%E5%91%B3%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>蒸面条</title>
    <link href="https://www.happyshark.cn/2022/02/11/%E8%92%B8%E9%9D%A2%E6%9D%A1/"/>
    <id>https://www.happyshark.cn/2022/02/11/%E8%92%B8%E9%9D%A2%E6%9D%A1/</id>
    <published>2022-02-11T04:00:00.000Z</published>
    <updated>2022-02-11T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><ol><li>蒸锅加水，放手工面大火蒸到水开，改中火蒸十~十五分钟<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212131748569.png" alt="image-20220212131748569"></li><li>猪肉切片，蒜薹洗干净切成一段一段的，姜切成片，切一节葱备用，也可选干辣椒调色<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212131830715.png" alt="image-20220212131830715"></li><li>锅里放油，加猪肉炒变色放生抽调色，放姜，葱，干辣椒，蒜薹炒半熟，加咸盐，出锅备用<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212131900050.png" alt="image-20220212131900050"></li><li>面蒸好之后出锅加些油（如果面太干加些水）拌开，蒸锅再加水大火煮水<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212131921751.png" alt="image-20220212131921751"></li><li>加生抽调颜色，酱油，咸盐调味，可选十三香花椒粉鸡精。继续拌开<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212131948425.png" alt="image-20220212131948425"></li><li>把前面炒的菜倒进去继续拌开，尝下味道淡了加生抽调味，干的话再加点油。一定要拌开不能缠一块<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132003990.png" alt="image-20220212132003990"></li><li>蒸锅水开了之后关火，先放面再放菜（避免菜从篦子洞掉下去），盖上锅盖大火烧一会锅里充满蒸汽之后改小火慢慢焖蒸10~15分钟入味。<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132030268.png" alt="image-20220212132030268"></li><li>关火出锅，拌辣椒酱，香菇酱。味道好极啦<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132108982.png" alt="image-20220212132108982"></li></ol>]]></content>
    
    
    <summary type="html">老妈的传统手艺，蒸面条！感觉还是手工面好吃一些，不过这次没买到就只能吃机器压的面了</summary>
    
    
    
    <category term="厨房里的秘密" scheme="https://www.happyshark.cn/categories/%E5%8E%A8%E6%88%BF%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    
    
    <category term="家的味道" scheme="https://www.happyshark.cn/tags/%E5%AE%B6%E7%9A%84%E5%91%B3%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>炒扇贝肉</title>
    <link href="https://www.happyshark.cn/2022/02/10/%E7%82%92%E6%89%87%E8%B4%9D%E8%82%89/"/>
    <id>https://www.happyshark.cn/2022/02/10/%E7%82%92%E6%89%87%E8%B4%9D%E8%82%89/</id>
    <published>2022-02-10T04:00:00.000Z</published>
    <updated>2022-02-10T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><ol><li><p>把贝壳肉清理出来，去掉内胆杂质</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151231250.png" alt="image-20220210151231250"></p></li><li><p>锅里加油，放姜和辣椒抄一抄出锅备用</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151256350.png" alt="image-20220210151256350"></p></li><li><p>加油放葱姜香锅，放扇贝肉炒熟，改中火加酱油调色，耗油调味，料酒去腥</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151314665.png" alt="image-20220210151314665"></p></li><li><p>把辣椒加进去拌开，尝尝咸淡，淡的话可以加点盐。小火收汁出锅</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151339498.png" alt="image-20220210151339498"></p></li></ol>]]></content>
    
    
    <summary type="html">一大袋子扇贝，弄完就一点点，不够塞牙缝的</summary>
    
    
    
    <category term="厨房里的秘密" scheme="https://www.happyshark.cn/categories/%E5%8E%A8%E6%88%BF%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    
    
    <category term="家的味道" scheme="https://www.happyshark.cn/tags/%E5%AE%B6%E7%9A%84%E5%91%B3%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>炒烤肉</title>
    <link href="https://www.happyshark.cn/2022/02/10/%E7%82%92%E7%83%A4%E8%82%89/"/>
    <id>https://www.happyshark.cn/2022/02/10/%E7%82%92%E7%83%A4%E8%82%89/</id>
    <published>2022-02-10T04:00:00.000Z</published>
    <updated>2022-02-10T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><ol><li><p>羊肉拿出来化成半冻状态，切片</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151607906.png" alt="image-20220210151607906"></p></li><li><p>可选步骤：如果想吃软一点的烤肉可在肉里面加些勾芡淀粉，抓一抓拌匀</p><blockquote><p>就和揉面一样把肉放到盆里，然后加点淀粉开始揉，揉开就ok</p></blockquote></li><li><p>锅里放油防粘锅（看一下肥肉多不多，多的话油可以少放点），放肉小火炒</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151726064.png" alt="image-20220210151726064"></p></li><li><p>炒到变色，放点盐，辣椒面</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151756289.png" alt="image-20220210151756289"></p></li><li><p>炒熟，在放孜然，关火拌开出锅</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151817390.png" alt="image-20220210151817390"></p></li></ol>]]></content>
    
    
    <summary type="html">年夜饭必背硬菜之一，包含了嫩一点和干一点两种做法~</summary>
    
    
    
    <category term="厨房里的秘密" scheme="https://www.happyshark.cn/categories/%E5%8E%A8%E6%88%BF%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    
    
    <category term="家的味道" scheme="https://www.happyshark.cn/tags/%E5%AE%B6%E7%9A%84%E5%91%B3%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>红烧多宝鱼</title>
    <link href="https://www.happyshark.cn/2022/02/10/%E7%BA%A2%E7%83%A7%E5%A4%9A%E5%AE%9D%E9%B1%BC/"/>
    <id>https://www.happyshark.cn/2022/02/10/%E7%BA%A2%E7%83%A7%E5%A4%9A%E5%AE%9D%E9%B1%BC/</id>
    <published>2022-02-10T04:00:00.000Z</published>
    <updated>2022-02-10T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><ol><li><p>剪掉尾巴和鱼鳍，把鱼鳃和内胆掏干净（边上有个小孔从那开始沿着黑色部分剪开，里面掏干净不要弄破内胆）</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210150909686.png" alt="image-20220210150909686"></p></li><li><p>锅里倒油，放葱和姜香锅，然后加酱油，耗油，水</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210150936619.png" alt="image-20220210150936619"></p></li><li><p>放入鱼，大火烧开，有沫（血）的话可以撇一下</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210150955994.png" alt="image-20220210150955994"></p></li><li><p>放料酒去腥，在放点葱调色，小伙炖一会大火收汁。出锅之前放点鸡精提味，在撇一下沫</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151013356.png" alt="image-20220210151013356"></p></li><li><p>水蒸发的差不多了收汁出锅</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151038891.png" alt="image-20220210151038891"></p></li></ol>]]></content>
    
    
    <summary type="html">多宝鱼，感觉这鱼肉没有鲳鱼好吃orz</summary>
    
    
    
    <category term="厨房里的秘密" scheme="https://www.happyshark.cn/categories/%E5%8E%A8%E6%88%BF%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    
    
    <category term="家的味道" scheme="https://www.happyshark.cn/tags/%E5%AE%B6%E7%9A%84%E5%91%B3%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>蒸饭（高压锅速成版）</title>
    <link href="https://www.happyshark.cn/2022/02/10/%E8%92%B8%E9%A5%AD%EF%BC%88%E9%AB%98%E5%8E%8B%E9%94%85%E9%80%9F%E6%88%90%E7%89%88%EF%BC%89/"/>
    <id>https://www.happyshark.cn/2022/02/10/%E8%92%B8%E9%A5%AD%EF%BC%88%E9%AB%98%E5%8E%8B%E9%94%85%E9%80%9F%E6%88%90%E7%89%88%EF%BC%89/</id>
    <published>2022-02-10T04:00:00.000Z</published>
    <updated>2022-02-10T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><ol><li><p>高压锅里面放水，米饭洗净装到碗里放进高压锅。当然也可以在下面水里面放个玉米，或者在上面放个红薯利用下空间hhh</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210150208622.png" alt="image-20220210150208622"></p></li><li><p>盖上盖子大火烧到往外喷气开始，火稍微关小点（避免压力太高，也不要太小了就不喷气了）继续倒计时10分钟</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210150353001.png" alt="image-20220210150353001"></p></li><li><p>关火，等压力阀下去再焖十来分钟出锅就行~要是时间不够连锅放到冷水里面冷却一下</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/20220210150427.png" alt=""></p></li></ol>]]></content>
    
    
    <summary type="html">速成米饭，麻麻再也不担心我忘了提前用电饭锅做米饭了</summary>
    
    
    
    <category term="厨房里的秘密" scheme="https://www.happyshark.cn/categories/%E5%8E%A8%E6%88%BF%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    
    
    <category term="家的味道" scheme="https://www.happyshark.cn/tags/%E5%AE%B6%E7%9A%84%E5%91%B3%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>清蒸贝壳</title>
    <link href="https://www.happyshark.cn/2022/02/09/%E6%B8%85%E8%92%B8%E8%B4%9D%E5%A3%B3/"/>
    <id>https://www.happyshark.cn/2022/02/09/%E6%B8%85%E8%92%B8%E8%B4%9D%E5%A3%B3/</id>
    <published>2022-02-09T04:00:00.000Z</published>
    <updated>2022-02-09T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><ol><li><p>清洗一下贝壳肉</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220209225923639.png" alt=""></p></li><li><p>清水煮一碗粉丝</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220209230241958.png" alt="image-20220209230241958"></p></li><li><p>调汁：葱姜耗油水料酒生抽</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220209230307708.png" alt="image-20220209230307708"></p></li><li><p>每个贝壳上面放点粉丝，再加汁，上蒸锅，加水大火蒸六到十分钟</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220209230341168.png" alt="image-20220209230341168"></p></li><li><p>关火出锅</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220209230404457.png" alt="image-20220209230404457"></p></li></ol>]]></content>
    
    
    <summary type="html">清蒸贝壳，味道好极啦</summary>
    
    
    
    <category term="厨房里的秘密" scheme="https://www.happyshark.cn/categories/%E5%8E%A8%E6%88%BF%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    
    
    <category term="家的味道" scheme="https://www.happyshark.cn/tags/%E5%AE%B6%E7%9A%84%E5%91%B3%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>糖醋排骨</title>
    <link href="https://www.happyshark.cn/2022/02/09/%E7%B3%96%E9%86%8B%E6%8E%92%E9%AA%A8/"/>
    <id>https://www.happyshark.cn/2022/02/09/%E7%B3%96%E9%86%8B%E6%8E%92%E9%AA%A8/</id>
    <published>2022-02-09T04:00:00.000Z</published>
    <updated>2022-02-09T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><ol><li><p>白糖淀粉西红柿酱加水配汁</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120640514.png" alt="image-20220210120640514"></p></li><li><p>锅里加汁，放红烧排骨（去调料）炒熟</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120723628.png" alt="image-20220210120723628"></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120741093.png" alt="image-20220210120741093"></p></li></ol>]]></content>
    
    
    <summary type="html">年夜饭c位佳肴，全家吃了都说好</summary>
    
    
    
    <category term="厨房里的秘密" scheme="https://www.happyshark.cn/categories/%E5%8E%A8%E6%88%BF%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    
    
    <category term="家的味道" scheme="https://www.happyshark.cn/tags/%E5%AE%B6%E7%9A%84%E5%91%B3%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>紫菜蛋花汤</title>
    <link href="https://www.happyshark.cn/2022/02/09/%E7%B4%AB%E8%8F%9C%E8%9B%8B%E8%8A%B1%E6%B1%A4/"/>
    <id>https://www.happyshark.cn/2022/02/09/%E7%B4%AB%E8%8F%9C%E8%9B%8B%E8%8A%B1%E6%B1%A4/</id>
    <published>2022-02-09T04:00:00.000Z</published>
    <updated>2022-02-09T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><ol><li><p>锅里加水，可选放一些虾皮一起煮等，水开</p></li><li><p>水开了之后改中火，放番茄丁（番茄也可以） 紫菜，盐，可选胡椒粉（调辣） ，淀粉（调粘稠度），耗油（调鲜调味）<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212133040186.png" alt="image-20220212133040186"></p></li><li><p>打蛋花，对着冒泡的地方慢慢往里滴<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212133107802.png" alt="image-20220212133107802"></p></li><li><p>放菠菜（菠菜第二步放也可以，量大的话推荐最后一步放菠菜，因为菠菜煮时间长容易老），浮起来放香油，可选鸡精和味精，煮一会就可以出锅啦<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212133136839.png" alt="image-20220212133136839"></p></li></ol>]]></content>
    
    
    <summary type="html">来自老妈&amp;二舅的手艺二合一版，做法可繁可简，味道好极啦</summary>
    
    
    
    <category term="厨房里的秘密" scheme="https://www.happyshark.cn/categories/%E5%8E%A8%E6%88%BF%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    
    
    <category term="家的味道" scheme="https://www.happyshark.cn/tags/%E5%AE%B6%E7%9A%84%E5%91%B3%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>红烧虾</title>
    <link href="https://www.happyshark.cn/2022/02/09/%E7%BA%A2%E7%83%A7%E8%99%BE/"/>
    <id>https://www.happyshark.cn/2022/02/09/%E7%BA%A2%E7%83%A7%E8%99%BE/</id>
    <published>2022-02-09T04:00:00.000Z</published>
    <updated>2022-02-09T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><ol><li><p>调汁儿：小葱 料酒 姜 鸡精 耗油 生抽 酱油</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210121235203.png" alt="image-20220210121235203"></p></li><li><p>锅放油，倒虾，炒制变色，放汁</p><p>-<img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210121258320.png" alt="image-20220210121258320"></p></li><li><p>放水大火收汁，不用盖锅盖，最后放鸡精调味出锅</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210121406157.png" alt="image-20220210121406157"></p></li></ol>]]></content>
    
    
    <summary type="html">今天开始学做虾</summary>
    
    
    
    <category term="厨房里的秘密" scheme="https://www.happyshark.cn/categories/%E5%8E%A8%E6%88%BF%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    
    
    <category term="家的味道" scheme="https://www.happyshark.cn/tags/%E5%AE%B6%E7%9A%84%E5%91%B3%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>红烧鱼</title>
    <link href="https://www.happyshark.cn/2022/02/09/%E7%BA%A2%E7%83%A7%E9%B1%BC/"/>
    <id>https://www.happyshark.cn/2022/02/09/%E7%BA%A2%E7%83%A7%E9%B1%BC/</id>
    <published>2022-02-09T04:00:00.000Z</published>
    <updated>2022-02-09T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><ol><li><p>把鱼鳃 内胆 鱼鳞处理好，抹盐淹一会</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120226539.png" alt="image-20220210120226539"></p></li><li><p>锅里倒油至冒烟放鱼煎一下（油热不粘锅）</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120402098.png" alt="image-20220210120402098"></p></li><li><p>放酱油，料酒，耗油，葱，蒜，可选辣椒，然后改小火，盖上锅盖炖到水干（大概七八分钟）</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120419613.png" alt="image-20220210120419613"></p></li><li><p>4分钟左右可以开锅尝一下咸淡，加盐，放点白糖提鲜继续炖，熟了之后改大火收汁</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120439074.png" alt="image-20220210120439074"></p></li><li><p>最后再加点葱提色，鸡精提鲜，出锅</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120458363.png" alt="image-20220210120458363"></p></li></ol>]]></content>
    
    
    <summary type="html">我还是喜欢吃我爸做的红烧鱼，清蒸没味Ψ(￣∀￣)Ψ</summary>
    
    
    
    <category term="厨房里的秘密" scheme="https://www.happyshark.cn/categories/%E5%8E%A8%E6%88%BF%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    
    
    <category term="家的味道" scheme="https://www.happyshark.cn/tags/%E5%AE%B6%E7%9A%84%E5%91%B3%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令手册</title>
    <link href="https://www.happyshark.cn/2021/10/21/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/"/>
    <id>https://www.happyshark.cn/2021/10/21/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/</id>
    <published>2021-10-21T04:00:00.000Z</published>
    <updated>2021-10-21T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关机-重启-注销"><a href="#关机-重启-注销" class="headerlink" title="关机/重启/注销"></a>关机/重启/注销</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>shutdown -h now</td><td>即刻关机</td></tr><tr><td>shutdown -h 10</td><td>10分钟后关机</td></tr><tr><td>shutdown -h 11:00</td><td>11：00关机</td></tr><tr><td>shutdown -h +10</td><td>预定时间关机（10分钟后）</td></tr><tr><td>shutdown -c</td><td>取消指定时间关机</td></tr><tr><td>shutdown -r now</td><td>重启</td></tr><tr><td>shutdown -r 10</td><td>10分钟之后重启</td></tr><tr><td>shutdown -r 11:00</td><td>定时重启</td></tr><tr><td>reboot</td><td>重启</td></tr><tr><td>init 6</td><td>重启</td></tr><tr><td>init 0</td><td>⽴刻关机</td></tr><tr><td>telinit 0</td><td>关机</td></tr><tr><td>poweroff</td><td>⽴刻关机</td></tr><tr><td>halt</td><td>关机</td></tr><tr><td>sync</td><td>buff数据同步到磁盘</td></tr><tr><td>logout</td><td>退出登录Shell</td></tr></tbody></table></div><h1 id="系统信息和性能查看"><a href="#系统信息和性能查看" class="headerlink" title="系统信息和性能查看"></a>系统信息和性能查看</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>uname -a</td><td>查看内核/OS/CPU信息</td></tr><tr><td>uname -r</td><td>查看内核版本</td></tr><tr><td>uname -m</td><td>查看处理器架构</td></tr><tr><td>arch</td><td>查看处理器架构</td></tr><tr><td>hostname</td><td>查看计算机名</td></tr><tr><td>who</td><td>显示当前登录系统的⽤户</td></tr><tr><td>who am i</td><td>显示登录时的⽤户名</td></tr><tr><td>whoami</td><td>显示当前⽤户名</td></tr><tr><td>cat /proc/version</td><td>查看linux版本信息</td></tr><tr><td>cat /proc/cpuinfo</td><td>查看CPU信息</td></tr><tr><td>cat /proc/interrupts</td><td>查看中断</td></tr><tr><td>cat /proc/loadavg</td><td>查看系统负载</td></tr><tr><td>uptime</td><td>查看系统运⾏时间、⽤户数、负载</td></tr><tr><td>env</td><td>查看系统的环境变量</td></tr><tr><td>lsusb -tv</td><td>查看系统USB设备信息</td></tr><tr><td>lspci -tv</td><td>查看系统PCI设备信息</td></tr><tr><td>lsmod</td><td>查看已加载的系统模块</td></tr><tr><td>grep MemTotal /proc/meminfo</td><td>查看内存总量</td></tr><tr><td>grep MemFree /proc/meminfo</td><td>查看空闲内存量</td></tr><tr><td>free -m</td><td>查看内存⽤量和交换区⽤量</td></tr><tr><td>date</td><td>显示系统⽇期时间</td></tr><tr><td>cal 2021</td><td>显示2021⽇历表</td></tr><tr><td>top</td><td>动态显示cpu/内存/进程等情况</td></tr><tr><td>vmstat 1 20</td><td>每1秒采⼀次系统状态，采20次</td></tr><tr><td>iostat</td><td>查看io读写/cpu使⽤情况</td></tr><tr><td>查看io读写/cpu使⽤情况</td><td>查询cpu使⽤情况（1秒⼀次，共10次）</td></tr><tr><td>sar -d 1 10</td><td>查询磁盘性能</td></tr></tbody></table></div><h1 id="磁盘和分区"><a href="#磁盘和分区" class="headerlink" title="磁盘和分区"></a>磁盘和分区</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>fdisk -l</td><td>查看所有磁盘分区</td></tr><tr><td>swapon -s</td><td>查看所有交换分区</td></tr><tr><td>df -h</td><td>查看磁盘使⽤情况及挂载点</td></tr><tr><td>df -hl</td><td>同上</td></tr><tr><td>du -sh /dir</td><td>查看指定某个⽬录的⼤⼩</td></tr><tr><td>du -sk * \</td><td>sort -rn</td><td>从⾼到低依次显示⽂件和⽬录⼤⼩</td></tr><tr><td>mount /dev/hda2 /mnt/hda2</td><td>挂载hda2盘</td></tr><tr><td>mount -t ntfs /dev/sdc1 /mnt/usbhd1</td><td>指定⽂件系统类型挂载（如ntfs）</td></tr><tr><td>mount -o loop xxx.iso /mnt/cdrom</td><td>挂 载 iso ⽂ 件</td></tr><tr><td>umount -v /dev/sda1</td><td>通过设备名卸载</td></tr><tr><td>umount -v /mnt/mymnt</td><td>通过挂载点卸载</td></tr><tr><td>fuser -km /mnt/hda1</td><td>强制卸载(慎⽤)</td></tr></tbody></table></div><h1 id="⽤户和⽤户组"><a href="#⽤户和⽤户组" class="headerlink" title="⽤户和⽤户组"></a>⽤户和⽤户组</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>useradd codesheep</td><td>创建⽤户</td></tr><tr><td>userdel -r codesheep</td><td>删除⽤户</td></tr><tr><td>usermod -g group_name user_name</td><td>修改⽤户的组</td></tr><tr><td>usermod -aG group_name user_name</td><td>将⽤户添加到组</td></tr><tr><td>usermod -s /bin/ksh -d /home/codepig –g dev codesheep</td><td>修改⽤户codesheep的登录Shell、主⽬录以及⽤户组</td></tr><tr><td>groups test</td><td>查看test⽤户所在的组</td></tr><tr><td>groupadd group_name</td><td>创建⽤户组</td></tr><tr><td>groupdel group_name</td><td>删除⽤户组</td></tr><tr><td>groupmod -n new_name old_name</td><td>重命名⽤户组</td></tr><tr><td>su - user_name</td><td>su - user_name</td></tr><tr><td>passwd</td><td>修改⼝令</td></tr><tr><td>passwd codesheep</td><td>修改某⽤户的⼝令</td></tr><tr><td>w</td><td>查看活动⽤户</td></tr><tr><td>id codesheep</td><td>查看指定⽤户codesheep信息</td></tr><tr><td>last</td><td>查看⽤户登录⽇志</td></tr><tr><td>crontab -l</td><td>查看当前⽤户的计划任务</td></tr><tr><td>cut -d: -f1 /etc/passwd</td><td>查看系统所有⽤户</td></tr><tr><td>cut -d: -f1 /etc/group</td><td>查看系统所有组</td></tr></tbody></table></div><h1 id="⽹络和进程管理"><a href="#⽹络和进程管理" class="headerlink" title="⽹络和进程管理"></a>⽹络和进程管理</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>ifconfig</td><td>查看⽹络接⼝属性</td></tr><tr><td>ifconfig eth0</td><td>查看某⽹卡的配置</td></tr><tr><td>route -n</td><td>查看路由表</td></tr><tr><td>netstat -lntp</td><td>查看所有监听端⼝</td></tr><tr><td>netstat -antp</td><td>查看已经建⽴的TCP连接</td></tr><tr><td>netstat -lutp</td><td>查看TCP/UDP的状态信息</td></tr><tr><td>ifup eth0</td><td>启⽤eth0⽹络设备</td></tr><tr><td>ifdown eth0</td><td>禁⽤eth0⽹络设备</td></tr><tr><td>iptables -L</td><td>查看iptables规则</td></tr><tr><td>ifconfig eth0 192.168.1.1 netmask 255.255.255.0</td><td>配置ip地址</td></tr><tr><td>dhclient eth0</td><td>以dhcp模式启⽤eth0</td></tr><tr><td>route add -net 0/0 gw Gateway_IP</td><td>配置默认⽹关</td></tr><tr><td>route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1</td><td>配置静态路由到达⽹络’192.168.0.0/16’</td></tr><tr><td>route del 0/0 gw Gateway_IP</td><td>删除静态路由</td></tr><tr><td>hostname</td><td>查看主机名</td></tr><tr><td>host <a href="http://www.baidu.com">www.baidu.com</a></td><td>解析主机名</td></tr><tr><td>nslookup <a href="http://www.baidu.com">www.baidu.com</a></td><td>查询DNS记录，查看域名解析是否正常</td></tr><tr><td>ps -ef</td><td>查看所有进程</td></tr><tr><td>ps -ef \</td><td>grep codesheep</td><td>过滤出你需要的进程</td></tr><tr><td>kill -s name</td><td>kill指定名称的进程</td></tr><tr><td>kill -s pid</td><td>kill指定pid的进程</td></tr><tr><td>top</td><td>实时显示进程状态</td></tr><tr><td>vmstat 1 20</td><td>每1秒采⼀次系统状态，采20次</td></tr><tr><td>iostat</td><td>iostat</td></tr><tr><td>sar -u 1 10</td><td>查询cpu使⽤情况（1秒⼀次，共10次）</td></tr><tr><td>sar -d 1 10</td><td>查询磁盘性能</td></tr></tbody></table></div><h1 id="常⻅系统服务命令"><a href="#常⻅系统服务命令" class="headerlink" title="常⻅系统服务命令"></a>常⻅系统服务命令</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>chkconfig —list</td><td>列出系统服务</td></tr><tr><td>service &lt;服务名&gt; status</td><td>查看某个服务</td></tr><tr><td>service &lt;服务名&gt; start</td><td>启动某个服务</td></tr><tr><td>service &lt;服务名&gt; stop</td><td>终⽌某个服务</td></tr><tr><td>service &lt;服务名&gt; restart</td><td>重启某个服务</td></tr><tr><td>systemctl status &lt;服务名&gt;</td><td>查看某个服务</td></tr><tr><td>systemctl start &lt;服务名&gt;</td><td>启动某个服务</td></tr><tr><td>systemctl stop &lt;服务名&gt;</td><td>终⽌某个服务</td></tr><tr><td>systemctl restart &lt;服务名&gt;</td><td>重启某个服务</td></tr><tr><td>systemctl enable &lt;服务名&gt;</td><td>关闭⾃启动</td></tr><tr><td>systemctl disable &lt;服务名&gt;</td><td>关闭⾃启动</td></tr></tbody></table></div><h1 id="⽂件和⽬录操作"><a href="#⽂件和⽬录操作" class="headerlink" title="⽂件和⽬录操作"></a>⽂件和⽬录操作</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>cd &lt;⽬录名&gt;</td><td>进⼊某个⽬录</td></tr><tr><td>cd ..</td><td>回上级⽬录</td></tr><tr><td>cd ../..</td><td>回上两级⽬录</td></tr><tr><td>cd</td><td>进个⼈主⽬录</td></tr><tr><td>cd -</td><td>回上⼀步所在⽬录</td></tr><tr><td>pwd</td><td>显示当前路径</td></tr><tr><td>ls</td><td>查看⽂件⽬录列表</td></tr><tr><td>ls -F</td><td>查看⽬录中内容（显示是⽂件还是⽬录）</td></tr><tr><td>ls -l</td><td>查看⽂件和⽬录的详情列表</td></tr><tr><td>ls -a</td><td>查看隐藏⽂件</td></tr><tr><td>ls -lh</td><td>查看⽂件和⽬录的详情列表（增强⽂件⼤⼩易读性）</td></tr><tr><td>ls -lSr</td><td>查看⽂件和⽬录列表（以⽂件⼤⼩升序查看）</td></tr><tr><td>tree</td><td>查看⽂件和⽬录的树形结构</td></tr><tr><td>mkdir &lt;⽬录名&gt;</td><td>创建⽬录</td></tr><tr><td>mkdir dir1 dir2</td><td>同时创建两个⽬录</td></tr><tr><td>mkdir -p /tmp/dir1/dir2</td><td>创建⽬录树</td></tr><tr><td>rm -f file1</td><td>删除’file1’⽂件</td></tr><tr><td>rmdir dir1</td><td>删除’dir1’⽬录</td></tr><tr><td>rm -rf dir1</td><td>删除’dir1’⽬录和其内容</td></tr><tr><td>rm -rf dir1 dir2</td><td>同时删除两个⽬录及其内容</td></tr><tr><td>mv old_dir new_dir</td><td>重命名/移动⽬录</td></tr><tr><td>cp file1 file2</td><td>复制⽂件</td></tr><tr><td>cp dir/* .</td><td>复制某⽬录下的所有⽂件⾄当前⽬录</td></tr><tr><td>cp -a dir1 dir2</td><td>复制⽬录</td></tr><tr><td>cp -a /tmp/dir1 .</td><td>复制⼀个⽬录⾄当前⽬录</td></tr><tr><td>ln -s file1 link1</td><td>创建指向⽂件/⽬录的软链接</td></tr><tr><td>ln file1 lnk1</td><td>创建指向⽂件/⽬录的物理链接</td></tr><tr><td>find / -name file1</td><td>从跟⽬录开始搜索⽂件/⽬录</td></tr><tr><td>find / -user user1</td><td>搜索⽤户user1的⽂件/⽬录</td></tr><tr><td>find /dir -name *.bin</td><td>在⽬录/dir中搜带有.bin后缀的⽂件</td></tr><tr><td>locate &lt;关键词&gt;</td><td>快速定位⽂件</td></tr><tr><td>locate *.mp4</td><td>寻找.mp4结尾的⽂件</td></tr><tr><td>whereis &lt;关键词&gt;</td><td>显示某⼆进制⽂件/可执⾏⽂件的路径</td></tr><tr><td>which &lt;关键词&gt;</td><td>查找系统⽬录下某的⼆进制⽂件</td></tr><tr><td>chmod ugo+rwx dir1</td><td>设置⽬录所有者(u)、群组(g)及其他⼈(o)的读（r）写(w)执⾏(x)权限</td></tr><tr><td>chmod go-rwx dir1</td><td>移除群组(g)与其他⼈(o)对⽬录的读写执⾏权限</td></tr><tr><td>chown user1 file1</td><td>改变⽂件的所有者属性</td></tr><tr><td>chown -R user1 dir1</td><td>改变⽬录的所有者属性</td></tr><tr><td>chgrp group1 file1</td><td>改变⽂件群组</td></tr><tr><td>chown user1:group1 file1</td><td>改变⽂件的所有⼈和群组</td></tr></tbody></table></div><h1 id="⽂件查看和处理"><a href="#⽂件查看和处理" class="headerlink" title="⽂件查看和处理"></a>⽂件查看和处理</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>cat file1</td><td>查看⽂件内容</td></tr><tr><td>cat -n file1</td><td>查看内容并标示⾏数</td></tr><tr><td>tac file1</td><td>从最后⼀⾏开始反看⽂件内容</td></tr><tr><td>more file1</td><td>more file1</td></tr><tr><td>less file1</td><td>类似more命令，但允许反向操作</td></tr><tr><td>head -2 file1</td><td>查看⽂件前两⾏</td></tr><tr><td>tail -2 file1</td><td>查看⽂件后两⾏</td></tr><tr><td>tail -f /log/msg</td><td>实时查看添加到⽂件中的内容</td></tr><tr><td>grep codesheep hello.txt</td><td>在⽂件hello.txt中查找关键词codesheep</td></tr><tr><td>grep ^sheep hello.txt</td><td>在⽂件hello.txt中查找以sheep开头的内容</td></tr><tr><td>grep [0-9] hello.txt</td><td>选择hello.txt⽂件中所有包含数字的⾏</td></tr><tr><td>sed ‘s/s1/s2/g’ hello.txt</td><td>将hello.txt⽂件中的s1替换成s2</td></tr><tr><td>sed ‘/^$/d’ hello.txt</td><td>从hello.txt⽂件中删除所有空⽩⾏</td></tr><tr><td>sed ‘/ *#/d; /^$/d’ hello.txt</td><td>从hello.txt⽂件中删除所有注释和空⽩⾏</td></tr><tr><td>sed -e ‘1d’ hello.txt</td><td>从⽂件hello.txt 中排除第⼀⾏</td></tr><tr><td>sed -n ‘/s1/p’ hello.txt</td><td>查看只包含关键词”s1”的⾏</td></tr><tr><td>sed -e ‘s/ *$//‘ hello.txt</td><td>删除每⼀⾏最后的空⽩字符</td></tr><tr><td>sed -e ‘s/s1//g’ hello.txt</td><td>从⽂档中只删除词汇s1并保留剩余全部</td></tr><tr><td>sed -n ‘1,5p;5q’ hello.txt</td><td>查看从第⼀⾏到第5⾏内容</td></tr><tr><td>sed -n ‘5p;5q’ hello.txt</td><td>查看第5⾏</td></tr><tr><td>paste file1 file2</td><td>合并两个⽂件或两栏的内容</td></tr><tr><td>paste -d ‘+’ file1 file2</td><td>合并两个⽂件或两栏的内容，中间⽤”+”区分</td></tr><tr><td>sort file1 file2</td><td>排序两个⽂件的内容</td></tr><tr><td>comm -1 file1 file2</td><td>⽐较两个⽂件的内容(去除’file1’所含内容)</td></tr><tr><td>comm -2 file1 file2</td><td>⽐较两个⽂件的内容(去除’file2’所含内容</td></tr><tr><td>comm -3 file1 file2</td><td>⽐较两个⽂件的内容(去除两⽂件共有部分)</td></tr></tbody></table></div><h1 id="打包和解压"><a href="#打包和解压" class="headerlink" title="打包和解压"></a>打包和解压</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>zip xxx.zip file</td><td>压缩⾄zip包</td></tr><tr><td>zip -r xxx.zip file1 file2 dir1</td><td>将多个⽂件+⽬录压成zip包</td></tr><tr><td>unzip xxx.zip</td><td>解压zip包</td></tr><tr><td>tar -cvf xxx.tar file</td><td>创建⾮压缩tar包</td></tr><tr><td>tar -cvf xxx.tar file1 file2 dir1</td><td>将多个⽂件+⽬录打tar包</td></tr><tr><td>tar -tf xxx.tar</td><td>查看tar包的内容</td></tr><tr><td>tar -xvf xxx.tar</td><td>解压tar包</td></tr><tr><td>tar -xvf xxx.tar -C /dir</td><td>将tar包解压⾄指定⽬录</td></tr><tr><td>tar -cvfj xxx.tar.bz2 dir</td><td>创建bz2压缩包</td></tr><tr><td>tar -jxvf xxx.tar.bz2</td><td>解压bz2压缩包</td></tr><tr><td>tar -cvfz xxx.tar.gz dir</td><td>创建gzip压缩包</td></tr><tr><td>tar -zxvf xxx.tar.gz</td><td>解压gzip压缩包</td></tr><tr><td>bunzip2 xxx.bz2</td><td>解压bz2压缩包</td></tr><tr><td>bzip2 filename</td><td>压缩⽂件</td></tr><tr><td>gunzip xxx.gz</td><td>解压gzip压缩包</td></tr><tr><td>gzip filename</td><td>压缩⽂件</td></tr><tr><td>gzip -9 filename</td><td>最⼤程度压缩</td></tr></tbody></table></div><h1 id="RPM包管理命令"><a href="#RPM包管理命令" class="headerlink" title="RPM包管理命令"></a>RPM包管理命令</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>rpm -qa</td><td>查看已安装的rpm包</td></tr><tr><td>rpm -q pkg_name</td><td>查询某个rpm包</td></tr><tr><td>rpm -q —whatprovides xxx</td><td>显示xxx功能是由哪个包提供的</td></tr><tr><td>rpm -q —whatrequires xxx</td><td>显示xxx功能被哪个程序包依赖的</td></tr><tr><td>rpm -q —changelog xxx</td><td>显示xxx包的更改记录</td></tr><tr><td>rpm -qi pkg_name</td><td>查看⼀个包的详细信息</td></tr><tr><td>rpm -qd pkg_name</td><td>查询⼀个包所提供的⽂档</td></tr><tr><td>rpm -qc pkg_name</td><td>查看已安装rpm包提供的配置⽂件</td></tr><tr><td>rpm -ql pkg_name</td><td>查看⼀个包安装了哪些⽂件</td></tr><tr><td>rpm -qf filename</td><td>查看某个⽂件属于哪个包</td></tr><tr><td>rpm -qR pkg_name</td><td>查询包的依赖关系</td></tr><tr><td>rpm -ivh xxx.rpm</td><td>安装rpm包</td></tr><tr><td>rpm -ivh —test xxx.rpm</td><td>测试安装rpm包</td></tr><tr><td>rpm -ivh —nodeps xxx.rpm</td><td>安装rpm包时忽略依赖关系</td></tr><tr><td>rpm -e xxx</td><td>卸载程序包</td></tr><tr><td>rpm -Fvh pkg_name</td><td>升级确定已安装的rpm包</td></tr><tr><td>rpm -Uvh pkg_name</td><td>升级rpm包(若未安装则会安装)</td></tr><tr><td>rpm -V pkg_name</td><td>RPM包详细信息校验</td></tr></tbody></table></div><h1 id="YUM包管理命令"><a href="#YUM包管理命令" class="headerlink" title="YUM包管理命令"></a>YUM包管理命令</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>yum repolist enabled</td><td>显示可⽤的源仓库</td></tr><tr><td>yum search pkg_name</td><td>搜索软件包</td></tr><tr><td>yum install pkg_name</td><td>下载并安装软件包</td></tr><tr><td>yum install —downloadonly pkg_name</td><td>只 下 载 不 安 装</td></tr><tr><td>yum list</td><td>显示所有程序包</td></tr><tr><td>yum list installed</td><td>查看当前系统已安装包</td></tr><tr><td>yum list updates</td><td>查看可以更新的包列表</td></tr><tr><td>yum check-update</td><td>查看可升级的软件包</td></tr><tr><td>yum update</td><td>更新所有软件包</td></tr><tr><td>yum update pkg_name</td><td>升级指定软件包</td></tr><tr><td>yum deplist pkg_name</td><td>列出软件包依赖关系</td></tr><tr><td>yum remove pkg_name</td><td>删除软件包</td></tr><tr><td>yum clean all</td><td>清除缓存</td></tr><tr><td>yum clean packages</td><td>清除缓存的软件包</td></tr><tr><td>yum clean headers</td><td>清除缓存的header</td></tr></tbody></table></div><h1 id="DPKG包管理命令"><a href="#DPKG包管理命令" class="headerlink" title="DPKG包管理命令"></a>DPKG包管理命令</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>dpkg -c xxx.deb</td><td>列出deb包的内容</td></tr><tr><td>dpkg -i xxx.deb</td><td>安装/更新deb包</td></tr><tr><td>dpkg -r pkg_name</td><td>移除deb包</td></tr><tr><td>dpkg -P pkg_name</td><td>移除deb包(不保留配置)</td></tr><tr><td>dpkg -l</td><td>查看系统中已安装deb包</td></tr><tr><td>dpkg -l pkg_name</td><td>显示包的⼤致信息</td></tr><tr><td>dpkg -L pkg_name</td><td>查看deb包安装的⽂件</td></tr><tr><td>dpkg -s pkg_name</td><td>查看包的详细信息</td></tr><tr><td>dpkg –unpack xxx.deb</td><td>解开deb包的内容</td></tr></tbody></table></div><h1 id="APT软件⼯具"><a href="#APT软件⼯具" class="headerlink" title="APT软件⼯具"></a>APT软件⼯具</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>apt-cache search pkg_name</td><td>搜索程序包</td></tr><tr><td>apt-cache show pkg_name</td><td>获取包的概览信息</td></tr><tr><td>apt-get install pkg_name</td><td>安装/升级软件包</td></tr><tr><td>apt-get purge pkg_name</td><td>卸载软件（包括配置）</td></tr><tr><td>apt-get remove pkg_name</td><td>卸载软件（不包括配置）</td></tr><tr><td>apt-get update</td><td>更新包索引信息</td></tr><tr><td>apt-get upgrade</td><td>更新已安装软件包</td></tr><tr><td>apt-get clean</td><td>清理缓存</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">命令手册，备份一下以备不时之需</summary>
    
    
    
    <category term="Linux" scheme="https://www.happyshark.cn/categories/Linux/"/>
    
    
    <category term="技术" scheme="https://www.happyshark.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Linux" scheme="https://www.happyshark.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Win10/11 网络断连，无网络原因及解决方法</title>
    <link href="https://www.happyshark.cn/2021/10/16/Win1011%E7%BD%91%E7%BB%9C%E6%96%AD%E8%BF%9E%EF%BC%8C%E6%97%A0%E7%BD%91%E7%BB%9C%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://www.happyshark.cn/2021/10/16/Win1011%E7%BD%91%E7%BB%9C%E6%96%AD%E8%BF%9E%EF%BC%8C%E6%97%A0%E7%BD%91%E7%BB%9C%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2021-10-16T04:00:00.000Z</published>
    <updated>2021-10-16T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>win10 更新之后经常会出现已经连接wifi但提示无网络的情况，搜了下b站上有up主提供了方法，修改注册表即可修复</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>在Win10 18362版以后的版本，微软在连接网络后，注册表的返回值发生了改变，之前是每当连网后，系统会自动向微软的dns.msftncsi.com发出请求，然后返回一个NCSI.txt的值，这一值如果正确时，则确认为已连网。而Win10 18362版本之后，这个返回服务器和值有了新变化并反映为6个注册表项中。这些变化因国内部分运行商的网络重定向，不能得到正确的反馈，因此出现实际能上网确显示为无internet的问题。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ol><li><p>新建一个txt文档</p></li><li><p>写入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\NlaSvc\Parameters\Internet]</span><br><span class="line">ActiveDnsProbeContent=131.107.255.255</span><br><span class="line">ActiveDnsProbeContentV6=fd3e:4f5a:5b81::1</span><br><span class="line">ActiveDnsProbeHost=dns.msftncsi.com</span><br><span class="line">ActiveDnsProbeHostV6=dns.msftncsi.com</span><br><span class="line">ActiveWebProbeContent=Microsoft NCSI</span><br><span class="line">ActiveWebProbeContentV6=Microsoft NCSI         </span><br><span class="line">ActiveWebProbeHost=www.msftncsi.com                  </span><br><span class="line">ActiveWebProbeHostV6=ipv6.msftncsi.com</span><br><span class="line">ActiveWebProbePath=ncsi.txt</span><br><span class="line">ActiveWebProbePathV6=ncsi.txt</span><br><span class="line">EnableActiveProbing=dword:00000001</span><br><span class="line">PassivePollPeriod=dword:0000000f</span><br><span class="line">StaleThreshold=dword:0000001e</span><br><span class="line">WebTimeout=dword:00000023</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\NlaSvc\Parameters\Internet\ManualProxies] </span><br></pre></td></tr></table></figure></li><li><p>保存，重命名后缀为.reg</p></li><li><p>运行即可</p></li></ol><blockquote><p>不放心的话可以备份注册表：</p><ol><li>win+R输regedit打开注册表编辑器</li><li>找到路径HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\NlaSvc\Parameters\Internet </li><li>导出</li></ol></blockquote><h1 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h1><p><a href="https://www.bilibili.com/video/BV1v44y1x7zM?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1v44y1x7zM?spm_id_from=333.999.0.0</a></p><p><a href="https://www.zhihu.com/question/268072972/answer/2165203375">https://www.zhihu.com/question/268072972/answer/2165203375</a></p>]]></content>
    
    
    <summary type="html">win10 更新之后经常会出现已经连接wifi但提示无网络的情况，搜了下b站上有up主提供了方法，修改注册表即可修复</summary>
    
    
    
    <category term="技术" scheme="https://www.happyshark.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="网络" scheme="https://www.happyshark.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="技术" scheme="https://www.happyshark.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>常见经典算法AND背包问题</title>
    <link href="https://www.happyshark.cn/2021/10/15/%E5%B8%B8%E8%A7%81%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95AND%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://www.happyshark.cn/2021/10/15/%E5%B8%B8%E8%A7%81%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95AND%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2021-10-15T13:00:00.000Z</published>
    <updated>2021-10-15T13:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见经典算法策略的特点、区别与联系"><a href="#常见经典算法策略的特点、区别与联系" class="headerlink" title="常见经典算法策略的特点、区别与联系"></a>常见经典算法策略的特点、区别与联系</h1><h2 id="分治算法："><a href="#分治算法：" class="headerlink" title="分治算法："></a>分治算法：</h2><p>​    分治法的设计思想是：将一个难以解决的大问题分解为多个规模较小的子问题，以便分而治之。如果原问题可以分为k个子问题，其中国内1&lt;k&lt;=n,且这k个子问题都可解，并可利用子问题计算出原问题的解，则可以选择分治法解决该问题。</p><p>​    分治算法的特点：通过分治方法设计出的程序一般都递归算法，故分治法的计算效率可以用递归方程进行分析。但是分治与递归也有区别，分治是将原问题转换为若干个相似的小问题去解，而递归则是将原问题层层转化为一个与原问题相似的小问题然后再去求解。</p><h2 id="贪心算法："><a href="#贪心算法：" class="headerlink" title="贪心算法："></a>贪心算法：</h2><p>贪心算法指在求解问题的时候总是做出在当前情况下的最好的选择，不会考虑整体最优解，即只寻找局部最优解。不同的贪心策略会得到差异非常大的结果，如果希望对该问题使用贪心策略，则待求解的问题中的字问题需要具备无后效性——即某个状态以前的过程不会影响以后的状态，只与当前的状态有关。</p><p>贪心算法的特点：最优子结构性质和贪心选择性质。贪心选择性质指需要求解的问题的整体最优解可通过一系列局部最优解的选择来实现。对于每一个具体的问题，必须证明每一步所做的贪心选择最后都会达成一个全局最优解。最优子结构是指一个问题的最优解包含其子问题的最优解性质。</p><p>贪心算法与动态规划算法的区别和联系：贪心算法和动态规划算法都具有最优子结构的性质。但是动态规划算法中，每一步所做出的选择要依赖相关子问题的解，因此只有在求出相关子问题的解后才能做出选择。而贪心算法则不依赖全局解，仅仅依靠过去所做出的选择而不依赖将来所做出的选择，也不依赖子问题的解，即只选择局部最优解。</p><h2 id="动态规划算法："><a href="#动态规划算法：" class="headerlink" title="动态规划算法："></a>动态规划算法：</h2><p>动态规划算法的基本思想是将需要求解的问题划分为若干个子问题，先求解子问题，然后从这些子问题的解中得到原问题的解。动态规划算法通常用于求解具有某种最优子结构性质的问题。在这类问题中，可能会有许多可行的解，但是期望找到具有最优值的解。基于动态规划法的算法设计通常按一下四个步骤进行：</p><ol><li><p>找出最优解的性质，并描述其结构特征。</p></li><li><p>递归定义最优值。</p></li><li><p>自底向上的方式计算最优质。</p></li><li><p>根据计算最优值时得到的信息构造一个最优解。</p></li></ol><p>通常，在步骤3中计算最优值时，需要记录更多的信息，以便在步骤4中快速构造出一个最优解。</p><p>动态规划算法的特点：动态规划算法一般具有最优子结构，重叠子问题两个性质。设计动态规划算法的第一步是分析最优结构，当带求解的问题中包含了其子问题的最优解时，就可以定义该问题具有最优子结构性质。而可以用动态规划方法求解的问题，应具有重叠子问题的性质。在用递归算法自顶向下尝试解决此类问题时，每次产生的问题并不一定是新问题，有些子问题会被反复计算多次从而造成计算资源的浪费。而动态规划算法通过利用这种子问题的重叠性，对每个子问题只求一次解，并将结果保存在一个表中，当再次需要解相同的问题时只需要从表中调出数据即可。</p><p>动态规划算法与分治算法的区别与联系：动态规划酸粉与分治法类似，基本思想都是将带求解的问题分解成很多子问题，先求子问题然后从这些子问题中得到原问题的解。与分治法不同的地方在于使用动态规划求解的问题其子问题不是相互独立的，而使用分治法求解的问题其子问题相互独立，若使用分治法去求解子问题不相互独立的问题，则分解得到的子问题数量太大从而使得计算时间大大增加。另外使用分治法求解问题的时候有些子问题会被重复计算，而使用动态规划法去求解的时候每个子问题只需要计算一次。</p><h2 id="回溯算法："><a href="#回溯算法：" class="headerlink" title="回溯算法："></a>回溯算法：</h2><p>回溯算法是搜索算法的一种，它在包含问题所有解的空间树中，按照深度优先的策略从root节点出发去搜索整个空间树。这种算法搜索到解空间的任意一个节点时，会首先判断该节点是否不包含问题的解，如果不包含则跳过以该节点为根的子树，逐层向其祖先节点回溯；否则进入该子树并继续按深度优先遍历进行搜索。</p><p>回溯法的特点：回溯法在求解的过程中需要回溯到树根，并且在搜索树中所有节点后才结束。而用回溯法搜索问题的任意一个解时，只需要搜到其中一个问题的解即可结束。</p><h2 id="分支界限法"><a href="#分支界限法" class="headerlink" title="分支界限法"></a>分支界限法</h2><p>分支界限法是一种在问题的解空间树T上搜索问题解的算法，其特点是：在扩展节点出，首先生成器所有孩子节点，然后在从当前活动节点表中选择下一个扩展节点。为了有效的计算下一个活节点，加快搜索速度，就在每一个活节点处计算一个函数值，并根据已计算出的函数值从当前活节点表中选择一个最有利的节点作为扩展节点，使搜索朝着解空间中具有最优解的分支推进，以便尽快找出一个最优解。</p><p>分支界限法与回溯法的区别与联系：二者类似，一般而言分支界限法与回溯法的求解目标不同：分支界限法的求解目标是找出解空间树T中满足约束条件的一个解，或者在满足约束条件的解中找一个使得目标函数极大活着极小的解，即某种意义下的最优解。而回溯法则是找出T中满足约束条件的所有解。由于解题目标不同，导致分支界限法和回溯法的搜索方式也不同，回溯法以深度优先的方式搜索T，而分支界限法以广度优先或最小耗费有限的方式搜索T。</p><h1 id="参考取数问题的算法框架，写出0-1背包问题的3种算法，并写出找出最优解的算法"><a href="#参考取数问题的算法框架，写出0-1背包问题的3种算法，并写出找出最优解的算法" class="headerlink" title="参考取数问题的算法框架，写出0-1背包问题的3种算法，并写出找出最优解的算法"></a>参考取数问题的算法框架，写出0-1背包问题的3种算法，并写出找出最优解的算法</h1><p>定义一下0-1背包问题中的变量：给定n个物品和一个背包，物品i的重量是wi，其价值为vi，背包容量为c。</p><h2 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h2><h3 id="算法策略"><a href="#算法策略" class="headerlink" title="算法策略"></a>算法策略</h3><p>与贪心算法不同的是，动态规划算法需要比较选择该物品和不选择该物品所导致的最终结果，然后在做出最佳选择。如果放入第i个东西后可以取得最大价值，则前i-1个物品也取到了最大价值，重量为w-w[i]。定义dp[i][j]为放入第i个物品后可以取得最大价值，则其状态转移方程为：dp[i][j] = max(dp[i-1][j], dp[i-1][j-v[i]] +price[i])。</p><h3 id="核心算法："><a href="#核心算法：" class="headerlink" title="核心算法："></a>核心算法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Dongtaiguihua</span>(<span class="params">w,n,</span>):</span></span><br><span class="line">    listWV = [[<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">    listTemp = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        listTemp = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))  </span><br><span class="line">        listWV.append(listTemp) </span><br><span class="line"></span><br><span class="line">    value = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(w+<span class="number">1</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, w+<span class="number">1</span>):</span><br><span class="line">        <span class="comment">#若物品不能放到背包中</span></span><br><span class="line">            <span class="keyword">if</span> j &lt; listWV[i][<span class="number">0</span>]:</span><br><span class="line">           <span class="comment">#价值与之前相同    </span></span><br><span class="line">                value[i][j] = value[i-<span class="number">1</span>][j] </span><br><span class="line">            <span class="keyword">else</span>:   </span><br><span class="line">            <span class="comment">#物品可以放到背包中，最大价值在两者之中取</span></span><br><span class="line">                value[i][j] = <span class="built_in">max</span>(value[i-<span class="number">1</span>][j], value[i-<span class="number">1</span>][j-listWV[i][<span class="number">0</span>]] + listWV[i][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><h3 id="算法策略-1"><a href="#算法策略-1" class="headerlink" title="算法策略"></a>算法策略</h3><p>使用回溯法求解时，如果用wCur和vCur分别表示当前正在搜索的部分解中装入背包物体的总重量和总价值，用vBest表示当前正在搜索部分解的最大价值，则基本思路如下：</p><ol><li>把物体按单位价值降序排列</li><li>wCur vCur vBest初始化</li><li>对于有n种可选物品的0/1背包问题，其解空间由长度为n的0-1向量组成,可用子集数表示。在搜索解空间树时，只要其左儿子结点是一个可行结点，搜索就进入左子树。当右子树中有可能包含最优解时就进入右子树搜索。</li></ol><h3 id="核心算法：-1"><a href="#核心算法：-1" class="headerlink" title="核心算法："></a>核心算法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">vbest：最大价值</span></span><br><span class="line"><span class="string">vCur：背包价值</span></span><br><span class="line"><span class="string">wCur：背包重量</span></span><br><span class="line"><span class="string">x：list型，标记是否路径中是否包含了该节点</span></span><br><span class="line"><span class="string">v:list型，存放所有物品的价值</span></span><br><span class="line"><span class="string">w:list型，存放所有物品的重量</span></span><br><span class="line"><span class="string">n：物品数量</span></span><br><span class="line"><span class="string">c：背包容量</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Huisu</span>(<span class="params">vbest,vCur,wCur,x,w,v,n,c</span>):</span></span><br><span class="line">    <span class="keyword">if</span> i&gt;= n <span class="keyword">and</span> vbest&lt;vCur:</span><br><span class="line">        vbest = vCur</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> wCur+w[i]&lt;=c:</span><br><span class="line">            x[i]=<span class="number">1</span></span><br><span class="line">            wCur += w[i]</span><br><span class="line">            vCur += v[i]</span><br><span class="line">            <span class="comment"># 下一个</span></span><br><span class="line">            Huisu(i+<span class="number">1</span>)</span><br><span class="line">            wCur -= w[i]</span><br><span class="line">            vCur -= v[i]</span><br><span class="line">        x[i]=<span class="number">0</span></span><br><span class="line">        <span class="comment"># 下一个</span></span><br><span class="line">        Huisu(i+<span class="number">1</span>)</span><br><span class="line"><span class="comment"># vbest中存放了最优解</span></span><br><span class="line">    <span class="keyword">return</span> vbest</span><br></pre></td></tr></table></figure><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><blockquote><p>理论上贪心算法只能够求解背包问题，没法求解0-1背包问题，但是本来应该作为第三种算法的分支界限算法跑到最后一问去了，还找不到其他算法就把贪心算法放这强行充3个挽尊了orz</p></blockquote><h3 id="算法策略-2"><a href="#算法策略-2" class="headerlink" title="算法策略"></a>算法策略</h3><p>使用贪心选择求解0-1背包问题本质上还是计算单位重量价值最高的物品装到包里，但是与背包问题不同的地方在于这里没有办法对物品进行拆分，即在选择装入背包的物品时对每种物品i只有两个选择——装或者不装。不能将物品i装入背包多次，也不能只装入部分物品i，故使用该策略计算0-1背包问题的时候会存在背包装不满的情况，这符合贪心策略的最优解，即局部最优解；但是不符合整体最优解。</p><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><ol><li>计算出每种物品的单位重量价值vi/wi</li><li>依贪心选择策略，将尽可能多的单位重量价值最高的物品（设其重量为wi）装进去</li><li>将物品全部装完之后，背包内总重量未超过c则按单位价值排序选择重量不超过c-wi的下一个物品全部装进去。</li><li>依此策略一直进行下去，一直到背包装满或者剩余空间不够装剩下的物品。</li></ol><h3 id="核心算法"><a href="#核心算法" class="headerlink" title="核心算法"></a>核心算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Listv:list型，存放所有物品的价值</span></span><br><span class="line"><span class="comment"># Listw:list型，存放所有物品的重量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Tanxin</span>(<span class="params">n,C,Listv,Listw</span>):</span></span><br><span class="line"><span class="comment"># 计算单位价值并排序</span></span><br><span class="line">value = [(x,Listv[x] / Listw[x], Listv[x], Listw[x]) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n)]</span><br><span class="line">value.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始放往包里放东西</span></span><br><span class="line">maxvalue = <span class="number">0</span></span><br><span class="line">Listx = []</span><br><span class="line"><span class="keyword">for</span> x,xi,vi,wi <span class="keyword">in</span> value:</span><br><span class="line">    <span class="comment"># 如果能放的下就全放进去</span></span><br><span class="line">    <span class="keyword">if</span> vi &lt;= C:</span><br><span class="line">        C -= wi</span><br><span class="line">        maxvalue += vi</span><br><span class="line">        Listx.append(x)</span><br><span class="line"><span class="comment"># Listx中存放的是放进包的物品，maxvalue是使用贪心算法时包内物品的总价值</span></span><br><span class="line"><span class="keyword">return</span> Listx, maxvalue</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>算法Tanxin的主要计算时间在于将各种物品依其单位重量的价值从大到小排序。因此，算法的计算时间上界为O（nlogn）。</p><h1 id="写出0-1背包问题的分支界限算法"><a href="#写出0-1背包问题的分支界限算法" class="headerlink" title="写出0-1背包问题的分支界限算法"></a>写出0-1背包问题的分支界限算法</h1><h2 id="算法策略-3"><a href="#算法策略-3" class="headerlink" title="算法策略"></a>算法策略</h2><p>采用优先队列方式，按照物品的单位价值从大到小进行优先级排序，使用大根堆结构存储物品数据。构造上界函数maxbound( )计算当前结点下的价值上界，如果当前结点下的价值上界比当前的最优值大，则将当前结点加入堆中，否则剪去该节点下的所有路径(即剪去子集树的枝)，直到堆中所有结点均被弹出。基本步骤如下：</p><ol><li><p>把物体按单位价值降序排列</p></li><li><p>节点的优先级由已装的物品价值加上剩下的最大单位重量价值的物品装满剩余容量的价值和</p></li><li><p>算法首先检查当前扩展结点的左子树结点，若满足约束条件则加入优先队列中</p></li><li><p>检查右子树结点，若满足约束条件则加入优先队列中</p></li></ol><h2 id="算法代码"><a href="#算法代码" class="headerlink" title="算法代码"></a>算法代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fenzhijiexian</span>(<span class="params">vw, limit</span>):</span></span><br><span class="line"><span class="comment"># 上界函数：计算当前结点下的价值上界</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bound</span>(<span class="params">v, w, j</span>):</span></span><br><span class="line">        <span class="keyword">if</span> j &gt;= <span class="built_in">len</span>(vw) <span class="keyword">or</span> w &gt; limit:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(vw) <span class="keyword">and</span> w + vw[j][<span class="number">1</span>] &lt;= limit:</span><br><span class="line">                v, w, j = v + vw[j][<span class="number">0</span>], w + vw[j][<span class="number">1</span>], j + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j &lt; <span class="built_in">len</span>(vw):</span><br><span class="line">                v += (limit - w) * vw[j][<span class="number">0</span>] / (vw[j][<span class="number">1</span>] * <span class="number">1.0</span>)</span><br><span class="line">            <span class="keyword">return</span> v</span><br><span class="line">    <span class="comment"># 分支限界算法求解01背包</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse</span>(<span class="params">v, w, j</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> maxValue</span><br><span class="line">        <span class="keyword">if</span> bound(v, w, j) &gt;= maxValue: <span class="comment"># promising </span></span><br><span class="line">            <span class="keyword">if</span> w + vw[j][<span class="number">1</span>] &lt;= limit:  <span class="comment"># w/ j</span></span><br><span class="line">                maxValue = <span class="built_in">max</span>(maxValue, v + vw[j][<span class="number">0</span>])</span><br><span class="line">                traverse(v + vw[j][<span class="number">0</span>], w + vw[j][<span class="number">1</span>], j + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> j &lt; <span class="built_in">len</span>(vw) - <span class="number">1</span>:        <span class="comment"># w/o j</span></span><br><span class="line">                traverse(v, w, j + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    maxValue = <span class="number">0</span></span><br><span class="line">    traverse(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> maxValue</span><br></pre></td></tr></table></figure><p>先对 vw 按照单位重量的价值排序，然后利用 bound 函数确定价值上限。如果价值上限超过了已经出现的最大价值，再分别计算加上当前物品和不加当前物品的两种情况，否则就跳过。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><blockquote><p><a href="https://blog.csdn.net/qq_42939527/article/details/104043900">https://blog.csdn.net/qq_42939527/article/details/104043900</a></p><p><a href="https://blog.csdn.net/yue_luo_/article/details/95097844">https://blog.csdn.net/yue_luo_/article/details/95097844</a></p><p><a href="https://www.cnblogs.com/chenleideblog/p/11254578.html">https://www.cnblogs.com/chenleideblog/p/11254578.html</a></p><p><a href="https://blog.csdn.net/weixin_42260102/article/details/96008327">https://blog.csdn.net/weixin_42260102/article/details/96008327</a></p><p><a href="https://www.jlao.net/technology/10188/">https://www.jlao.net/technology/10188/</a></p><p>王红珍,李竹林,延飞波.基于0-1背包问题的两种算法[J].信息技术,2011,35(02):27-29.</p><p>荣政主编. 数据结构与算法分析. 西安：西安电子科技大学出版社, 2012.02.</p></blockquote>]]></content>
    
    
    <summary type="html">记录一下常见的算法，以后忘记了就复习一下</summary>
    
    
    
    <category term="算法设计" scheme="https://www.happyshark.cn/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="算法" scheme="https://www.happyshark.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>安全规约第一讲</title>
    <link href="https://www.happyshark.cn/2021/10/12/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/"/>
    <id>https://www.happyshark.cn/2021/10/12/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/</id>
    <published>2021-10-12T04:00:00.000Z</published>
    <updated>2021-10-12T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>安全规约课程笔记，整理一下以备以后查询使用，如果有错误欢迎留言讨论</p><p>本文的内容和图片均来自b站的郭福春老师的安全规约课程：<a href="https://space.bilibili.com/2095536965">https://space.bilibili.com/2095536965</a></p><h1 id="密码发展史"><a href="#密码发展史" class="headerlink" title="密码发展史"></a>密码发展史</h1><ul><li><p>经典密码：古罗马</p></li><li><p>近代密码：二战</p></li><li><p>现代密码（科学）：70年代以后</p></li></ul><p>模型：计算模型，安全模型</p><h1 id="概念澄清："><a href="#概念澄清：" class="headerlink" title="概念澄清："></a>概念澄清：</h1><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012123908460.png" alt="image-20211012123908460"></p><ul><li><p>Cryptography：对称密码，工要密码，等等，是一种方法来达到一种目标（security）</p></li><li><p>Cryptanalysis：已有Cryptography的分析。比如分析一些公钥密码，提出一些攻击方案.etc</p></li><li><p>Cryptosystem：提出一种具体的security studys</p></li><li><p>Scheme：实现cryptosystem的一种方案</p></li></ul><p>四者关系如下：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012123920826.png" alt="image-20211012123920826"></p><h1 id="如何定义一个算法"><a href="#如何定义一个算法" class="headerlink" title="如何定义一个算法"></a>如何定义一个算法</h1><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012123942284.png" alt="image-20211012123942284"></p><p>当现有方案无法解决需求的时候，就必须要提出一种新的算法来满足需求</p><h2 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h2><ol><li><p>确定一个完整的安全目标</p></li><li><p>确定涉及到几个参与方</p></li><li><p>需要确定至少需要几个算法（当然越少越好，但也不可能无限制优化）Ex：签名，有一个签名算法必然有一个对应的验证算法。</p></li><li><p>每个算法的名字该如何命名（类似编程中的函数名）</p></li><li><p>每个算法应该由2中的谁运行（为了给审稿人理清思路hhh）</p></li><li><p>每个算法的输入输出是啥</p></li><li><p>算法的正确性（下回分解）</p></li></ol><h2 id="举个例子：定义一个数字签名的算法"><a href="#举个例子：定义一个数字签名的算法" class="headerlink" title="举个例子：定义一个数字签名的算法"></a>举个例子：定义一个数字签名的算法</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012123959709.png" alt="image-20211012123959709"></p><p>上面就是一个讲故事的方式（只有讲故事的时候才Alice，bob，正式的描述算法的时候要精确一些，比如服务器，路由器，云，AS等，这种场景下使用ABC审稿人会锤爆你的狗头#滑稽），在这个过程中：</p><ul><li><p>参与方：signer，verifier</p></li><li><p>有几个算法：看涉及到几个计算，一个计算对应一个算法。故有3个计算（算法）+ 1个系统参数（system parameter generation）</p></li><li><p>给算法取名：SysGen，KeyGen，Sign，Verify</p></li></ul><blockquote><p>注：取名的要求</p><ol><li><p>美观</p></li><li><p>简洁</p></li><li><p>易懂</p></li></ol><p>Ex：KeyGen（完美），KeyGeneration（太长），Key_Gen（少用下划线），Key Gen（不要用空格），i（审稿人提刀在路上了）</p></blockquote><ul><li>每个算法由谁运行：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124014972.png" alt="image-20211012124014972"></p><ul><li>抽象化：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124020329.png" alt="image-20211012124020329"></p><blockquote><ol><li><p>箭头和等号是有区别的，谨慎使用</p></li><li><p>输入和输出的符号有一般的约定，不要乱用</p></li><li><p>就算抄，也要改几个符号，简简单单的修改</p></li></ol></blockquote><ul><li>正确性：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124027422.png" alt="image-20211012124027422"></p><h1 id="如何定义一个安全模型（第29期）"><a href="#如何定义一个安全模型（第29期）" class="headerlink" title="如何定义一个安全模型（第29期）"></a>如何定义一个安全模型（第29期）</h1><h2 id="如何分析一个方案的安全性"><a href="#如何分析一个方案的安全性" class="headerlink" title="如何分析一个方案的安全性"></a>如何分析一个方案的安全性</h2><p>可以从以下几个方面考虑：</p><ol><li><p>如何分析一个scheme的安全性</p></li><li><p>一个scheme（在安全模型下是安全的）可以抵抗所有（any）攻击吗？</p></li></ol><p>安全模型是为了提出一个方案而定义的吗</p><ol><li>安全模型是为了提出一个方案而定义的吗</li></ol><h2 id="什么是安全模型？"><a href="#什么是安全模型？" class="headerlink" title="什么是安全模型？"></a>什么是安全模型？</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124045272.png" alt="image-20211012124045272"></p><ul><li><p>一个安全模型可以当成一个集合，攻击类型可以看成一个一个点。一个集合无法包含所有的点，即一个安全模型无法包含所有的攻击</p></li><li><p>抽象攻击：侧重介绍敌手可以获取什么信息以及如何获取这些信息。</p></li><li><p>安全模型是为了cryptosystem定义而不是为了某一个具体scheme定义</p></li></ul><blockquote><p>比如有个cryptosystem；里面有个scheme用到了hash函数，那你定义安全模型的时候就不能用hash函数，因为一个cryptosystem不一定用到hash函数，如果你定义了hash函数就意味着所有的cryptosystem都用到了hash函数</p></blockquote><h2 id="定义安全模型的方法"><a href="#定义安全模型的方法" class="headerlink" title="定义安全模型的方法"></a>定义安全模型的方法</h2><ul><li><p>game，下面用的这个种</p></li><li><p>伪代码（对新手不友好）</p></li></ul><p>Game方法：通过一种game的方式（adversary vs challenger）来描述</p><ul><li><p>challenger：crypsystem的拥有者，产生公私钥</p></li><li><p>adversary：尝试break这个cryptsystem（而不是scheme）</p></li></ul><blockquote><p>显而易见，二者存在信息差</p></blockquote><p>则一个安全模型定义了：</p><p>adversary能力：</p><ul><li><p>what：他可以查询什么信息</p></li><li><p>when：他什么时候可以查询这些信息</p></li></ul><p>adversary的安全目标：</p><ul><li>how：如何赢得这场game（break the cryptsystem）</li></ul><p>定义安全模型的四步：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124056662.png" alt="image-20211012124056662"></p><ol><li>setup：初始化定义双方</li></ol><p>2.capabilities：描述什么时间敌手会以什么方式获取信息（query），并且challenger要诚实的回应（response）</p><blockquote><p>当然要诚实的回答，这个问题类似减法的时候高位不给低位借咋整（锤爆高位的狗头#滑稽）</p></blockquote><p>3.安全目标：定义一个敌手赢得游戏的目标</p><p>4.优势（advantage）：定义一个满足条件的参数（parameter）</p><p>Ex：对于一个签名方案，定义一个安全模型</p><p><img src="C:/Users/happy/Desktop/%25E6%259C%2589%25E9%2581%2593%25E4%25BA%2591%25E7%25AC%2594%25E8%25AE%25B0%25E5%25AF%25BC%25E5%2587%25BA/youdaonote-pull-master/youdaonote/youdaonote-images/WEBRESOURCE2838a5247c371604f5504a3ace992c58.png" alt=""></p><blockquote><ol><li><p>并不是所有的放哪都有Advantage</p></li><li><p>有些行为必须被禁止，比如问问challenger的私钥是啥</p></li></ol></blockquote><h2 id="什么时候该定义一个安全模型"><a href="#什么时候该定义一个安全模型" class="headerlink" title="什么时候该定义一个安全模型"></a>什么时候该定义一个安全模型</h2><p>当我们需要考虑一个算法的输入和输出的是时候就可以定义一个安全模型。</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124118557.png" alt="image-20211012124118557"></p><p>需要确定哪些需要考虑，哪些不需要，并且抽象化</p><blockquote><p>比如确认参与方应该问啥</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124128683.png" alt="image-20211012124128683"></p><h1 id="形式化描述一个安全模型（可以借鉴，不能copy）"><a href="#形式化描述一个安全模型（可以借鉴，不能copy）" class="headerlink" title="形式化描述一个安全模型（可以借鉴，不能copy）"></a>形式化描述一个安全模型（可以借鉴，不能copy）</h1><p>Ex：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124135249.png" alt="image-20211012124135249"></p><h1 id="安全模型定义的一些注释（听不清了，变身截图狂魔）"><a href="#安全模型定义的一些注释（听不清了，变身截图狂魔）" class="headerlink" title="安全模型定义的一些注释（听不清了，变身截图狂魔）"></a>安全模型定义的一些注释（听不清了，变身截图狂魔）</h1><ul><li>一个Cryptosystem可能有多个sercuity service</li></ul><blockquote><p>比如Alice给bob发消息，会对其加密并且签名，故这里alice提供了两个服务，签名和加密。</p></blockquote><ul><li>一个sercuity service 需要一个security model 去定义</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124147481.png" alt="image-20211012124147481"></p><ul><li>一个安全模型可以对应多个sercuity service</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124153964.png" alt="image-20211012124153964"></p><blockquote><p>standard model是一种计算模型</p><p>standard security model 是一种安全模型</p></blockquote><ul><li><p>标准的安全模型不一定是最强的，没有对比的话很难区分standard &amp; strong</p></li><li><p>标准/强/弱的区别在证明的时候区别是很大的</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124203183.png" alt="image-20211012124203183"></p><blockquote><p>19期文章有更加详细的解释</p></blockquote><ul><li><p>没有安全模型，就无法把攻破方案抽象成解决一个计算问题</p></li><li><p>无法把攻破方案抽象成解决一个计算问题，就没法定义一个安全模型</p></li></ul><h1 id="一些例子和练习"><a href="#一些例子和练习" class="headerlink" title="一些例子和练习"></a>一些例子和练习</h1><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124335581.png" alt="image-20211012124335581"></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124342656.png" alt="image-20211012124342656"></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124349493.png" alt="image-20211012124349493"></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124358144.png" alt="image-20211012124358144"></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124405842.png" alt="image-20211012124405842"></p><ul><li>以上的定义和解释可以从一些论文和公开资料中获得</li></ul><blockquote><p>密码学报 2019 第六期的文章也有一些资料可以查看</p></blockquote>]]></content>
    
    
    <summary type="html">安全规约课程笔记，整理一下以备以后查询使用，如果有错误欢迎留言讨论</summary>
    
    
    
    <category term="安全规约" scheme="https://www.happyshark.cn/categories/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6/"/>
    
    
    <category term="安全规约" scheme="https://www.happyshark.cn/tags/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
</feed>
