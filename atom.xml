<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Happy Shark</title>
  
  <subtitle>Happyshark&amp;Kevin</subtitle>
  <link href="https://www.happyshark.cn/atom.xml" rel="self"/>
  
  <link href="https://www.happyshark.cn/"/>
  <updated>2021-09-12T17:13:37.528Z</updated>
  <id>https://www.happyshark.cn/</id>
  
  <author>
    <name>HPShark</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>v2ray搭建+Cloudflare Workers反向代理</title>
    <link href="https://www.happyshark.cn/2021/09/13/%E4%BD%BF%E7%94%A8Cloudflare%20Workers%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>https://www.happyshark.cn/2021/09/13/%E4%BD%BF%E7%94%A8Cloudflare%20Workers%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</id>
    <published>2021-09-13T06:00:00.000Z</published>
    <updated>2021-09-12T17:13:37.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="v2ray搭建-Cloudflare-Workers反向代理"><a href="#v2ray搭建-Cloudflare-Workers反向代理" class="headerlink" title="v2ray搭建+Cloudflare Workers反向代理"></a>v2ray搭建+Cloudflare Workers反向代理</h1><h2 id="v2ray搭建"><a href="#v2ray搭建" class="headerlink" title="v2ray搭建"></a>v2ray搭建</h2><p>使用 root 用户输入下面命令安装或卸载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure><blockquote><p>如果提示 curl: command not found ，那是因为你的 VPS 没装 Curl<br>ubuntu/debian 系统安装 Curl 方法: <code>apt-get update -y &amp;&amp; apt-get install curl -y</code><br>centos 系统安装 Curl 方法: <code>yum update -y &amp;&amp; yum install curl -y</code><br>安装好 curl 之后就能安装脚本了</p></blockquote><p>备注：安装完成后，输入 <code>v2ray</code> 即可管理 V2Ray</p><p><strong>注意</strong>：</p><ul><li>选择wb+tls协议</li><li>反代地址：<a href="https://hitokoto.cn">https://hitokoto.cn</a></li><li>域名：cooljohnboom.xyz</li><li>ip地址：65.49.218.221</li></ul><h2 id="安装锐速"><a href="#安装锐速" class="headerlink" title="安装锐速"></a>安装锐速</h2><p><strong>支持系统：</strong><code>Centos 6+</code>/<code>Debian 7+</code>/<code>Ubuntu 14+</code>，<code>BBR</code>魔改版不支持<code>Debian 8</code>。<br><strong>注意：</strong>该脚本在<code>Vultr</code>各个系统均测试通过，如果期间有出现任何问题，可向原作者反映帮助改善。<br>运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/dlxg/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><p>激活</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget --no-check-certificate -qO-  https://git.io/lotServerInstall.sh) install</span><br></pre></td></tr></table></figure><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>使用脚本后会出现如下选项：<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/v2ray+cf%E5%8F%8D%E4%BB%A3/Snipaste_2020-04-23_00-42-15.png" alt="img"></p><p>根据自己需求操作，重启后再使用<code>./tcp.sh</code>命令接着操作。</p><p>脚本会自动检测安装的情况，请注意脚本菜单下的状态检测即可。</p><p>如果在删除内核环节出现这样一张图，注意选择<code>NO</code>，然后根据提示重启系统。</p><p><a href="https://camo.githubusercontent.com/b047b125b25b3c5d441394e1d891691a209b8dbc/68747470733a2f2f7777772e6d6f65726174732e636f6d2f7573722f706963747572652f7169616e79696e676262722832292e706e67"><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/v2ray+cf%E5%8F%8D%E4%BB%A3/68747470733a2f2f7777772e6d6f65726174732e636f6d2f7573722f706963747572652f7169616e79696e676262722832292e706e67" alt="img"></a></p><h2 id="使用Cloudflare-Workers反向代理"><a href="#使用Cloudflare-Workers反向代理" class="headerlink" title="使用Cloudflare Workers反向代理"></a>使用Cloudflare Workers反向代理</h2><p>要使用 Cloud­flare 加速梯子，首先梯子必须是用 web­socket 作为传输方式的，比如 v2ray 的 web­socket，gost 的 web­socket 隧道，SS 的 v2-plu­gin 等等，关于这些东西的搭建教程有很多，我就不赘述了，只讲如何使用 Cloud­flare，并自选 ip 来达到最好的加速效果，你所需要的只是一个域名</p><p>先创建一个 Cloud­flare 账号，然后在主页面右下角点击 Work­ers，进入创建一个 Worker</p><p><a href="https://maofun.com/wp-content/uploads/2020/11/20201123233753-2eea3.png"><img src="https://maofun.com/wp-content/uploads/2020/11/20201123233753-2eea3.png" alt="img"></a></p><p>接着在编辑区域粘贴以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(</span><br><span class="line">    <span class="string">&quot;fetch&quot;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> url = <span class="keyword">new</span> URL(event.request.url);</span><br><span class="line">        url.hostname = <span class="string">&quot;your.domain&quot;</span>;</span><br><span class="line">        url.protocol = <span class="string">&quot;protocol&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> request = <span class="keyword">new</span> Request(url, event.request);</span><br><span class="line">        event.respondWith(</span><br><span class="line">            fetch(request)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>将 <code>your.domain</code> 改成你的域名，<code>protocol</code> 如果后端使用 https 就写 https，http 就写 http，如下图所示</p><p><a href="https://maofun.com/wp-content/uploads/2020/11/20201123233753-6b726.png"><img src="https://maofun.com/wp-content/uploads/2020/11/20201123233753-6b726.png" alt="img"></a></p><p>然后在左上角自定义你的子域</p><p><a href="https://maofun.com/wp-content/uploads/2020/11/20201123233753-be0fe.png"><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/v2ray+cf%E5%8F%8D%E4%BB%A3/20201123233753-be0fe.png" alt="img"></a></p><p>最后点击保存并部署即可</p><p>在左上角点击访问你的应用，如果出现的是你的网站的内容那说明反代成功了，将 v2ray 的客户端的地址改成 Worker 应用的地址即可，客户端没有开启 tls 的要开启，并将连接端口设为 443</p><p><a href="https://maofun.com/wp-content/uploads/2020/11/20201123233753-dca95.png"><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/v2ray+cf%E5%8F%8D%E4%BB%A3/20201123233753-dca95.png" alt="img"></a></p><h2 id="自选Cloudflare的ip"><a href="#自选Cloudflare的ip" class="headerlink" title="自选Cloudflare的ip"></a>自选Cloudflare的ip</h2><p>为了实现这一点需要使用这个项目：<a href="https://github.com/Spedoske/CloudflareScanner">https://github.com/Spedoske/CloudflareScanner</a><br>在 Re­lease 页面下载对应平台的二进制运行即可，参数如下，当然你也可以自定义，但记得 tcping 协程数不要超过一千</p><p><a href="https://maofun.com/wp-content/uploads/2020/11/20201123233753-eee3f.png"><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/v2ray+cf%E5%8F%8D%E4%BB%A3/20201123233753-eee3f.png" alt="img"></a></p><p>在同目录的result.csv文件中就可以看到筛选出的优质ip，一般第一行的ip就可以使用了</p><p>然后修改系统的 hosts 文件加入这一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CF的优质ip Worker应用的域名</span><br></pre></td></tr></table></figure><p>这时候重启你的代理软件，应该已经使用到了 CF 的自选 ip 了</p><p>如果你想要在 CF 前再套一个国内中转机，只需要在中转机上将流量转发到筛选出的 CF 优质 ip，端口为 443，然后在代理软件上将地址和端口修改为中转机的地址和端口，host 设置为 Work­ers 应用的域名</p><ul><li>测试 Cloudflare CDN 延迟和速度，获取最快 IP (IPv4+IPv6)！ <a href="https://github.com/XIU2/CloudflareSpeedTest">https://github.com/XIU2/CloudflareSpeedTest</a></li></ul><p>直接运行就能自动延迟测速+下载测速，并列出速度最快的 IP。 当然还有进阶使用方法，自行搭配各种参数来获得更个性化的测速结果！</p>]]></content>
    
    
    <summary type="html">通过cloudflare workers加速v2ray</summary>
    
    
    
    <category term="技术" scheme="https://www.happyshark.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://www.happyshark.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="v2ray" scheme="https://www.happyshark.cn/tags/v2ray/"/>
    
  </entry>
  
  <entry>
    <title>travis-ci在Node.js v14.0下自动构建hexo报错</title>
    <link href="https://www.happyshark.cn/2020/05/22/travis-ci%E5%9C%A8Node.js-v14.0%E4%B8%8B%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAhexo%E6%8A%A5%E9%94%99/"/>
    <id>https://www.happyshark.cn/2020/05/22/travis-ci%E5%9C%A8Node.js-v14.0%E4%B8%8B%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAhexo%E6%8A%A5%E9%94%99/</id>
    <published>2020-05-22T08:00:00.000Z</published>
    <updated>2021-09-13T12:48:30.497Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>参考<a href="https://vensing.com/a-bug-in-nodejs-v14/">https://vensing.com/a-bug-in-nodejs-v14/</a></p></blockquote><h1 id="报错情况"><a href="#报错情况" class="headerlink" title="报错情况"></a>报错情况</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1.27s$ hexo clean</span><br><span class="line">(node:5971) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:5971) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5971) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5971) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5971) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5971) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">322The command &quot;hexo clean&quot; exited with 0.</span><br><span class="line">6.83s$ hexo g</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 3.93 s</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br></pre></td></tr></table></figure><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在travis.yml里面的Node.js版本那里把<strong>stable</strong>改成指定版本号就行，错误已经提交至hexo项目的issue，估计过一段时间就能修复</p><h1 id="附travis-yml中的language用法"><a href="#附travis-yml中的language用法" class="headerlink" title="附travis.yml中的language用法"></a>附travis.yml中的language用法</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><p>其中版本号可填如下内容：</p><ul><li><p><code>node</code> latest stable Node.js release</p></li><li><p><code>lts/*</code> latest LTS Node.js release</p></li><li><p><code>14</code> latest 14.x release</p></li><li><p><code>13</code> latest 13.x release</p></li><li><p><code>12</code> latest 12.x release</p></li><li><p><code>11</code> latest 11.x release</p></li><li><p><code>10</code> latest 10.x release</p></li></ul><blockquote><p>参考自<a href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs/">https://docs.travis-ci.com/user/languages/javascript-with-nodejs/</a></p></blockquote><h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><p>有点想换GitHub Actions了…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;参考&lt;a href=&quot;https://vensing.com/a-bug-in-nodejs-v14/&quot;&gt;https://vensing.com/a-bug-in-nodejs-v14/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1</summary>
      
    
    
    
    <category term="博客" scheme="https://www.happyshark.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="https://www.happyshark.cn/tags/hexo/"/>
    
    <category term="travis CI" scheme="https://www.happyshark.cn/tags/travis-CI/"/>
    
  </entry>
  
  <entry>
    <title>windows XP安装pyqt5和pyinstaller的坑</title>
    <link href="https://www.happyshark.cn/2020/03/24/windows-XP%E5%AE%89%E8%A3%85pyqt5%E5%92%8Cpyinstaller%E7%9A%84%E5%9D%91/"/>
    <id>https://www.happyshark.cn/2020/03/24/windows-XP%E5%AE%89%E8%A3%85pyqt5%E5%92%8Cpyinstaller%E7%9A%84%E5%9D%91/</id>
    <published>2020-03-24T06:00:00.000Z</published>
    <updated>2021-09-13T12:48:33.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xp支持的python和qt版本"><a href="#xp支持的python和qt版本" class="headerlink" title="xp支持的python和qt版本"></a>xp支持的python和qt版本</h1><ul><li><p>Windows xp 不能运行python3.5及以上版本python。</p></li><li><p>Windows xp 不能运行qt5.7及以上版本qt。</p></li><li><p>Pyqt5官方预编译二进制文件不能在xp上运行。</p></li><li><p>Windows xp 能运行的最高版本的python版本为：python3.4和python2.7</p></li><li><p>Windows xp 上能运行的最高版本的qt为qt5.6.3</p></li></ul><h1 id="准备安装包"><a href="#准备安装包" class="headerlink" title="准备安装包"></a>准备安装包</h1><ul><li>windows xp镜像（itellyou.cn）要下载vl版本的</li><li>Python 3.4.4 (官网下载安装程序)</li><li>pip (官网下载get-pip.py文件安装)</li><li>PyQt 5.5.1</li><li>pywin32 220 (221和最新的222没有尝试)</li><li>PyInstaller 3.2.1 (pip install pyinstaller==3.2.1)</li><li>pySrial 3.0.1 (pip install pyserial==3.0.1)</li><li>eric6 ：可以安装17.03.1，Eric6的主程序文件是 $python安装文件夹$\Lib\site-packages\eric6\eric6.pyw</li></ul><p>注1：如果不手动安装pywin32是无法安装PyInstaller的.</p><p>注2：pip install 安装慢的话可以用清华源：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</a></p><p>注3：相关安装包下载地址：<a href="https://www.lanzous.com/b015akode">https://www.lanzous.com/b015akode</a> 密码:7zjp</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xp支持的python和qt版本&quot;&gt;&lt;a href=&quot;#xp支持的python和qt版本&quot; class=&quot;headerlink&quot; title=&quot;xp支持的python和qt版本&quot;&gt;&lt;/a&gt;xp支持的python和qt版本&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windo</summary>
      
    
    
    
    <category term="python" scheme="https://www.happyshark.cn/categories/python/"/>
    
    
    <category term="windowsXP" scheme="https://www.happyshark.cn/tags/windowsXP/"/>
    
    <category term="pyqt5" scheme="https://www.happyshark.cn/tags/pyqt5/"/>
    
  </entry>
  
  <entry>
    <title>修改WIFI名称&amp;暴力多拨提升网速</title>
    <link href="https://www.happyshark.cn/2020/01/20/%E6%9A%B4%E5%8A%9B%E6%8F%90%E5%8D%87%E7%BD%91%E9%80%9F%E2%80%94%E2%80%94%E5%A4%9A%E6%8B%A8/"/>
    <id>https://www.happyshark.cn/2020/01/20/%E6%9A%B4%E5%8A%9B%E6%8F%90%E5%8D%87%E7%BD%91%E9%80%9F%E2%80%94%E2%80%94%E5%A4%9A%E6%8B%A8/</id>
    <published>2020-01-20T06:00:00.000Z</published>
    <updated>2021-09-13T12:48:41.245Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>打开wifi列表全是CMCC-XXXX，找自己家的wifi好麻烦啊，把名字一改岂不美滋滋，另外今天突然发现东站的宽带好像可以多拨，而且一个账号可以在不同地方拨号</p></blockquote><h1 id="可以用来干什么？"><a href="#可以用来干什么？" class="headerlink" title="可以用来干什么？"></a>可以用来干什么？</h1><h2 id="修改wifi名称"><a href="#修改wifi名称" class="headerlink" title="修改wifi名称"></a>修改wifi名称</h2><ul><li>当然是<del>装逼</del>（搜索wifi的时候快速找到自己的家的呀hhh）</li></ul><h2 id="多拨"><a href="#多拨" class="headerlink" title="多拨"></a>多拨</h2><ul><li>如果对网速有要求的话可以通过多拨暴力提升网速，比如200M宽带可以通过双拨变400M，三拨600M，五拨就可以提前体验5G速度了#滑稽</li><li>如果有多间屋子的话就可以只办一个宽带，去哪间屋子就在哪间屋子拨个号就能上网了，省钱大法好</li></ul><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><ul><li><p>修改wifi的名称（去掉开头的CMCC+配置中文名）</p><p><img src="https://pptqdq.ch.files.1drv.com/y4mBJZ-mW2qN-3RoSAsYiePZ_-zsIiGgFIaZSDokxG8KsBfJO2MtXxqDO0N8c8HMsKyn5Hqqe-uRuIOhs0hfA307vvA1ZEuuGAhgUx6CkceI7jk2XILRg5zWMaEUkPb24_s4_eXf2pST1aGrNrf7g0kksKPji9DUo5qhZ3obonjjks0n0N4gBiON-L6g7maEqHYR66jWhtqUiJyLhumLtvmdQ?width=371&amp;height=660&amp;cropmode=none" alt=""></p></li><li><p>双路200M宽带双拨</p><p><img src="https://ppqbdg.ch.files.1drv.com/y4mIfCsNxDB6CLQOYWnbz_ZhzI2YYzqdXBg1Tm454FGzFM6PoghY6Y97HgOykrTsEVENTytObilCqtQwoRV1FXs1z1UJTBUP63WXMz7RPM5v-uYPOPeaeR5MQiCaYVB3JNyah6zg_TVqeSufU_iMpO9AJH2eGdxK0sXwcynDlUgGNUIasu8RmE1zqfxqgtgimSuO8C_Exe13bR1qL9Fcj-M5A?width=790&amp;height=395&amp;cropmode=none" alt=""></p><p><img src="https://ppqcdg.ch.files.1drv.com/y4m9MMd6JTL3Z9bm_49dB-fmZbIjxnJCJ7qdF14Q8UPo0_2TD4_gT_ZFunSr_Q67ribivOgpkJSJdqW-idtqkuKJK0IrxCD7VJLTftdrnW0Z6iUUV9D8xROGkQnffOoWAHHOmtmJ171_FIBiaPsixkJy_RzgNijckg_THurGP_ZwdsGkPgX_29DxOWvA3P1kHL8yyEGt2giY5WObViUvX4nGw?width=1071&amp;height=581&amp;cropmode=none" alt=""></p></li></ul><h1 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h1><h2 id="修改wifi名字"><a href="#修改wifi名字" class="headerlink" title="修改wifi名字"></a>修改wifi名字</h2><h3 id="所需工具（二选一即可）"><a href="#所需工具（二选一即可）" class="headerlink" title="所需工具（二选一即可）"></a>所需工具（二选一即可）</h3><ul><li>chrome浏览器</li><li>Burp Suite + 任意浏览器</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="单chrome浏览器方法"><a href="#单chrome浏览器方法" class="headerlink" title="单chrome浏览器方法"></a>单chrome浏览器方法</h4><ol><li>连接光猫，登录192.168.1.1后台，超级管理员用户名CMCCAdmin，密码aDm8H%MdA</li><li><p>进入网络-WLAN网络设置</p></li><li><p>按F12，ctrl+shift+F，在search里面搜索gp_ssidPre（或者Frm_ESSID），可以搜到在<strong>4980</strong>行有一行代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setValue(&quot;ESSID&quot;, gp_ssidPre+getValue(&quot;Frm_ESSID&quot;));</span><br></pre></td></tr></table></figure><p><img src="https://ppqedg.ch.files.1drv.com/y4mGT1R2WBo13RDfywEpFkZ-kad16l5cjofSwSx2zCumi1L0-B2ph6dP4pL_KdkHIOQMaXEeh1eY_rHB5Ve51HhYGsq-oI0qoLbYgV8C6yY-WlS8GEBbm8sHj1s7YCzPxonaAiM0NxjJ-sWLw3Sc4JVQfQZ8_VWj6d4vTf_thqbGSVJgwtbGzmjEak_2xNRwBBpoNPYSXqzRoCMDSwONy-K2w?width=1920&amp;height=942&amp;cropmode=none" alt=""></p></li><li><p>在<strong>4981</strong>行（即该行代码的下一行）的数字那里点一下设置断电，会变蓝</p></li><li><p>F5刷新页面</p></li><li><p>先修改SSID名称，然后确定提交</p></li><li><p>页面会中断在4981行</p><p><img src="https://ppqddg.ch.files.1drv.com/y4mHEmuS0gEe_JDnnjiArZ-5KyKWi6P6KeJhdBTVKMCzy3szk1jtt8-mXabBBIKHzIioKeeG93HZkbp-4Hv4x4Vapa9eCf0S-Mj3tZnDWQs_cm0QbyYzR1KnqB5StUtpQHzReY-m43brC4y-JofHRgF6r3lx-DjqhJdZaMPX_h7iCL9BCeVbF7uyq0JF12RoWqw3nsaD8Z1I3NRjBbVHwEPLg?width=1920&amp;height=943&amp;cropmode=none" alt=""></p></li><li><p>进入Console标签，输入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setValue(&quot;ESSID&quot;, getValue(&quot;Frm_ESSID&quot;));</span><br></pre></td></tr></table></figure><p><img src="https://95qcdg.ch.files.1drv.com/y4mBBYKOwQS4zojZt31ATs8kmKWOTVx5gd3p31YZMbZ8U4jR98OZACErLTdQVLTOB0c0oKex-_UVV5O0a8-HqDuKnvvNTJXq5hsioc42X-6-X7Yw6t8f7gXUAHNxu5Bmg95Pl_2Oa1JsJUI6YSaH28n8KEShk_AzzG5EUv1M5wVt9VIRyssxrv7zKBUa_vRX7o3A4p_Ondkg5GZLer0EVTnYA?width=1920&amp;height=938&amp;cropmode=none" alt=""></p><p>为了确认ESSID已经被修改，可以输入ESSID查看修改前后的代码，结果就是已经把cmcc去掉了</p></li><li><p>点页面顶上蓝色的箭头执行断点，提交成功，然后wifi名字就被修改了</p><p><img src="https://95tqdq.ch.files.1drv.com/y4mLowTxTPtn0g5jxT9O9nRvYr9c0haevAuV16o7Ifd22P5qrZjcdNxH8GIVyrml2-A2CSMl1lv7CnUqIt95cCts8Eau4l7d7ukj2I8J9f4kQynKcAaUwpr87v--5uH5ogYSgT_lk5DfnPzFGBgBjV4Qkwaotff4RCWBItqDYVKScvYetc2-qCBYLQam1_3M9KqlkxPRcde9FwptG_j6cwCSw?width=1035&amp;height=185&amp;cropmode=none" alt=""></p><p><img src="https://pptqdq.ch.files.1drv.com/y4mBJZ-mW2qN-3RoSAsYiePZ_-zsIiGgFIaZSDokxG8KsBfJO2MtXxqDO0N8c8HMsKyn5Hqqe-uRuIOhs0hfA307vvA1ZEuuGAhgUx6CkceI7jk2XILRg5zWMaEUkPb24_s4_eXf2pST1aGrNrf7g0kksKPji9DUo5qhZ3obonjjks0n0N4gBiON-L6g7maEqHYR66jWhtqUiJyLhumLtvmdQ?width=371&amp;height=660&amp;cropmode=none" alt=""></p></li></ol><h4 id="Burp-Suite-任意浏览器"><a href="#Burp-Suite-任意浏览器" class="headerlink" title="Burp Suite + 任意浏览器"></a>Burp Suite + 任意浏览器</h4><p>慢更…</p><h2 id="多拨-1"><a href="#多拨-1" class="headerlink" title="多拨"></a>多拨</h2><ul><li><p>实现多拨需要使用自己的路由器（千兆端口）</p></li><li><p>需要将光猫设置为桥接，在路由器里面使用pppoe拨号</p><p><img src="https://95qadg.ch.files.1drv.com/y4mZdqSghJOmPL07KH7WpVou7sqNLIp2W6vANxUznlhug-kI3mvdrQofVcUscNa21WeGe5Lgv0gcC7KosJgC4tN8pNmLC-ml442TDT_LLnyru_LG0F_QKCmpchtXnXqJ7cSZLXDLyBVnWxHgJ_89IZXyerJYaUf2zXlWVKx6f7Sc1QdnyrlimUDAKom4fmjhIvFN7fYZ8vytqApBk9UKTb2Kw?width=937&amp;height=571&amp;cropmode=none" alt=""></p></li><li><p>如果使用多拨的话必须要有路由器固件支持，推荐老毛子&amp;潘多拉固件，内置了多拨的功能。</p></li><li><p>如果是华硕路由器里面内置了双wan，可以直接双拨。（AC66U B1以上型号）</p><p><img src="https://ppqbdg.ch.files.1drv.com/y4mIfCsNxDB6CLQOYWnbz_ZhzI2YYzqdXBg1Tm454FGzFM6PoghY6Y97HgOykrTsEVENTytObilCqtQwoRV1FXs1z1UJTBUP63WXMz7RPM5v-uYPOPeaeR5MQiCaYVB3JNyah6zg_TVqeSufU_iMpO9AJH2eGdxK0sXwcynDlUgGNUIasu8RmE1zqfxqgtgimSuO8C_Exe13bR1qL9Fcj-M5A?width=790&amp;height=395&amp;cropmode=none" alt=""></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;打开wifi列表全是CMCC-XXXX，找自己家的wifi好麻烦啊，把名字一改岂不美滋滋，另外今天突然发现东站的宽带好像可以多拨，而且一个账号可以在不同地方拨号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;可以用来干什么？&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="宽带" scheme="https://www.happyshark.cn/categories/%E5%AE%BD%E5%B8%A6/"/>
    
    
    <category term="宽带" scheme="https://www.happyshark.cn/tags/%E5%AE%BD%E5%B8%A6/"/>
    
    <category term="多拨" scheme="https://www.happyshark.cn/tags/%E5%A4%9A%E6%8B%A8/"/>
    
    <category term="提速" scheme="https://www.happyshark.cn/tags/%E6%8F%90%E9%80%9F/"/>
    
    <category term="wifi" scheme="https://www.happyshark.cn/tags/wifi/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客上线</title>
    <link href="https://www.happyshark.cn/2019/12/26/hello-world/"/>
    <id>https://www.happyshark.cn/2019/12/26/hello-world/</id>
    <published>2019-12-26T06:00:00.000Z</published>
    <updated>2021-09-13T09:20:31.743Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客又双叒叕上线了，这次使用的是hexo + Github Pages + travis CI + 语雀 + serverless + onedrive图床，部署完成之后可以直接在语雀上编辑文章然后自动发布到博客，云端写作不是梦hhh </p></blockquote><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><blockquote><p>部署部分是按照博客<a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">https://www.simon96.online/2018/10/12/hexo-tutorial/</a> 配置的，仅做备份之用以便日后博客迁移可以照着这篇文文章重新恢复(ಥ _ ಥ)</p></blockquote><p>本地环境：windows Linux Ubuntu 18.04</p><h2 id="（可选）配置git"><a href="#（可选）配置git" class="headerlink" title="（可选）配置git"></a>（可选）配置git</h2><p>首先我得重新在git设置一下身份的名字和邮箱（因为当初都忘了设置啥了，因为遇到坑了）进入到需要提交的文件夹底下（因为直接打开git Bash，在没有路径的情况下，根本没！法！改！刚使用git时遇到的坑。。。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email“your@email.com&quot;</span><br></pre></td></tr></table></figure><p>注：yourname是你要设置的名字，your@email是你要设置的邮箱。</p><h2 id="安装-Node-js和npm"><a href="#安装-Node-js和npm" class="headerlink" title="安装 Node.js和npm"></a>安装 Node.js和npm</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><p>如果报错,请更改软件源—清华大学开源软件源,并更新</p><p>注：查看nodejs和npm版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nodejs -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>可以正常打印版本号说明,安装成功</p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><ol><li><p>创建博客所在目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir hexo </span><br></pre></td></tr></table></figure></li><li><p>创建目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir hexo</span><br></pre></td></tr></table></figure></li><li><p>切换目录</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd hexo</span><br></pre></td></tr></table></figure></li><li><p>全局安装 Hexo，需要最高权限，记得输入root密码</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>初始化 Hexo</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p> 注：如果报错执行代码,不报错忽略</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm config set user 0</span><br><span class="line">sudo npm config set unsafe-perm true</span><br><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ol><li><p>如果安装慢就安装proxychains，并且定义alias npm=’proxychains4 npm’</p></li><li><p>如果要永久定义（重启不失效的话就编辑：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>   并且在末尾添加以下代码并定义 alias</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias npm=&#x27;proxychains4 npm&#x27;</span><br></pre></td></tr></table></figure></li><li><p>配置完代理后就可以安装npm插件了</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-tag-aplayer --save</span><br><span class="line">npm i --save hexo-wordcount</span><br><span class="line">npm install aplayer --save</span><br><span class="line">npm install --save hexo-helper-live2d</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ol><h2 id="测试安装成功"><a href="#测试安装成功" class="headerlink" title="测试安装成功"></a>测试安装成功</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo server</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/部署成功.png" alt="本地部署成功"></p><h1 id="同步到githubpages"><a href="#同步到githubpages" class="headerlink" title="同步到githubpages"></a>同步到githubpages</h1><h2 id="方案一：GithubPages"><a href="#方案一：GithubPages" class="headerlink" title="方案一：GithubPages"></a>方案一：GithubPages</h2><ol><li><p>创建<a href="https://github.com/">Github</a>账号</p></li><li><p>创建仓库， 仓库名为：<Github账号名称>.github.io</p></li><li><p>将本地Hexo博客推送到GithubPages</p><ul><li><p>安装hexo-deployer-git插件。在命令行（即Git Bash）运行以下命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>添加SSH key。</p><p>创建一个 SSH key 。在命令行（即Git Bash）输入以下命令，     回车三下即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;  </span><br></pre></td></tr></table></figure></li><li><p>添加到 github。 复制密钥文件内容（路径形如C:\Users\Administrator.ssh\id_rsa.pub），粘贴到<a href="https://github.com/settings/keys">New SSH Key</a>即可。</p></li><li><p>测试是否添加成功。在命令行（即Git     Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com  </span><br><span class="line">$ yes  </span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改_config.yml（在站点目录下）。文件末尾修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment  </span><br><span class="line">  ## Docs: https://hexo.io/docs/deployment.html  </span><br><span class="line">  deploy:  </span><br><span class="line">  type: git  </span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git  </span><br><span class="line">  branch: master  </span><br></pre></td></tr></table></figure><p>注意：上面仓库地址写ssh地址，不写http地址。(windows使用git的话建议用https，可以挂代理)</p></li><li><p>推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回INFO Deploy done: git即成功推送：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g  </span><br><span class="line">$ hexo d  </span><br></pre></td></tr></table></figure></li><li><p>等待1分钟左右，浏览器访问网址：https://<github账号名称>.github.io</p></li></ol><p>至此，的Hexo博客已经搭建在GithubPages, 域名为https://<Github账号名称>.github.io。</p><h2 id="方案二：GithubPages-域名"><a href="#方案二：GithubPages-域名" class="headerlink" title="方案二：GithubPages + 域名"></a>方案二：GithubPages + 域名</h2><p>在方案一的基础上，添加自定义域名（购买的域名）。</p><ol><li><p>域名解析。</p><pre><code>类型选择为 CNAME；主机记录即域名前缀，填写为www；记录值填写为&lt;Github账号名称&gt;.github.io；解析线路，TTL 默认即可。</code></pre></li><li><p>仓库设置。</p><ul><li>打开博客仓库设置：<a href="https://github.com/">https://github.com/</a><Github账号名称>/<Github账号名称>.github.io/settings</li><li>在Custom domain下，填写自定义域名，点击save。</li><li>在站点目录的source文件夹下，创建并打开CNAME.txt，写入你的域名，保存，并重命名为CNAME。 </li></ul></li><li><p>等待10分钟左右。</p><pre><code>浏览器访问自定义域名。至此，Hexo博客已经解析到自定义域名，https://&lt;Github账号名称&gt;.github.io依然可用。</code></pre></li></ol><h1 id="主题，插件配置"><a href="#主题，插件配置" class="headerlink" title="主题，插件配置"></a>主题，插件配置</h1><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>hexo博客主题用的是<a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a>，配置信息：<a href="https://jerryc.me/posts/21cfbf15/">https://jerryc.me/posts/21cfbf15/</a> ，感谢作者~</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><blockquote><p>插件部分引自博客<a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">https://www.simon96.online/2018/10/12/hexo-tutorial/</a> ，仅做备份之用以便日后博客迁移可以照着这篇文文章重新恢复(ಥ _ ಥ)</p></blockquote><h3 id="live2d"><a href="#live2d" class="headerlink" title="live2d"></a>live2d</h3><ul><li><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></li><li><p>复制你喜欢的模型名字：</p><p> Epsilon2.1</p><p> <a href="https://huaji8.top/img/live2d/Epsilon2.1.gif"><img src="https://huaji8.top/img/live2d/Epsilon2.1.gif" alt="img"></a></p><p> Gantzert_Felixander</p><p> <a href="https://huaji8.top/img/live2d/Gantzert_Felixander.gif"><img src="https://huaji8.top/img/live2d/Gantzert_Felixander.gif" alt="img"></a></p><p> haru</p><p> <a href="https://huaji8.top/img/live2d/haru.gif"><img src="https://huaji8.top/img/live2d/haru.gif" alt="img"></a></p><p> miku</p><p> <a href="https://huaji8.top/img/live2d/miku.gif"><img src="https://huaji8.top/img/live2d/miku.gif" alt="img"></a></p><p> ni-j</p><p> <a href="https://huaji8.top/img/live2d/ni-j.gif"><img src="https://huaji8.top/img/live2d/ni-j.gif" alt="img"></a></p><p> nico</p><p> <a href="https://huaji8.top/img/live2d/nico.gif"><img src="https://huaji8.top/img/live2d/nico.gif" alt="img"></a></p><p> nietzche</p><p> <a href="https://huaji8.top/img/live2d/nietzche.gif"><img src="https://huaji8.top/img/live2d/nietzche.gif" alt="img"></a></p><p> nipsilon</p><p> <a href="https://huaji8.top/img/live2d/nipsilon.gif"><img src="https://huaji8.top/img/live2d/nipsilon.gif" alt="img"></a></p><p> nito</p><p> <a href="https://huaji8.top/img/live2d/nito.gif"><img src="https://huaji8.top/img/live2d/nito.gif" alt="img"></a></p><p> shizuku</p><p> <a href="https://huaji8.top/img/live2d/shizuku.gif"><img src="https://huaji8.top/img/live2d/shizuku.gif" alt="img"></a></p><p> tsumiki</p><p> <a href="https://huaji8.top/img/live2d/tsumiki.gif"><img src="https://huaji8.top/img/live2d/tsumiki.gif" alt="img"></a></p><p> wanko</p><p> <a href="https://huaji8.top/img/live2d/wanko.gif"><img src="https://huaji8.top/img/live2d/wanko.gif" alt="img"></a></p><p> z16</p><p> <a href="https://huaji8.top/img/live2d/z16.gif"><img src="https://huaji8.top/img/live2d/z16.gif" alt="img"></a></p><p> hibiki</p><p> <a href="https://huaji8.top/img/live2d/hibiki.gif"><img src="https://huaji8.top/img/live2d/hibiki.gif" alt="img"></a></p><p> koharu</p><p> <a href="https://huaji8.top/img/live2d/koharu.gif"><img src="https://huaji8.top/img/live2d/koharu.gif" alt="img"></a></p><p> haruto</p><p> <a href="https://huaji8.top/img/live2d/haruto.gif"><img src="https://huaji8.top/img/live2d/haruto.gif" alt="img"></a></p><p> Unitychan</p><p> <a href="https://huaji8.top/img/live2d/Unitychan.gif"><img src="https://huaji8.top/img/live2d/Unitychan.gif" alt="img"></a></p><p> tororo</p><p> <a href="https://huaji8.top/img/live2d/tororo.gif"><img src="https://huaji8.top/img/live2d/tororo.gif" alt="img"></a></p><p> hijiki</p><p> <a href="https://huaji8.top/img/live2d/hijiki.gif"><img src="https://huaji8.top/img/live2d/hijiki.gif" alt="img"></a></p></li><li><p>将以下代码添加到主题配置文件<code>_config.yml</code>，修改&lt;你喜欢的模型名字&gt;：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-hijiki</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></table></figure></li><li><p>建配置文件</p><ul><li><p>在站点目录下建文件夹<code>live2d_models</code>，</p></li><li><p>再在<code>live2d_models</code>下建文件夹<code>&lt;你喜欢的模型名字&gt;</code>,</p></li><li><p>再在<code>&lt;你喜欢的模型名字&gt;</code>下建json文件：&lt;你喜欢的模型名字&gt;.model.json</p></li></ul></li><li><p>安装模型。在命令行（即Git Bash）运行以下命令即可：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save live2d-widget-model-hijiki</span><br></pre></td></tr></table></figure></li><li><p>在命令行（即Git Bash）运行以下命令， 在<code>http://127.0.0.1:4000/</code>查看测试结果:</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></li></ul><h3 id="评论插件（2021年9月12日更新）"><a href="#评论插件（2021年9月12日更新）" class="headerlink" title="评论插件（2021年9月12日更新）"></a>评论插件（2021年9月12日更新）</h3><ul><li>博客评论采用gitalk，配置过程参考<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">https://github.com/gitalk/gitalk/blob/master/readme-cn.md</a></li><li>创建 <strong>GitHub Application</strong>的时候需要注意一下，url填个人博客的完整地址。</li></ul><h1 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h1><h2 id="github-actions自动构建（2021年9月12日更新）"><a href="#github-actions自动构建（2021年9月12日更新）" class="headerlink" title="github actions自动构建（2021年9月12日更新）"></a>github actions自动构建（2021年9月12日更新）</h2><p>由于不经常用语雀（就是懒），再加上travis ci要求构建的库必须是公共库，所以转战github actions。</p><ul><li><p>创建 <code>blog</code> 仓库用来存放 Hexo 项目</p></li><li><p>创建 <code>your.github.io</code> 仓库用来存放静态博客页面</p></li></ul><ol><li><p>生成ssh密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f github-deploy-key</span><br></pre></td></tr></table></figure><p>会生成 <code>github-deploy-key</code> 和 <code>github-deploy-key.pub</code> 两个文件。</p></li><li><p>配置部署密钥</p><p>复制 <code>github-deploy-key</code> 文件内容，在 <code>blog</code> 仓库 <code>Settings -&gt; Secrets -&gt; Add a new secret</code> 页面上添加。</p><ul><li>在 <code>Name</code> 输入框填写 <code>HEXO_DEPLOY_PRI</code>。</li><li>在 <code>Value</code> 输入框填写 <code>github-deploy-key</code> 文件内容。</li></ul><p>复制 <code>github-deploy-key.pub</code> 文件内容，在 <code>your.github.io</code> 仓库 <code>Settings -&gt; Deploy keys -&gt; Add deploy key</code> 页面上添加。</p><ul><li><p>在 <code>Title</code> 输入框填写 <code>HEXO_DEPLOY_PUB</code>。</p></li><li><p>在 <code>Key</code> 输入框填写 <code>github-deploy-key.pub</code> 文件内容。</p></li><li><p>勾选 <code>Allow write access</code> 选项。</p></li></ul></li><li><p>编写 Github Actions</p><p><strong>Workflow 模版</strong></p><p>3.1 在 <code>blog</code> 仓库根目录下创建 <code>.github/workflows/deploy.yml</code> 文件，目录结构如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blog (repository)</span><br><span class="line">└── .github</span><br><span class="line">    └── workflows</span><br><span class="line">        └── deploy.yml</span><br></pre></td></tr></table></figure><p>3.2 </p><p>在 <code>deploy.yml</code> 文件中粘贴以下内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">name: CI</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  GIT_USER: HPShark</span><br><span class="line">  GIT_EMAIL: www.yaoyuchao@qq.com</span><br><span class="line">  THEME_REPO: HPShark/happyshark</span><br><span class="line">  THEME_BRANCH: master</span><br><span class="line">  DEPLOY_REPO: HPShark/HPShark.github.io</span><br><span class="line">  DEPLOY_BRANCH: master</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    name: Build on node $&#123;&#123; matrix.node_version &#125;&#125; and $&#123;&#123; matrix.os &#125;&#125;</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        os: [ubuntu-latest]</span><br><span class="line">        node_version: [14.x]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">      - name: Checkout theme repo</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          repository: $&#123;&#123; env.THEME_REPO &#125;&#125;</span><br><span class="line">          ref: $&#123;&#123; env.THEME_BRANCH &#125;&#125;</span><br><span class="line">          path: themes/concise</span><br><span class="line"></span><br><span class="line">      - name: Checkout deploy repo</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          repository: $&#123;&#123; env.DEPLOY_REPO &#125;&#125;</span><br><span class="line">          ref: $&#123;&#123; env.DEPLOY_BRANCH &#125;&#125;</span><br><span class="line">          path: .deploy_git</span><br><span class="line"></span><br><span class="line">      - name: Use Node.js $&#123;&#123; matrix.node_version &#125;&#125;</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: $&#123;&#123; matrix.node_version &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: Configuration environment</span><br><span class="line">        env:</span><br><span class="line">          HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span><br><span class="line">          mkdir -p ~/.ssh/</span><br><span class="line">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">          chmod 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">          git config --global user.name $GIT_USER</span><br><span class="line">          git config --global user.email $GIT_EMAIL</span><br><span class="line"></span><br><span class="line">      - name: Install dependencies</span><br><span class="line">        run: |</span><br><span class="line">          npm install</span><br><span class="line"></span><br><span class="line">      - name: Deploy hexo</span><br><span class="line">        run: |</span><br><span class="line">          npm run deploy</span><br></pre></td></tr></table></figure><p><code>name</code> 是当前 Action 的名字，最后你可以在仓库的 Actions 菜单项中看到它。<br><code>on</code>是此 Action 触发条件，当满足条件时会触发此任务，上面的 on.push.branches.source-<code>action</code> 是指当 source-action 分支收到 push 后会触发 Action 执行任务。<br><code>env</code>为环境变量对象</p><ul><li><p><code>env.GIT_USER</code>为 Hexo 编译后使用此 git 用户部署到仓库</p></li><li><p><code>env.GIT_EMAIL</code> 为 Hexo 编译后使用此 git 邮箱部署到仓库</p></li><li><code>env.THEME_REPO</code> 为 Hexo 所使用的主题的仓库，这里为 vensing/Kratos-Rebirth</li><li><code>env.THEME_BRANCH</code> 为 Hexo 所使用的主题仓库的版本，可以是：branch、tag 或者 SHA</li><li><code>env.DEPLOY_REPO</code>为 Hexo 编译后要部署的仓库，例如：vensing/vensing.github.io</li><li><code>env.DEPLOY_BRANCH</code> 为 Hexo 编译后要部署到的分支，例如：master</li></ul><p><code>jobs</code> 为此 Action 下的任务列表</p><ul><li><code>jobs.&#123;job&#125;.name</code> 任务名称</li><li><code>jobs.&#123;job&#125;.runs-on</code>任务所需容器，可选值：ubuntu-latest、windows-latest、macos-latest。</li><li><code>jobs.&#123;job&#125;.strategy</code> 策略下可以写 array 格式，此 job 会遍历此数组执行。</li><li><p><code>jobs.&#123;job&#125;.steps</code> 一个步骤数组，可以把所要干的事分步骤放到这里。</p><ul><li><p><code>jobs.&#123;job&#125;.steps.$.name</code> 步骤名，编译时会会以 LOG 形式输出。</p></li><li><p><code>jobs.&#123;job&#125;.steps.$.uses</code>所要调用的 Action，可以到 <a href="https://github.com/actions">https://github.com/actions</a> 查看更多。</p></li><li><p><code>jobs.&#123;job&#125;.steps.$.with</code>一个对象，调用 Action 传的参数，具体可以查看所使用 Action 的说明。</p></li></ul></li></ul><p>在上面配置文件中的代码段，指定了 Action 依赖的 OS 实例为 ubuntu-latest，以及 node 运行环境版本为 14.x，任务 steps 中引用了一个 版本为 v2 的 Action checkout ，actions/checkout@v2 的作用是 Checkout 一个 git 仓库到当前 ubuntu 容器。</p><ul><li>Checkout theme repo step 中从环境变量中拿出 $ 指定本站使用的博客仓库名及分支 hexo5-custom，检出到 themes/Kratos-Rebirth 目录下。</li><li>Checkout deploy repo step 中从环境变量中拿出 $ 指定部署备份的博客仓库，及要部署备份生成的静态网页的分支 master，检出到 .deploy_git 目录下。</li><li>Use Node.js step 中使用了 actions/setup-node@v1 action 指定了 node 的版本。</li></ul><p>检出主题分支和 Github Pages 部署分支之后，接着配置执行环境：</p><ul><li>设置容器的时区；</li><li>将在 Settings -&gt; Secrets 中的 SSH 私钥写入到 ~/.ssh/id_rsa 文件中；</li><li>设置 id_rsa 的文件权限及 know_hosts、git 全局用户信息</li></ul><p>接着执行 npm install 安装依赖和 npm run deploy 部署到 Github Pages 进行备份。run: | 可分行连续执行多条命令，需要注意的是使用 hexo 的 deploy 命令需要我们安装 hexo-deployer-git 依赖，所以需要先在本地安装下依赖写入 package.json 中。</p></li><li><p>执行任务</p><p>写一篇文章，<code>push</code> 到 <code>blog</code> 仓库的 <code>master</code> 分支，在此仓库 <code>Actions</code> 页面查看当前 task。</p></li></ol><h2 id="语雀云端写作-腾讯云serverless提交-Travis-ci自动构建-github-pages发布"><a href="#语雀云端写作-腾讯云serverless提交-Travis-ci自动构建-github-pages发布" class="headerlink" title="语雀云端写作+腾讯云serverless提交+ Travis-ci自动构建+github-pages发布"></a>语雀云端写作+腾讯云serverless提交+ Travis-ci自动构建+github-pages发布</h2><blockquote><p>实现语雀云端协作部分引自博客<a href="https://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/">https://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/</a> 以及<a href="https://aqpcet.coding.me/%E8%AF%AD%E9%9B%80+TravisCI+Serverless/3689364350.html">https://aqpcet.coding.me/%E8%AF%AD%E9%9B%80+TravisCI+Serverless/3689364350.html</a> ，仅做备份之用以便日后博客迁移可以照着这篇文文章重新恢复(ಥ _ ಥ)</p></blockquote><ul><li><p>语雀</p><p><a href="https://yuque.com/">语雀</a>是阿里巴巴旗下的专业云端知识库，支持<a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin">Markdown</a>语法，个人和团队皆可用于文档编写。它不仅仅是一个在线编写文档的工具，还集成了<a href="https://www.yuque.com/yuque/developer/doc-webhook">Web Hook</a> ，为自动化部署Hexo建立了基础。而<a href="https://github.com/x-cold/yuque-hexo">yuque-hexo</a>是<a href="https://github.com/x-cold">x-cold</a>根据语雀的API为Hexo博客写的插件，可以很方便的将语雀指定知识库里的文章全部更新到hexo博客中。</p></li></ul><ul><li><p>Travis CI</p><p><a href="https://travis-ci.com/">Travis CI</a>可以很方便地将<a href="https://github.com/">GitHub</a>的项目持续集成并构建。</p></li></ul><ul><li><p>Serverless</p><p><a href="https://cloud.tencent.com/developer/article/1200169">Serverless</a>可以通过代码唤起Travis CI执行构建项目。</p></li></ul><p>自动部署总体流程如下。</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/部署流程.png" alt="图片来自aqpcet.coding.me"></p><h3 id="关键文件："><a href="#关键文件：" class="headerlink" title="关键文件："></a>关键文件：</h3><ul><li><p>.travis.yml：（参考自<a href="https://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/">IT范儿</a>）</p><p>如果使用这两个问卷配置travis-ci的话，travis-ci.com上仓库的设置里面环境变量只需要设置Travis_Token，变量值为github上取得的Token（DISPLAY VALUE IN BUILD LOG一定要关上！）</p></li></ul><p>  <strong>20200324更新：语雀会对频繁调用的请求进行限流，故需要将语雀token加入到该文件中。${YUQUE_TOKEN}即为语雀token，为保证安全故将token值加进travic网站中而不保存在文件中，添加方法与Travis_Token添加方法相同</strong></p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span> <span class="comment"># 设置语言</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span> <span class="comment"># 设置相应版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cache:</span></span><br><span class="line"><span class="comment">#     apt: true</span></span><br><span class="line"><span class="comment">#     directories:</span></span><br><span class="line"><span class="comment">#         - node_modules # 缓存不经常更改的内容</span></span><br><span class="line"></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line">    <span class="attr">email:</span></span><br><span class="line">        <span class="attr">recipients:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">happyshark520@outlook.com</span></span><br><span class="line">        <span class="attr">on_success:</span> <span class="string">change</span></span><br><span class="line">        <span class="attr">on_failure:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">cheerio</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">./publish-to-gh-pages.sh</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">-g</span> <span class="string">yuque-hexo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yuque-hexo</span> <span class="string">clean</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">YUQUE_TOKEN=$&#123;YUQUE_TOKEN&#125;</span> <span class="string">yuque-hexo</span> <span class="string">sync</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">sync</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./publish-to-gh-pages.sh</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">    <span class="attr">only:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">master</span> <span class="comment">#只监测hexo分支，hexo是我的分支的名称，可根据自己情况设置</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">    <span class="attr">global:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">GH_REF:</span> <span class="string">github.com/HPShark/HPShark.github.io.git</span> <span class="comment">#设置GH_REF，注意更改yourname</span></span><br></pre></td></tr></table></figure><ul><li><p>publish-to-gh-pages.sh：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">set -ev</span><br><span class="line">git clone https://$&#123;GH_REF&#125; .deploy_git</span><br><span class="line">cd .deploy_git</span><br><span class="line">git checkout master</span><br><span class="line">cd ../</span><br><span class="line">mv .deploy_git/.git/ ./public/</span><br><span class="line">cd ./public</span><br><span class="line">git config user.name &quot;HPShark&quot; # 修改name</span><br><span class="line">git config user.email &quot;&lt;github登录邮箱&gt;&quot; # 修改email</span><br><span class="line"># add commit timestamp</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Travis CI Auto Builder at `date +&quot;%Y-%m-%d %H:%M&quot;`&quot;</span><br><span class="line">git push --force --quiet &quot;https://$&#123;Travis_Token&#125;@$&#123;GH_REF&#125;&quot; master:master</span><br></pre></td></tr></table></figure></li><li><p>腾讯云serverless函数配置，因为travis-ci.org的网址换成了travis-ci.com，所以要对网上的一些老版本的函数内容中的api部分进行修改，然后再加上token和repos即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main_handler</span>(<span class="params"><span class="variable">$event</span>, <span class="variable">$context</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 解析语雀post的数据</span></span><br><span class="line">    <span class="variable">$update_title</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$event</span>-&gt;body)&#123;</span><br><span class="line">        <span class="variable">$yuque_data</span>= json_decode(<span class="variable">$event</span>-&gt;body);</span><br><span class="line">        <span class="variable">$update_title</span> .= <span class="variable">$yuque_data</span>-&gt;data-&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// default params</span></span><br><span class="line">    <span class="variable">$repos</span> = <span class="string">&#x27;&#x27;</span>;  <span class="comment">// 用户名%2F源码仓库名，斜杠用%2F代替</span></span><br><span class="line">    <span class="variable">$token</span> = <span class="string">&#x27;&#x27;</span>; <span class="comment">// 你的登录token</span></span><br><span class="line">    <span class="variable">$message</span> = date(<span class="string">&quot;Y/m/d&quot;</span>).<span class="string">&#x27;:yuque update:&#x27;</span>.<span class="variable">$update_title</span>;</span><br><span class="line">    <span class="variable">$branch</span> = <span class="string">&#x27;master&#x27;</span>;</span><br><span class="line">    <span class="comment">// post params</span></span><br><span class="line">    <span class="variable">$queryString</span> = <span class="variable">$event</span>-&gt;queryString;</span><br><span class="line">    <span class="variable">$q_token</span> = <span class="variable">$queryString</span>-&gt;token ? <span class="variable">$queryString</span>-&gt;token : <span class="variable">$token</span>;</span><br><span class="line">    <span class="variable">$q_repos</span> = <span class="variable">$queryString</span>-&gt;repos ? <span class="variable">$queryString</span>-&gt;repos : <span class="variable">$repos</span>;</span><br><span class="line">    <span class="variable">$q_message</span> = <span class="variable">$queryString</span>-&gt;message ? <span class="variable">$queryString</span>-&gt;message : <span class="variable">$message</span>;</span><br><span class="line">    <span class="variable">$q_branch</span> = <span class="variable">$queryString</span>-&gt;branch ? <span class="variable">$queryString</span>-&gt;branch : <span class="string">&#x27;master&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$q_token</span>);</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&#x27;===&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="variable">$q_repos</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">&#x27;===&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="variable">$q_message</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">&#x27;===&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="variable">$q_branch</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">&#x27;===&#x27;</span>);</span><br><span class="line">    <span class="comment">//request travis ci</span></span><br><span class="line">    <span class="variable">$res_info</span> = triggerTravisCI(<span class="variable">$q_repos</span>, <span class="variable">$q_token</span>, <span class="variable">$q_message</span>, <span class="variable">$q_branch</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$res_code</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$res_message</span> = <span class="string">&#x27;未知&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res_info</span>[<span class="string">&#x27;http_code&#x27;</span>])&#123;</span><br><span class="line">        <span class="variable">$res_code</span> = <span class="variable">$res_info</span>[<span class="string">&#x27;http_code&#x27;</span>];</span><br><span class="line">        <span class="keyword">switch</span>(<span class="variable">$res_info</span>[<span class="string">&#x27;http_code&#x27;</span>])&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">202</span>:</span><br><span class="line">                <span class="variable">$res_message</span> = <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$res_message</span> = <span class="string">&#x27;faild&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$res</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span>=&gt;<span class="variable">$res_code</span>,</span><br><span class="line">        <span class="string">&#x27;message&#x27;</span>=&gt;<span class="variable">$res_message</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span>  travis api , trigger a build</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $repos string 仓库ID、slug</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $token string 登录验证token</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $message string 触发信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $branch string 分支</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> $info array 回包信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">triggerTravisCI</span> (<span class="params"><span class="variable">$repos</span>, <span class="variable">$token</span>, <span class="variable">$message</span>=<span class="string">&#x27;yuque update&#x27;</span>, <span class="variable">$branch</span>=<span class="string">&#x27;master&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="variable">$curl</span> = curl_init();</span><br><span class="line">    <span class="comment">//设置抓取的url</span></span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_URL, <span class="string">&#x27;https://api.travis-ci.com/repo/&#x27;</span>.<span class="variable">$repos</span>.<span class="string">&#x27;/requests&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置获取的信息以文件流的形式返回，而不是直接输出。</span></span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//设置post方式提交</span></span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_CUSTOMREQUEST, <span class="string">&quot;POST&quot;</span>);</span><br><span class="line">    <span class="comment">//设置post数据</span></span><br><span class="line">    <span class="variable">$post_data</span> = json_encode(<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&quot;request&quot;</span>=&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;message&quot;</span>=&gt;<span class="variable">$message</span>,</span><br><span class="line">            <span class="string">&quot;branch&quot;</span>=&gt;<span class="variable">$branch</span></span><br><span class="line">        )</span><br><span class="line">    ));</span><br><span class="line">    <span class="variable">$header</span> = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;Content-Type: application/json&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Travis-API-Version: 3&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Authorization:token &#x27;</span>.<span class="variable">$token</span>,</span><br><span class="line">      <span class="string">&#x27;Content-Length:&#x27;</span> . strlen(<span class="variable">$post_data</span>)</span><br><span class="line">    );</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_HTTPHEADER, <span class="variable">$header</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_POSTFIELDS, <span class="variable">$post_data</span>);</span><br><span class="line">    <span class="comment">//执行命令</span></span><br><span class="line">    <span class="variable">$data</span> = curl_exec(<span class="variable">$curl</span>);</span><br><span class="line">    <span class="variable">$info</span> = curl_getinfo(<span class="variable">$curl</span>);</span><br><span class="line">    <span class="comment">//关闭URL请求</span></span><br><span class="line">    curl_close(<span class="variable">$curl</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$info</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h3><ol><li><p>源码上传至github</p><ul><li>建一个新的仓库，专门存放源代码（也可以直接在github.io 的那个仓库新建一个分支，不过设置麻烦，就放弃了）</li><li>将本地代码上传（可能有信息安全风险，所以建议为博客单独开设一个帐号）。注意仓库要设为公开，travis-ci构建私人仓库是要付费的orz..</li></ul><p>注意事项：</p><ul><li><p>上传前建议先执行hexo clean，可以减少上传体积。</p></li><li><p>也可以通过配置.gitignore控制上传内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol><li><p>配置travis-ci</p><ul><li><p>把.travis.yml和publish-to-gh-pages.sh放在根目录</p><ul><li><p>登录<a href="https://travis-ci.com/">travis-ci</a>，绑定github，允许访问github仓库，进入<strong>博客源码</strong>仓库</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/travis设置.png" alt=""></p></li><li><p>设置Environment Variables(环境变量)，设置Travis_Token，YUQUE_TOKEN添加方法类似</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/travis的token设置.png" alt=""></p></li><li><p>配置完成后等待腾讯云serverless触发即可构建，构建成功会return 0，如果有其他问题（一般是缺环境）缺啥在.travis.yml中的install那里npm装包即可~</p></li></ul></li></ul></li></ol><ol><li><p>腾讯云serverless函数配置：</p><ul><li><p>新建php空白函数：（可以用python，aqpcet.coding.me用的就是python设置的）</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/serverless新建plp文件.png" alt=""></p></li><li><p>编辑serverless函数内容，需要获取以下两个信息，填入对应的地方就行</p><ul><li><p>travis登录token，在travis-ci.com中设置界面获取：</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/travis登录token.png" alt=""></p></li><li><p>博客源码的仓库名</p><p>现在可以直接用\<github用户名>%2F&lt;博客源码仓库名&gt;代替原来的仓库id了，不用在拿抓包工具抓仓库ID 或 扩展名了</p></li></ul></li><li><p>配置触发方式</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/serverless设置触发方式.png" alt=""></p><p>一般会得到这么个api：<a href="https://service-s08f6nvk-1251833201.ap-guangzhou.apigateway.myqcloud.com/release/xxx">https://service-s08f6nvk-1251833201.ap-guangzhou.apigateway.myqcloud.com/release/xxx</a></p></li></ul></li><li><p>语雀配置：</p><p>配置一个仓库的webhook:</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/语雀配置.png" alt=""></p><p>可以选择所有更新触发或者主动触发，主动触发的意思即发布需要勾选一个选项才会触发webhook。具体可参见语雀文档：<a href="https://www.yuque.com/yuque/developer/doc-webhook；">https://www.yuque.com/yuque/developer/doc-webhook；</a><br>将serverless生成的api填入,可以在链接后面带参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">token 登录token</span><br><span class="line">repos 仓库id</span><br><span class="line">message 提交信息</span><br><span class="line">branch 分支</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">https://service-s08f6nvk-1251833201.ap-guangzhou.apigateway.myqcloud.com/release/xxx?repos=xxx&amp;token=xxx&amp;message=xxx&amp;branch=xxx</span><br></pre></td></tr></table></figure><p>如果不在链接带参数则写在serverless函数内。</p></li></ol><h3 id="通过语雀插件对front-matter进行处理"><a href="#通过语雀插件对front-matter进行处理" class="headerlink" title="通过语雀插件对front-matter进行处理"></a>通过语雀插件对front-matter进行处理</h3><p>插件地址：<a href="https://github.com/x-cold/yuque-hexo">https://github.com/x-cold/yuque-hexo</a></p><p>需要对package.json，.travis.yml进行配置，在编辑语雀文章时头部要这么写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tags: [hexo, node]</span><br><span class="line">categories: fe</span><br><span class="line">cover: https://cdn.nlark.com/yuque/0/2019/jpeg/155457/1546857679810-d82e3d46-e960-419c-a715-0a82c48a2fd6.jpeg#align=left&amp;display=inline&amp;height=225&amp;name=image.jpeg&amp;originHeight=225&amp;originWidth=225&amp;size=6267&amp;width=225</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">some description</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">more detail</span><br></pre></td></tr></table></figure><p>注：冒号后面是<strong>空格</strong>！tags后面必须有中<strong>括号</strong>！有时候同步完之后空格会变成tab造成front-matter无法被插件识别，就会出现front-matter重叠的情况<a href="https://github.com/x-cold/yuque-hexo/issues/45">issues#45</a></p><p><strong>大功告成！在语雀上正常发布一篇文章即可自动触发serverless函数提交给travis-ci构建博客</strong></p><h1 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h1><h2 id="serverless-python版"><a href="#serverless-python版" class="headerlink" title="serverless python版"></a>serverless python版</h2><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/serverlesspython版.png" alt=""></p><h2 id="私人图床：onedrive"><a href="#私人图床：onedrive" class="headerlink" title="私人图床：onedrive"></a>私人图床：onedrive</h2><p>使用方法非常简单，具体步骤如下：</p><ul><li><p>注册账户，已有的可直接略过。</p></li><li><p>登录OneDrive，上传需要外链的图片。</p></li><li><p>在图片上右键选择“嵌入”按钮，再在弹出的窗口中点击“生成”选项。</p></li><li><p>将链接复制到需要展示的地方。</p></li></ul><p>来自 <a href="https://osk.ink/archives/12/">https://osk.ink/archives/12/</a> </p><h2 id="travis渲染时报错："><a href="#travis渲染时报错：" class="headerlink" title="travis渲染时报错："></a>travis渲染时报错：</h2><blockquote><p>travis /bin/bash^M: bad interpreter: No such file or directory</p><p>If you use <strong>Sublime Text</strong> on Windows or Mac to edit your scripts:</p><p>Click on View &gt; Line Endings &gt; Unix and <strong>save</strong> the file again.</p></blockquote><p>原因：编码问题，如下解决即可</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/travis编码报错解决.png" alt=""></p><h2 id="Ubuntu安装Proxychains"><a href="#Ubuntu安装Proxychains" class="headerlink" title="Ubuntu安装Proxychains"></a>Ubuntu安装Proxychains</h2><p>Proxychains是Linux上一款全局代理工具，通过Hook Socket函数实现透明代理，这和Windows上的Proxifier有点类似。 在Ubuntu上安装Proxychains的方法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install proxychains </span><br></pre></td></tr></table></figure><p>安装的是3.1版本，配置文件的路径是：/etc/proxychains.conf，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"># proxychains.conf  VER 3.1</span><br><span class="line">#</span><br><span class="line">#        HTTP, SOCKS4, SOCKS5 tunneling proxifier with DNS.</span><br><span class="line">#</span><br><span class="line"># The option below identifies how the ProxyList is treated.</span><br><span class="line"># only one option should be uncommented at time,</span><br><span class="line"># otherwise the last appearing option will be accepted</span><br><span class="line">#</span><br><span class="line">#dynamic_chain</span><br><span class="line">#</span><br><span class="line"># Dynamic - Each connection will be done via chained proxies</span><br><span class="line"># all proxies chained in the order as they appear in the list</span><br><span class="line"># at least one proxy must be online to play in chain</span><br><span class="line"># (dead proxies are skipped)</span><br><span class="line"># otherwise EINTR is returned to the app</span><br><span class="line">#</span><br><span class="line">strict_chain</span><br><span class="line">#</span><br><span class="line"># Strict - Each connection will be done via chained proxies</span><br><span class="line"># all proxies chained in the order as they appear in the list</span><br><span class="line"># all proxies must be online to play in chain</span><br><span class="line"># otherwise EINTR is returned to the app</span><br><span class="line">#</span><br><span class="line">#random_chain</span><br><span class="line">#</span><br><span class="line"># Random - Each connection will be done via random proxy</span><br><span class="line"># (or proxy chain, see  chain_len) from the list.</span><br><span class="line"># this option is good to test your IDS :)</span><br><span class="line"># Make sense only if random_chain</span><br><span class="line">#chain_len = 2</span><br><span class="line"># Quiet mode (no output from library)</span><br><span class="line">#quiet_mode</span><br><span class="line"># Proxy DNS requests - no leak for DNS data</span><br><span class="line">proxy_dns </span><br><span class="line"># Some timeouts in milliseconds</span><br><span class="line">tcp_read_time_out 15000</span><br><span class="line">tcp_connect_time_out 8000</span><br><span class="line"># ProxyList format</span><br><span class="line">#       type  host  port [user pass]</span><br><span class="line">#       (values separated by &#x27;tab&#x27; or &#x27;blank&#x27;)</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#        Examples:</span><br><span class="line">#</span><br><span class="line">#               socks5  192.168.67.78   1080    lamer   secret</span><br><span class="line">#               http    192.168.89.3    8080    justu   hidden</span><br><span class="line">#               socks4  192.168.1.49    1080</span><br><span class="line">#               http    192.168.39.93   8080</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#       proxy types: http, socks4, socks5</span><br><span class="line">#        ( auth types supported: &quot;basic&quot;-http  &quot;user/pass&quot;-socks )</span><br><span class="line">#</span><br><span class="line">[ProxyList]</span><br><span class="line"># add proxy here ...</span><br><span class="line"># meanwile</span><br><span class="line"># defaults set to &quot;tor&quot;</span><br><span class="line">socks4         127.0.0.1 9050</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Proxychains支持HTTP（HTTP-Connect）、SOCKS4和SOCKS5三种类型的代理，需要注意的是：配置代理服务器只能使用ip地址，不能使用域名，否则会连不上。</p><p>Proxychains支持3种模式： </p><ol><li>动态模式 按照配置的代理顺序连接，不存活的代理服务器会被跳过 </li><li>严格模式     按照配置的代理顺序连接，必须保证所有代理服务器都是存活的，否则会连接失败 </li><li>随机模式     随机选择一台代理服务器连接，也可以使用代理链</li></ol><p>如果不需要代理DNS的话，可以注释掉proxy_dns这行。</p><p>使用的时候在命令行前加上proxychains即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-pc:~# proxychains telnet [www.baidu.com](http://www.baidu.com) 80 ProxyChains-3.1 ([http://proxychains.sf.net](http://proxychains.sf.net/)) Trying 14.215.177.37… |R-chain|-&lt;&gt;-10.0.0.10:8080-&lt;&gt;&lt;&gt;-14.215.177.37:80-&lt;&gt;&lt;&gt;-OK Connected to [www.a.shifen.com](http://www.a.shifen.com). Escape character is ‘^]’. </span><br><span class="line"></span><br><span class="line">proxychains命令其实是个脚本文件，内容如下：</span><br><span class="line"></span><br><span class="line">\#!/bin/sh</span><br><span class="line"> echo &quot;ProxyChains-3.1 (http://proxychains.sf.net)&quot;</span><br><span class="line"> if [ $# = 0 ] ; then</span><br><span class="line">     echo &quot; usage:&quot;</span><br><span class="line">     echo &quot;     proxychains &lt;prog&gt; [args]&quot;</span><br><span class="line">     exit</span><br><span class="line"> fi</span><br><span class="line"> export LD_PRELOAD=libproxychains.so.3</span><br><span class="line"> exec &quot;$@&quot;</span><br></pre></td></tr></table></figure><p>它的目的是设置LD_PRELOAD环境变量，以便创建的新进程会加载libproxychains.so.3，这个so的作用是Hook Socket函数。因此，也可以在当前shell中执行： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_PRELOAD=libproxychains.so.3</span><br></pre></td></tr></table></figure><p>这样之后执行的命令都会使用代理访问。</p><p>不过这个版本有个问题，配置代理后所有的连接都会走代理，包括对回环地址的访问。这并不是我们所期望的，幸好有个版本提供了解决方案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/rofl0r/proxychains cd proxychains ./configure make make install </span><br></pre></td></tr></table></figure><p>安装后在配置文件中加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localnet 127.0.0.0/255.0.0.0 </span><br></pre></td></tr></table></figure><p>安装后的命令是proxychains4，因此可以和旧版本命令并存。这样对于回环地址就可以绕过代理，使用直连了。</p><p>相对于Proxifier而言，这种方式还是弱了一点，毕竟有时候我们还是需要根据不同的情况使用不同的代理服务器。</p><h2 id="有东西传不到github上去？"><a href="#有东西传不到github上去？" class="headerlink" title="有东西传不到github上去？"></a>有东西传不到github上去？</h2><p>删掉.deploy_git:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- rm -rf .deploy_git/</span><br></pre></td></tr></table></figure><h2 id="语雀防盗链解决办法："><a href="#语雀防盗链解决办法：" class="headerlink" title="语雀防盗链解决办法："></a>语雀防盗链解决办法：</h2><p>临时方案是直接在 html 模版中添加 head 进行绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p> (来自 <a href="https://github.com/x-cold/yuque-hexo/issues/41">https://github.com/x-cold/yuque-hexo/issues/41</a> )</p><p>注：对于butterfly主题的话对themes\Butterfly\layout\includes\layout.pug修改head部分即可，但是会造成网站访客数和文章阅读数无法加载</p><h2 id="gem失败"><a href="#gem失败" class="headerlink" title="gem失败"></a>gem失败</h2><p>apt-get install ruby-dev </p><h2 id="Windows-的-Linux-子系统的文件同步和-Windows-不是实时的问题"><a href="#Windows-的-Linux-子系统的文件同步和-Windows-不是实时的问题" class="headerlink" title="Windows 的 Linux 子系统的文件同步和 Windows 不是实时的问题"></a>Windows 的 Linux 子系统的文件同步和 Windows 不是实时的问题</h2><p>如果使用windows子系统的Ubuntu的话，可能会出现Windows 的 Linux 子系统的文件同步和 Windows 不是实时的问题（来自 <a href="https://www.zhihu.com/question/318832524/answer/641951256">https://www.zhihu.com/question/318832524/answer/641951256</a> ）</p><p>你可以在Windows下存储文件，然后在wsl中使用/mnt/盘符/路径 访问</p><p>你也可以在1903更新发布后在Linux rootfs中存储文件，Windows程序使用\wsl$\Ubuntu\unix路径 访问</p><p>唯独不正确的操作是找到AppData里rootfs文件夹直接用Windows程序修改，因为这里面的文件在NTFS中除了存储文件内容，Windows文件元数据，还存储unix文件元数据（比如rwx权限，unix用户组和用户），你创建的文件并不具有这样的属性，因此会导致权限混乱。</p><p>详见：<a href="https://link.zhihu.com/?target=https%3A//blogs.msdn.microsoft.com/commandline/2016/11/17/do-not-change-linux-files-using-windows-apps-and-tools/">https://blogs.msdn.microsoft.com/commandline/2016/11/17/do-not-change-linux-files-using-windows-apps-and-tools/</a></p><p>1903（19H1，20195月更新）的改动</p><p><strong>Linux Files inside of File Explorer</strong></p><p>The best way to get started with this feature is to open your Linux files in File Explorer! To do this, open your favorite distro, make sure your current folder is your Linux home directory, and type in:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explorer.exe .</span><br></pre></td></tr></table></figure><p>来自 <a href="https://devblogs.microsoft.com/commandline/whats-new-for-wsl-in-windows-10-version-1903/">https://devblogs.microsoft.com/commandline/whats-new-for-wsl-in-windows-10-version-1903/</a> </p><h2 id="npm淘宝源的问题"><a href="#npm淘宝源的问题" class="headerlink" title="npm淘宝源的问题"></a>npm淘宝源的问题</h2><p>这玩意有毛病，经常会出奇奇怪怪的bug，最好的方式还是挂代理</p><p>C盘用户文件夹下的.npmrc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy=http://127.0.0.1:1081</span><br><span class="line">https-proxy=http://127.0.0.1:1081/</span><br></pre></td></tr></table></figure><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li><p>[语雀+TravisCI+Serverless]: <a href="https://segmentfault.com/a/1190000017797561">https://segmentfault.com/a/1190000017797561</a></p></li><li><p>[【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析]: <a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">https://www.simon96.online/2018/10/12/hexo-tutorial/</a></p></li><li><p>[使用Travis CI自动部署Hexo博客]: <a href="https://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/">https://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/</a></p></li><li><p>[hexo-theme-butterfly安裝文檔]: <a href="https://jerryc.me/posts/21cfbf15/">https://jerryc.me/posts/21cfbf15/</a></p></li><li><p>[Hexo 博客终极玩法：云端写作，自动部署]: <a href="https://segmentfault.com/a/1190000017797561">https://segmentfault.com/a/1190000017797561</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客又双叒叕上线了，这次使用的是hexo + Github Pages + travis CI + 语雀 + serverless + onedrive图床，部署完成之后可以直接在语雀上编辑文章然后自动发布到博客，云端写作不是梦hhh &lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="博客" scheme="https://www.happyshark.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="https://www.happyshark.cn/tags/hexo/"/>
    
    <category term="travis CI" scheme="https://www.happyshark.cn/tags/travis-CI/"/>
    
    <category term="serverless" scheme="https://www.happyshark.cn/tags/serverless/"/>
    
    <category term="语雀" scheme="https://www.happyshark.cn/tags/%E8%AF%AD%E9%9B%80/"/>
    
  </entry>
  
</feed>
