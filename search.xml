<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SNNU校园网白嫖&amp;校园网nas搭建指南</title>
      <link href="/2022/05/10/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
      <url>/2022/05/10/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>12月份和3月份的疫情封宿舍导致只能在宿舍学（mo）习（yu），校园网的免费额度严重不够用，听闻办公区（包括且不限于教室、实验室、图书馆）校园网是免费的，所以有了这篇如果在宿舍区实现校园网免流指南和一些进阶技巧。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>SNNU校园网的收费原理如下：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU校园网白嫖&amp;校园网nas搭建指南/%E7%BB%93%E6%9E%84.png" alt=""></p><ul><li>如果你的设备是处在宿舍区（黄色部分），那在这个区域产生的外网流量（经由中央网关发送至互联网产生的流量）会经过计费网关进行计费，在校园宽带自助服务系统的黑色部分就是计费流量<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220510235206802.png" alt="image-20220510235206802"></li><li><p>如果你的设备在办公区（绿色部分），那在那在这个区域产生的外网流量（经由中央网关发送至互联网产生的流量）不会产生任何费用，在校园宽带自助服务系统中的流量详情都是绿色的<img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220510235546091.png" alt="image-20220510235546091"></p></li><li><p>如果如果你的设备在宿舍区（绿色部分），那在那在这个区域连接办公区设备产生的内网流量（经由中央网关发送至办公区的流量）不会产生任何费用，在校园宽带自助服务系统中的流量详情中校内流量就属于这种<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220510235809299.png" alt="image-20220510235809299"></p></li><li>*如果你的设备在任意区域，那通过校园网ipv6访问外网产生的流量是免费的，在校园宽带自助服务系统中的流量详情中教育网流量就属于这种<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220510235956347.png" alt="image-20220510235956347"></li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ul><li>我们就可以根据原理1、2、3在办公区可以连外网的域内搭一个vpn服务器，让宿舍区的电脑走校内流量（原理3）链接vpn服务器（上图的路线1），在通过vpn服务器将数据包转发到外网（原理2）实现免流（路线2），下面详细介绍这种方法</li><li>*也可以在外网搭一个ipv6的服务器，通过将所有数据包走ipv6转发给公网服务器（原理4）实现免流，这个方法按下不表</li></ul><h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><h2 id="VPN服务器搭建"><a href="#VPN服务器搭建" class="headerlink" title="VPN服务器搭建"></a>VPN服务器搭建</h2><h3 id="linux（部署到路由器上）"><a href="#linux（部署到路由器上）" class="headerlink" title="linux（部署到路由器上）"></a>linux（部署到路由器上）</h3><p>linux的话github上面有很多一键安装脚本，安装就略过了，以华硕老毛子固件配置为例：</p><ol><li><p>办公区网络搭建vpn服务器，我的路由器（斐讯k2）刷的华硕老毛子自带<code>vpn服务器</code>功能可以直接用，如果是在路由下级建的vpn服务器要在路由器做好端口转发（或者直接dmz主机也行）</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220511000846748.png" alt="image-20220511000846748"></p></li><li><p>在<code>客户端账号</code>中配置用户名和密码，然后点<code>+</code>确定<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220511001047914.png" alt="image-20220511001047914"></p></li></ol><h3 id="windows（如果实验室没有路由器网线直接链接到电脑上的话可以使用这种方案）"><a href="#windows（如果实验室没有路由器网线直接链接到电脑上的话可以使用这种方案）" class="headerlink" title="windows（如果实验室没有路由器网线直接链接到电脑上的话可以使用这种方案）"></a>windows（如果实验室没有路由器网线直接链接到电脑上的话可以使用这种方案）</h3><ol><li><p>桌面按win+R键打开运行，输入”ncpa.cpl”回车打开改适配器设置界面，点击文件-新建传入连接（如果没有文件选项卡的话请按Alt+F）</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220512182152910.png" alt="image-20220512182152910"></p></li><li><p>添加用户，自定义用户名和密码（这里的用户名和密码就是客户端链接的时候需要输入的用户名和密码）,点击下一步<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220512182551894.png" alt="image-20220512182551894"></p></li><li><p>勾选<code>通过internet</code>选项，点击下一步<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220512182646078.png" alt="image-20220512182646078"></p></li><li><p>选择ipv4，然后选择属性，指定ip地址（如果没有全局梯子/nas的需求也可以直接使用DHCP分配），点击允许访问<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220512182954851.png" alt="image-20220512182954851"></p><blockquote><p>下面还需要放行1723端口和gre协议，如果电脑上级接了路由器那这一步需要在路由器里设置端口转发，如果是网线直接连的电脑那按下面的步骤设置</p></blockquote></li><li><p>打开<code>控制面板</code>-<code>系统和安全</code>-<code>windows Defender防火墙</code>-点击左侧的<code>高级设置</code>-点击左侧的<code>入站规则</code>-在点击右侧的<code>新建规则</code>,添加以下两个协议：</p><ul><li>端口-选择tcp协议，特定本地端口处填1723-名称填pptp1723，其他默认。<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220512183536178.png" alt="image-20220512183536178"></li><li>自定义-协议选择GRE-名称填gre，其他默认<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220512183506585.png" alt="image-20220512183506585"></li></ul></li></ol><blockquote><p>到这一步vpn服务就配置完了，目前有个已知的问题如果电脑上开了杀毒软件会导致后面客户端连接失败，建议关掉用windows defender就好。</p></blockquote><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><ol><li><p>宿舍区电脑（windows）打开设置-网络和Internet-vpn-添加vpn链接，添加配置信息后保存</p><ul><li>vpn提供商：windows内置</li><li>链接名称：自己填就好，这是个备注名</li><li>服务器名称或地址：vpn服务器所在域的ip地址，一般是10.xxx.xxx.xxx</li><li>vpn类型：自动</li><li>登录信息类型：用户名和密码</li><li>用户名：在vpn服务器中设置的用户名</li><li>密码：在vpn服务器中设置的密码</li></ul></li><li><p>宿舍区电脑通过web网关认证登陆校园网</p></li><li><p>链接vpn</p></li><li><p>最终效果，网络和vpn应该都是已连接状态<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220511001631003.png" alt="image-20220511001631003"></p><blockquote><p><strong>如果配置vpn服务器时使用了第二种方法（部署在windows上)还需要进行以下操作</strong></p></blockquote></li><li><p>桌面按win+R键打开运行，输入”ncpa.cpl”回车打开改适配器设置界面，右键vpn链接-<code>属性</code>-<code>网络</code>-点击<code>ipv4</code>-<code>属性</code>-<code>高级</code>-关闭<code>在远程网络上使用默认网关</code>，点确定<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220512190801340.png" alt="image-20220512190801340"></p></li></ol><blockquote><p>如果不放心可以用一下然后登陆校园宽带自助服务系统<a href="http://202.117.144.205/zili/online_list.php">http://202.117.144.205/zili/online_list.php</a> 查看流量使用情况，正常的情况应该是收费流量很少校内流量很多<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220511001954532.png" alt="image-20220511001954532"></p></blockquote><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="nas映射，远程桌面"><a href="#nas映射，远程桌面" class="headerlink" title="nas映射，远程桌面"></a>nas映射，远程桌面</h2><p>上一步配置成功后所有的流量应该就被转发至vpn服务器了，宿舍的电脑，办公区vpn服务器所在域内其他设备都处于一个局域网中，比如实验室nas的ip为192.168.123.1，实验室电脑的ip为192.168.123.3，宿舍电脑链接vpn后在其所在域的ip地址是192.168.123.2，那就可以把实验室的nas映射到宿舍的电脑上，或者通过实验室电脑内网远控宿舍电脑（高速低延迟稳定性极高）</p><h3 id="nas映射配置"><a href="#nas映射配置" class="headerlink" title="nas映射配置"></a>nas映射配置</h3><ol><li>宿舍电脑打开文件管理器，在最上面输入<code>\\+nas的ip</code>，输入用户名和密码即可链接nas<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220511085042144.png" alt="image-20220511085042144"></li><li>然后选择任意一个文件夹，右键-映射网络驱动器即可将这个文件夹映射到本地</li></ol><h3 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h3><p>实验室电脑打开<code>远程桌面</code>ip输入宿舍电脑的局域网ip（192.168.123.2），用户名和密码是宿舍电脑。点击链接即可进行远程控制<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220511003138324.png" alt="image-20220511003138324"></p><h2 id="统一梯子服务"><a href="#统一梯子服务" class="headerlink" title="统一梯子服务"></a>统一梯子服务</h2><p>当然既然一个域内都有这么多设备了，那也可以在其中一台电脑上搭一个梯子服务，挂好局域网链接配置之后在其他电脑上配置梯子所在的局域网ip+端口即可让域内所有设备都获得科学上网的能力。以chrome插件switchyOmega为例：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BD%E5%AB%96&amp;%E6%A0%A1%E5%9B%AD%E7%BD%91nas%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/image-20220511003509676.png" alt="image-20220511003509676"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓饭</title>
      <link href="/2022/02/12/%E6%8A%93%E9%A5%AD/"/>
      <url>/2022/02/12/%E6%8A%93%E9%A5%AD/</url>
      
        <content type="html"><![CDATA[<hr><ol><li><p>羊肉切开洗净，把水晾干，油锅加盐（不崩），中火把肉放进去抄抄，炒出水之后盖上锅盖把水闷干。</p><blockquote><p>过几分钟就开盖翻炒一下。 </p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132430021.png" alt="image-20220212132430021"></p></li><li><p>闷干之后出锅备用，油留锅里别倒掉<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132517077.png" alt="image-20220212132517077"></p></li><li><p>胡萝卜（3个）削皮切条，把米洗净备用<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132540721.png" alt="image-20220212132540721"></p></li><li><p>胡萝卜倒进锅里中火炒炒（油少了可以加些油），加些盐<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132605423.png" alt="image-20220212132605423"></p></li><li><p>抄完倒进高压锅，再往锅里加些水，米撒到胡萝卜上面，肉放到米上面。盖上锅盖大火烧到高压锅喷气，火改小一些（改到泄压阀不那么暴力为止）压10~15分钟米熟为止<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132627827.png" alt="image-20220212132627827"><br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132651559.png" alt="image-20220212132651559"></p></li><li><p>关火高压锅放一边泄气，气没了就可以开锅享受美食啦</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 厨房里的秘密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 家的味道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蒸面条</title>
      <link href="/2022/02/11/%E8%92%B8%E9%9D%A2%E6%9D%A1/"/>
      <url>/2022/02/11/%E8%92%B8%E9%9D%A2%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<hr><ol><li>蒸锅加水，放手工面大火蒸到水开，改中火蒸十~十五分钟<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212131748569.png" alt="image-20220212131748569"></li><li>猪肉切片，蒜薹洗干净切成一段一段的，姜切成片，切一节葱备用，也可选干辣椒调色<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212131830715.png" alt="image-20220212131830715"></li><li>锅里放油，加猪肉炒变色放生抽调色，放姜，葱，干辣椒，蒜薹炒半熟，加咸盐，出锅备用<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212131900050.png" alt="image-20220212131900050"></li><li>面蒸好之后出锅加些油（如果面太干加些水）拌开，蒸锅再加水大火煮水<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212131921751.png" alt="image-20220212131921751"></li><li>加生抽调颜色，酱油，咸盐调味，可选十三香花椒粉鸡精。继续拌开<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212131948425.png" alt="image-20220212131948425"></li><li>把前面炒的菜倒进去继续拌开，尝下味道淡了加生抽调味，干的话再加点油。一定要拌开不能缠一块<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132003990.png" alt="image-20220212132003990"></li><li>蒸锅水开了之后关火，先放面再放菜（避免菜从篦子洞掉下去），盖上锅盖大火烧一会锅里充满蒸汽之后改小火慢慢焖蒸10~15分钟入味。<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132030268.png" alt="image-20220212132030268"></li><li>关火出锅，拌辣椒酱，香菇酱。味道好极啦<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212132108982.png" alt="image-20220212132108982"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 厨房里的秘密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 家的味道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>炒扇贝肉</title>
      <link href="/2022/02/10/%E7%82%92%E6%89%87%E8%B4%9D%E8%82%89/"/>
      <url>/2022/02/10/%E7%82%92%E6%89%87%E8%B4%9D%E8%82%89/</url>
      
        <content type="html"><![CDATA[<hr><ol><li><p>把贝壳肉清理出来，去掉内胆杂质</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151231250.png" alt="image-20220210151231250"></p></li><li><p>锅里加油，放姜和辣椒抄一抄出锅备用</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151256350.png" alt="image-20220210151256350"></p></li><li><p>加油放葱姜香锅，放扇贝肉炒熟，改中火加酱油调色，耗油调味，料酒去腥</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151314665.png" alt="image-20220210151314665"></p></li><li><p>把辣椒加进去拌开，尝尝咸淡，淡的话可以加点盐。小火收汁出锅</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151339498.png" alt="image-20220210151339498"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 厨房里的秘密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 家的味道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>炒烤肉</title>
      <link href="/2022/02/10/%E7%82%92%E7%83%A4%E8%82%89/"/>
      <url>/2022/02/10/%E7%82%92%E7%83%A4%E8%82%89/</url>
      
        <content type="html"><![CDATA[<hr><ol><li><p>羊肉拿出来化成半冻状态，切片</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151607906.png" alt="image-20220210151607906"></p></li><li><p>可选步骤：如果想吃软一点的烤肉可在肉里面加些勾芡淀粉，抓一抓拌匀</p><blockquote><p>就和揉面一样把肉放到盆里，然后加点淀粉开始揉，揉开就ok</p></blockquote></li><li><p>锅里放油防粘锅（看一下肥肉多不多，多的话油可以少放点），放肉小火炒</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151726064.png" alt="image-20220210151726064"></p></li><li><p>炒到变色，放点盐，辣椒面</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151756289.png" alt="image-20220210151756289"></p></li><li><p>炒熟，在放孜然，关火拌开出锅</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151817390.png" alt="image-20220210151817390"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 厨房里的秘密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 家的味道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红烧多宝鱼</title>
      <link href="/2022/02/10/%E7%BA%A2%E7%83%A7%E5%A4%9A%E5%AE%9D%E9%B1%BC/"/>
      <url>/2022/02/10/%E7%BA%A2%E7%83%A7%E5%A4%9A%E5%AE%9D%E9%B1%BC/</url>
      
        <content type="html"><![CDATA[<hr><ol><li><p>剪掉尾巴和鱼鳍，把鱼鳃和内胆掏干净（边上有个小孔从那开始沿着黑色部分剪开，里面掏干净不要弄破内胆）</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210150909686.png" alt="image-20220210150909686"></p></li><li><p>锅里倒油，放葱和姜香锅，然后加酱油，耗油，水</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210150936619.png" alt="image-20220210150936619"></p></li><li><p>放入鱼，大火烧开，有沫（血）的话可以撇一下</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210150955994.png" alt="image-20220210150955994"></p></li><li><p>放料酒去腥，在放点葱调色，小伙炖一会大火收汁。出锅之前放点鸡精提味，在撇一下沫</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151013356.png" alt="image-20220210151013356"></p></li><li><p>水蒸发的差不多了收汁出锅</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220210151038891.png" alt="image-20220210151038891"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 厨房里的秘密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 家的味道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蒸饭（高压锅速成版）</title>
      <link href="/2022/02/10/%E8%92%B8%E9%A5%AD%EF%BC%88%E9%AB%98%E5%8E%8B%E9%94%85%E9%80%9F%E6%88%90%E7%89%88%EF%BC%89/"/>
      <url>/2022/02/10/%E8%92%B8%E9%A5%AD%EF%BC%88%E9%AB%98%E5%8E%8B%E9%94%85%E9%80%9F%E6%88%90%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<hr><ol><li><p>高压锅里面放水，米饭洗净装到碗里放进高压锅。当然也可以在下面水里面放个玉米，或者在上面放个红薯利用下空间hhh</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210150208622.png" alt="image-20220210150208622"></p></li><li><p>盖上盖子大火烧到往外喷气开始，火稍微关小点（避免压力太高，也不要太小了就不喷气了）继续倒计时10分钟</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210150353001.png" alt="image-20220210150353001"></p></li><li><p>关火，等压力阀下去再焖十来分钟出锅就行~要是时间不够连锅放到冷水里面冷却一下</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/20220210150427.png" alt=""></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 厨房里的秘密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 家的味道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清蒸贝壳</title>
      <link href="/2022/02/09/%E6%B8%85%E8%92%B8%E8%B4%9D%E5%A3%B3/"/>
      <url>/2022/02/09/%E6%B8%85%E8%92%B8%E8%B4%9D%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<hr><ol><li><p>清洗一下贝壳肉</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220209225923639.png" alt=""></p></li><li><p>清水煮一碗粉丝</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220209230241958.png" alt="image-20220209230241958"></p></li><li><p>调汁：葱姜耗油水料酒生抽</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220209230307708.png" alt="image-20220209230307708"></p></li><li><p>每个贝壳上面放点粉丝，再加汁，上蒸锅，加水大火蒸六到十分钟</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220209230341168.png" alt="image-20220209230341168"></p></li><li><p>关火出锅</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220209230404457.png" alt="image-20220209230404457"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 厨房里的秘密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 家的味道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>糖醋排骨</title>
      <link href="/2022/02/09/%E7%B3%96%E9%86%8B%E6%8E%92%E9%AA%A8/"/>
      <url>/2022/02/09/%E7%B3%96%E9%86%8B%E6%8E%92%E9%AA%A8/</url>
      
        <content type="html"><![CDATA[<hr><ol><li><p>白糖淀粉西红柿酱加水配汁</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120640514.png" alt="image-20220210120640514"></p></li><li><p>锅里加汁，放红烧排骨（去调料）炒熟</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120723628.png" alt="image-20220210120723628"></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120741093.png" alt="image-20220210120741093"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 厨房里的秘密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 家的味道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>紫菜蛋花汤</title>
      <link href="/2022/02/09/%E7%B4%AB%E8%8F%9C%E8%9B%8B%E8%8A%B1%E6%B1%A4/"/>
      <url>/2022/02/09/%E7%B4%AB%E8%8F%9C%E8%9B%8B%E8%8A%B1%E6%B1%A4/</url>
      
        <content type="html"><![CDATA[<hr><ol><li><p>锅里加水，可选放一些虾皮一起煮等，水开</p></li><li><p>水开了之后改中火，放番茄丁（番茄也可以） 紫菜，盐，可选胡椒粉（调辣） ，淀粉（调粘稠度），耗油（调鲜调味）<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212133040186.png" alt="image-20220212133040186"></p></li><li><p>打蛋花，对着冒泡的地方慢慢往里滴<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212133107802.png" alt="image-20220212133107802"></p></li><li><p>放菠菜（菠菜第二步放也可以，量大的话推荐最后一步放菠菜，因为菠菜煮时间长容易老），浮起来放香油，可选鸡精和味精，煮一会就可以出锅啦<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/food/image-20220212133136839.png" alt="image-20220212133136839"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 厨房里的秘密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 家的味道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红烧虾</title>
      <link href="/2022/02/09/%E7%BA%A2%E7%83%A7%E8%99%BE/"/>
      <url>/2022/02/09/%E7%BA%A2%E7%83%A7%E8%99%BE/</url>
      
        <content type="html"><![CDATA[<hr><ol><li><p>调汁儿：小葱 料酒 姜 鸡精 耗油 生抽 酱油</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210121235203.png" alt="image-20220210121235203"></p></li><li><p>锅放油，倒虾，炒制变色，放汁</p><p>-<img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210121258320.png" alt="image-20220210121258320"></p></li><li><p>放水大火收汁，不用盖锅盖，最后放鸡精调味出锅</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210121406157.png" alt="image-20220210121406157"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 厨房里的秘密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 家的味道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红烧鱼</title>
      <link href="/2022/02/09/%E7%BA%A2%E7%83%A7%E9%B1%BC/"/>
      <url>/2022/02/09/%E7%BA%A2%E7%83%A7%E9%B1%BC/</url>
      
        <content type="html"><![CDATA[<hr><ol><li><p>把鱼鳃 内胆 鱼鳞处理好，抹盐淹一会</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120226539.png" alt="image-20220210120226539"></p></li><li><p>锅里倒油至冒烟放鱼煎一下（油热不粘锅）</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120402098.png" alt="image-20220210120402098"></p></li><li><p>放酱油，料酒，耗油，葱，蒜，可选辣椒，然后改小火，盖上锅盖炖到水干（大概七八分钟）</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120419613.png" alt="image-20220210120419613"></p></li><li><p>4分钟左右可以开锅尝一下咸淡，加盐，放点白糖提鲜继续炖，熟了之后改大火收汁</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120439074.png" alt="image-20220210120439074"></p></li><li><p>最后再加点葱提色，鸡精提鲜，出锅</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master//food/image-20220210120458363.png" alt="image-20220210120458363"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 厨房里的秘密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 家的味道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令手册</title>
      <link href="/2021/10/21/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/"/>
      <url>/2021/10/21/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="关机-重启-注销"><a href="#关机-重启-注销" class="headerlink" title="关机/重启/注销"></a>关机/重启/注销</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>shutdown -h now</td><td>即刻关机</td></tr><tr><td>shutdown -h 10</td><td>10分钟后关机</td></tr><tr><td>shutdown -h 11:00</td><td>11：00关机</td></tr><tr><td>shutdown -h +10</td><td>预定时间关机（10分钟后）</td></tr><tr><td>shutdown -c</td><td>取消指定时间关机</td></tr><tr><td>shutdown -r now</td><td>重启</td></tr><tr><td>shutdown -r 10</td><td>10分钟之后重启</td></tr><tr><td>shutdown -r 11:00</td><td>定时重启</td></tr><tr><td>reboot</td><td>重启</td></tr><tr><td>init 6</td><td>重启</td></tr><tr><td>init 0</td><td>⽴刻关机</td></tr><tr><td>telinit 0</td><td>关机</td></tr><tr><td>poweroff</td><td>⽴刻关机</td></tr><tr><td>halt</td><td>关机</td></tr><tr><td>sync</td><td>buff数据同步到磁盘</td></tr><tr><td>logout</td><td>退出登录Shell</td></tr></tbody></table></div><h1 id="系统信息和性能查看"><a href="#系统信息和性能查看" class="headerlink" title="系统信息和性能查看"></a>系统信息和性能查看</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>uname -a</td><td>查看内核/OS/CPU信息</td></tr><tr><td>uname -r</td><td>查看内核版本</td></tr><tr><td>uname -m</td><td>查看处理器架构</td></tr><tr><td>arch</td><td>查看处理器架构</td></tr><tr><td>hostname</td><td>查看计算机名</td></tr><tr><td>who</td><td>显示当前登录系统的⽤户</td></tr><tr><td>who am i</td><td>显示登录时的⽤户名</td></tr><tr><td>whoami</td><td>显示当前⽤户名</td></tr><tr><td>cat /proc/version</td><td>查看linux版本信息</td></tr><tr><td>cat /proc/cpuinfo</td><td>查看CPU信息</td></tr><tr><td>cat /proc/interrupts</td><td>查看中断</td></tr><tr><td>cat /proc/loadavg</td><td>查看系统负载</td></tr><tr><td>uptime</td><td>查看系统运⾏时间、⽤户数、负载</td></tr><tr><td>env</td><td>查看系统的环境变量</td></tr><tr><td>lsusb -tv</td><td>查看系统USB设备信息</td></tr><tr><td>lspci -tv</td><td>查看系统PCI设备信息</td></tr><tr><td>lsmod</td><td>查看已加载的系统模块</td></tr><tr><td>grep MemTotal /proc/meminfo</td><td>查看内存总量</td></tr><tr><td>grep MemFree /proc/meminfo</td><td>查看空闲内存量</td></tr><tr><td>free -m</td><td>查看内存⽤量和交换区⽤量</td></tr><tr><td>date</td><td>显示系统⽇期时间</td></tr><tr><td>cal 2021</td><td>显示2021⽇历表</td></tr><tr><td>top</td><td>动态显示cpu/内存/进程等情况</td></tr><tr><td>vmstat 1 20</td><td>每1秒采⼀次系统状态，采20次</td></tr><tr><td>iostat</td><td>查看io读写/cpu使⽤情况</td></tr><tr><td>查看io读写/cpu使⽤情况</td><td>查询cpu使⽤情况（1秒⼀次，共10次）</td></tr><tr><td>sar -d 1 10</td><td>查询磁盘性能</td></tr></tbody></table></div><h1 id="磁盘和分区"><a href="#磁盘和分区" class="headerlink" title="磁盘和分区"></a>磁盘和分区</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>fdisk -l</td><td>查看所有磁盘分区</td></tr><tr><td>swapon -s</td><td>查看所有交换分区</td></tr><tr><td>df -h</td><td>查看磁盘使⽤情况及挂载点</td></tr><tr><td>df -hl</td><td>同上</td></tr><tr><td>du -sh /dir</td><td>查看指定某个⽬录的⼤⼩</td></tr><tr><td>du -sk * \</td><td>sort -rn</td><td>从⾼到低依次显示⽂件和⽬录⼤⼩</td></tr><tr><td>mount /dev/hda2 /mnt/hda2</td><td>挂载hda2盘</td></tr><tr><td>mount -t ntfs /dev/sdc1 /mnt/usbhd1</td><td>指定⽂件系统类型挂载（如ntfs）</td></tr><tr><td>mount -o loop xxx.iso /mnt/cdrom</td><td>挂 载 iso ⽂ 件</td></tr><tr><td>umount -v /dev/sda1</td><td>通过设备名卸载</td></tr><tr><td>umount -v /mnt/mymnt</td><td>通过挂载点卸载</td></tr><tr><td>fuser -km /mnt/hda1</td><td>强制卸载(慎⽤)</td></tr></tbody></table></div><h1 id="⽤户和⽤户组"><a href="#⽤户和⽤户组" class="headerlink" title="⽤户和⽤户组"></a>⽤户和⽤户组</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>useradd codesheep</td><td>创建⽤户</td></tr><tr><td>userdel -r codesheep</td><td>删除⽤户</td></tr><tr><td>usermod -g group_name user_name</td><td>修改⽤户的组</td></tr><tr><td>usermod -aG group_name user_name</td><td>将⽤户添加到组</td></tr><tr><td>usermod -s /bin/ksh -d /home/codepig –g dev codesheep</td><td>修改⽤户codesheep的登录Shell、主⽬录以及⽤户组</td></tr><tr><td>groups test</td><td>查看test⽤户所在的组</td></tr><tr><td>groupadd group_name</td><td>创建⽤户组</td></tr><tr><td>groupdel group_name</td><td>删除⽤户组</td></tr><tr><td>groupmod -n new_name old_name</td><td>重命名⽤户组</td></tr><tr><td>su - user_name</td><td>su - user_name</td></tr><tr><td>passwd</td><td>修改⼝令</td></tr><tr><td>passwd codesheep</td><td>修改某⽤户的⼝令</td></tr><tr><td>w</td><td>查看活动⽤户</td></tr><tr><td>id codesheep</td><td>查看指定⽤户codesheep信息</td></tr><tr><td>last</td><td>查看⽤户登录⽇志</td></tr><tr><td>crontab -l</td><td>查看当前⽤户的计划任务</td></tr><tr><td>cut -d: -f1 /etc/passwd</td><td>查看系统所有⽤户</td></tr><tr><td>cut -d: -f1 /etc/group</td><td>查看系统所有组</td></tr></tbody></table></div><h1 id="⽹络和进程管理"><a href="#⽹络和进程管理" class="headerlink" title="⽹络和进程管理"></a>⽹络和进程管理</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>ifconfig</td><td>查看⽹络接⼝属性</td></tr><tr><td>ifconfig eth0</td><td>查看某⽹卡的配置</td></tr><tr><td>route -n</td><td>查看路由表</td></tr><tr><td>netstat -lntp</td><td>查看所有监听端⼝</td></tr><tr><td>netstat -antp</td><td>查看已经建⽴的TCP连接</td></tr><tr><td>netstat -lutp</td><td>查看TCP/UDP的状态信息</td></tr><tr><td>ifup eth0</td><td>启⽤eth0⽹络设备</td></tr><tr><td>ifdown eth0</td><td>禁⽤eth0⽹络设备</td></tr><tr><td>iptables -L</td><td>查看iptables规则</td></tr><tr><td>ifconfig eth0 192.168.1.1 netmask 255.255.255.0</td><td>配置ip地址</td></tr><tr><td>dhclient eth0</td><td>以dhcp模式启⽤eth0</td></tr><tr><td>route add -net 0/0 gw Gateway_IP</td><td>配置默认⽹关</td></tr><tr><td>route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1</td><td>配置静态路由到达⽹络’192.168.0.0/16’</td></tr><tr><td>route del 0/0 gw Gateway_IP</td><td>删除静态路由</td></tr><tr><td>hostname</td><td>查看主机名</td></tr><tr><td>host <a href="http://www.baidu.com">www.baidu.com</a></td><td>解析主机名</td></tr><tr><td>nslookup <a href="http://www.baidu.com">www.baidu.com</a></td><td>查询DNS记录，查看域名解析是否正常</td></tr><tr><td>ps -ef</td><td>查看所有进程</td></tr><tr><td>ps -ef \</td><td>grep codesheep</td><td>过滤出你需要的进程</td></tr><tr><td>kill -s name</td><td>kill指定名称的进程</td></tr><tr><td>kill -s pid</td><td>kill指定pid的进程</td></tr><tr><td>top</td><td>实时显示进程状态</td></tr><tr><td>vmstat 1 20</td><td>每1秒采⼀次系统状态，采20次</td></tr><tr><td>iostat</td><td>iostat</td></tr><tr><td>sar -u 1 10</td><td>查询cpu使⽤情况（1秒⼀次，共10次）</td></tr><tr><td>sar -d 1 10</td><td>查询磁盘性能</td></tr></tbody></table></div><h1 id="常⻅系统服务命令"><a href="#常⻅系统服务命令" class="headerlink" title="常⻅系统服务命令"></a>常⻅系统服务命令</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>chkconfig —list</td><td>列出系统服务</td></tr><tr><td>service &lt;服务名&gt; status</td><td>查看某个服务</td></tr><tr><td>service &lt;服务名&gt; start</td><td>启动某个服务</td></tr><tr><td>service &lt;服务名&gt; stop</td><td>终⽌某个服务</td></tr><tr><td>service &lt;服务名&gt; restart</td><td>重启某个服务</td></tr><tr><td>systemctl status &lt;服务名&gt;</td><td>查看某个服务</td></tr><tr><td>systemctl start &lt;服务名&gt;</td><td>启动某个服务</td></tr><tr><td>systemctl stop &lt;服务名&gt;</td><td>终⽌某个服务</td></tr><tr><td>systemctl restart &lt;服务名&gt;</td><td>重启某个服务</td></tr><tr><td>systemctl enable &lt;服务名&gt;</td><td>关闭⾃启动</td></tr><tr><td>systemctl disable &lt;服务名&gt;</td><td>关闭⾃启动</td></tr></tbody></table></div><h1 id="⽂件和⽬录操作"><a href="#⽂件和⽬录操作" class="headerlink" title="⽂件和⽬录操作"></a>⽂件和⽬录操作</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>cd &lt;⽬录名&gt;</td><td>进⼊某个⽬录</td></tr><tr><td>cd ..</td><td>回上级⽬录</td></tr><tr><td>cd ../..</td><td>回上两级⽬录</td></tr><tr><td>cd</td><td>进个⼈主⽬录</td></tr><tr><td>cd -</td><td>回上⼀步所在⽬录</td></tr><tr><td>pwd</td><td>显示当前路径</td></tr><tr><td>ls</td><td>查看⽂件⽬录列表</td></tr><tr><td>ls -F</td><td>查看⽬录中内容（显示是⽂件还是⽬录）</td></tr><tr><td>ls -l</td><td>查看⽂件和⽬录的详情列表</td></tr><tr><td>ls -a</td><td>查看隐藏⽂件</td></tr><tr><td>ls -lh</td><td>查看⽂件和⽬录的详情列表（增强⽂件⼤⼩易读性）</td></tr><tr><td>ls -lSr</td><td>查看⽂件和⽬录列表（以⽂件⼤⼩升序查看）</td></tr><tr><td>tree</td><td>查看⽂件和⽬录的树形结构</td></tr><tr><td>mkdir &lt;⽬录名&gt;</td><td>创建⽬录</td></tr><tr><td>mkdir dir1 dir2</td><td>同时创建两个⽬录</td></tr><tr><td>mkdir -p /tmp/dir1/dir2</td><td>创建⽬录树</td></tr><tr><td>rm -f file1</td><td>删除’file1’⽂件</td></tr><tr><td>rmdir dir1</td><td>删除’dir1’⽬录</td></tr><tr><td>rm -rf dir1</td><td>删除’dir1’⽬录和其内容</td></tr><tr><td>rm -rf dir1 dir2</td><td>同时删除两个⽬录及其内容</td></tr><tr><td>mv old_dir new_dir</td><td>重命名/移动⽬录</td></tr><tr><td>cp file1 file2</td><td>复制⽂件</td></tr><tr><td>cp dir/* .</td><td>复制某⽬录下的所有⽂件⾄当前⽬录</td></tr><tr><td>cp -a dir1 dir2</td><td>复制⽬录</td></tr><tr><td>cp -a /tmp/dir1 .</td><td>复制⼀个⽬录⾄当前⽬录</td></tr><tr><td>ln -s file1 link1</td><td>创建指向⽂件/⽬录的软链接</td></tr><tr><td>ln file1 lnk1</td><td>创建指向⽂件/⽬录的物理链接</td></tr><tr><td>find / -name file1</td><td>从跟⽬录开始搜索⽂件/⽬录</td></tr><tr><td>find / -user user1</td><td>搜索⽤户user1的⽂件/⽬录</td></tr><tr><td>find /dir -name *.bin</td><td>在⽬录/dir中搜带有.bin后缀的⽂件</td></tr><tr><td>locate &lt;关键词&gt;</td><td>快速定位⽂件</td></tr><tr><td>locate *.mp4</td><td>寻找.mp4结尾的⽂件</td></tr><tr><td>whereis &lt;关键词&gt;</td><td>显示某⼆进制⽂件/可执⾏⽂件的路径</td></tr><tr><td>which &lt;关键词&gt;</td><td>查找系统⽬录下某的⼆进制⽂件</td></tr><tr><td>chmod ugo+rwx dir1</td><td>设置⽬录所有者(u)、群组(g)及其他⼈(o)的读（r）写(w)执⾏(x)权限</td></tr><tr><td>chmod go-rwx dir1</td><td>移除群组(g)与其他⼈(o)对⽬录的读写执⾏权限</td></tr><tr><td>chown user1 file1</td><td>改变⽂件的所有者属性</td></tr><tr><td>chown -R user1 dir1</td><td>改变⽬录的所有者属性</td></tr><tr><td>chgrp group1 file1</td><td>改变⽂件群组</td></tr><tr><td>chown user1:group1 file1</td><td>改变⽂件的所有⼈和群组</td></tr></tbody></table></div><h1 id="⽂件查看和处理"><a href="#⽂件查看和处理" class="headerlink" title="⽂件查看和处理"></a>⽂件查看和处理</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>cat file1</td><td>查看⽂件内容</td></tr><tr><td>cat -n file1</td><td>查看内容并标示⾏数</td></tr><tr><td>tac file1</td><td>从最后⼀⾏开始反看⽂件内容</td></tr><tr><td>more file1</td><td>more file1</td></tr><tr><td>less file1</td><td>类似more命令，但允许反向操作</td></tr><tr><td>head -2 file1</td><td>查看⽂件前两⾏</td></tr><tr><td>tail -2 file1</td><td>查看⽂件后两⾏</td></tr><tr><td>tail -f /log/msg</td><td>实时查看添加到⽂件中的内容</td></tr><tr><td>grep codesheep hello.txt</td><td>在⽂件hello.txt中查找关键词codesheep</td></tr><tr><td>grep ^sheep hello.txt</td><td>在⽂件hello.txt中查找以sheep开头的内容</td></tr><tr><td>grep [0-9] hello.txt</td><td>选择hello.txt⽂件中所有包含数字的⾏</td></tr><tr><td>sed ‘s/s1/s2/g’ hello.txt</td><td>将hello.txt⽂件中的s1替换成s2</td></tr><tr><td>sed ‘/^$/d’ hello.txt</td><td>从hello.txt⽂件中删除所有空⽩⾏</td></tr><tr><td>sed ‘/ *#/d; /^$/d’ hello.txt</td><td>从hello.txt⽂件中删除所有注释和空⽩⾏</td></tr><tr><td>sed -e ‘1d’ hello.txt</td><td>从⽂件hello.txt 中排除第⼀⾏</td></tr><tr><td>sed -n ‘/s1/p’ hello.txt</td><td>查看只包含关键词”s1”的⾏</td></tr><tr><td>sed -e ‘s/ *$//‘ hello.txt</td><td>删除每⼀⾏最后的空⽩字符</td></tr><tr><td>sed -e ‘s/s1//g’ hello.txt</td><td>从⽂档中只删除词汇s1并保留剩余全部</td></tr><tr><td>sed -n ‘1,5p;5q’ hello.txt</td><td>查看从第⼀⾏到第5⾏内容</td></tr><tr><td>sed -n ‘5p;5q’ hello.txt</td><td>查看第5⾏</td></tr><tr><td>paste file1 file2</td><td>合并两个⽂件或两栏的内容</td></tr><tr><td>paste -d ‘+’ file1 file2</td><td>合并两个⽂件或两栏的内容，中间⽤”+”区分</td></tr><tr><td>sort file1 file2</td><td>排序两个⽂件的内容</td></tr><tr><td>comm -1 file1 file2</td><td>⽐较两个⽂件的内容(去除’file1’所含内容)</td></tr><tr><td>comm -2 file1 file2</td><td>⽐较两个⽂件的内容(去除’file2’所含内容</td></tr><tr><td>comm -3 file1 file2</td><td>⽐较两个⽂件的内容(去除两⽂件共有部分)</td></tr></tbody></table></div><h1 id="打包和解压"><a href="#打包和解压" class="headerlink" title="打包和解压"></a>打包和解压</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>zip xxx.zip file</td><td>压缩⾄zip包</td></tr><tr><td>zip -r xxx.zip file1 file2 dir1</td><td>将多个⽂件+⽬录压成zip包</td></tr><tr><td>unzip xxx.zip</td><td>解压zip包</td></tr><tr><td>tar -cvf xxx.tar file</td><td>创建⾮压缩tar包</td></tr><tr><td>tar -cvf xxx.tar file1 file2 dir1</td><td>将多个⽂件+⽬录打tar包</td></tr><tr><td>tar -tf xxx.tar</td><td>查看tar包的内容</td></tr><tr><td>tar -xvf xxx.tar</td><td>解压tar包</td></tr><tr><td>tar -xvf xxx.tar -C /dir</td><td>将tar包解压⾄指定⽬录</td></tr><tr><td>tar -cvfj xxx.tar.bz2 dir</td><td>创建bz2压缩包</td></tr><tr><td>tar -jxvf xxx.tar.bz2</td><td>解压bz2压缩包</td></tr><tr><td>tar -cvfz xxx.tar.gz dir</td><td>创建gzip压缩包</td></tr><tr><td>tar -zxvf xxx.tar.gz</td><td>解压gzip压缩包</td></tr><tr><td>bunzip2 xxx.bz2</td><td>解压bz2压缩包</td></tr><tr><td>bzip2 filename</td><td>压缩⽂件</td></tr><tr><td>gunzip xxx.gz</td><td>解压gzip压缩包</td></tr><tr><td>gzip filename</td><td>压缩⽂件</td></tr><tr><td>gzip -9 filename</td><td>最⼤程度压缩</td></tr></tbody></table></div><h1 id="RPM包管理命令"><a href="#RPM包管理命令" class="headerlink" title="RPM包管理命令"></a>RPM包管理命令</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>rpm -qa</td><td>查看已安装的rpm包</td></tr><tr><td>rpm -q pkg_name</td><td>查询某个rpm包</td></tr><tr><td>rpm -q —whatprovides xxx</td><td>显示xxx功能是由哪个包提供的</td></tr><tr><td>rpm -q —whatrequires xxx</td><td>显示xxx功能被哪个程序包依赖的</td></tr><tr><td>rpm -q —changelog xxx</td><td>显示xxx包的更改记录</td></tr><tr><td>rpm -qi pkg_name</td><td>查看⼀个包的详细信息</td></tr><tr><td>rpm -qd pkg_name</td><td>查询⼀个包所提供的⽂档</td></tr><tr><td>rpm -qc pkg_name</td><td>查看已安装rpm包提供的配置⽂件</td></tr><tr><td>rpm -ql pkg_name</td><td>查看⼀个包安装了哪些⽂件</td></tr><tr><td>rpm -qf filename</td><td>查看某个⽂件属于哪个包</td></tr><tr><td>rpm -qR pkg_name</td><td>查询包的依赖关系</td></tr><tr><td>rpm -ivh xxx.rpm</td><td>安装rpm包</td></tr><tr><td>rpm -ivh —test xxx.rpm</td><td>测试安装rpm包</td></tr><tr><td>rpm -ivh —nodeps xxx.rpm</td><td>安装rpm包时忽略依赖关系</td></tr><tr><td>rpm -e xxx</td><td>卸载程序包</td></tr><tr><td>rpm -Fvh pkg_name</td><td>升级确定已安装的rpm包</td></tr><tr><td>rpm -Uvh pkg_name</td><td>升级rpm包(若未安装则会安装)</td></tr><tr><td>rpm -V pkg_name</td><td>RPM包详细信息校验</td></tr></tbody></table></div><h1 id="YUM包管理命令"><a href="#YUM包管理命令" class="headerlink" title="YUM包管理命令"></a>YUM包管理命令</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>yum repolist enabled</td><td>显示可⽤的源仓库</td></tr><tr><td>yum search pkg_name</td><td>搜索软件包</td></tr><tr><td>yum install pkg_name</td><td>下载并安装软件包</td></tr><tr><td>yum install —downloadonly pkg_name</td><td>只 下 载 不 安 装</td></tr><tr><td>yum list</td><td>显示所有程序包</td></tr><tr><td>yum list installed</td><td>查看当前系统已安装包</td></tr><tr><td>yum list updates</td><td>查看可以更新的包列表</td></tr><tr><td>yum check-update</td><td>查看可升级的软件包</td></tr><tr><td>yum update</td><td>更新所有软件包</td></tr><tr><td>yum update pkg_name</td><td>升级指定软件包</td></tr><tr><td>yum deplist pkg_name</td><td>列出软件包依赖关系</td></tr><tr><td>yum remove pkg_name</td><td>删除软件包</td></tr><tr><td>yum clean all</td><td>清除缓存</td></tr><tr><td>yum clean packages</td><td>清除缓存的软件包</td></tr><tr><td>yum clean headers</td><td>清除缓存的header</td></tr></tbody></table></div><h1 id="DPKG包管理命令"><a href="#DPKG包管理命令" class="headerlink" title="DPKG包管理命令"></a>DPKG包管理命令</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>dpkg -c xxx.deb</td><td>列出deb包的内容</td></tr><tr><td>dpkg -i xxx.deb</td><td>安装/更新deb包</td></tr><tr><td>dpkg -r pkg_name</td><td>移除deb包</td></tr><tr><td>dpkg -P pkg_name</td><td>移除deb包(不保留配置)</td></tr><tr><td>dpkg -l</td><td>查看系统中已安装deb包</td></tr><tr><td>dpkg -l pkg_name</td><td>显示包的⼤致信息</td></tr><tr><td>dpkg -L pkg_name</td><td>查看deb包安装的⽂件</td></tr><tr><td>dpkg -s pkg_name</td><td>查看包的详细信息</td></tr><tr><td>dpkg –unpack xxx.deb</td><td>解开deb包的内容</td></tr></tbody></table></div><h1 id="APT软件⼯具"><a href="#APT软件⼯具" class="headerlink" title="APT软件⼯具"></a>APT软件⼯具</h1><div class="table-container"><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>apt-cache search pkg_name</td><td>搜索程序包</td></tr><tr><td>apt-cache show pkg_name</td><td>获取包的概览信息</td></tr><tr><td>apt-get install pkg_name</td><td>安装/升级软件包</td></tr><tr><td>apt-get purge pkg_name</td><td>卸载软件（包括配置）</td></tr><tr><td>apt-get remove pkg_name</td><td>卸载软件（不包括配置）</td></tr><tr><td>apt-get update</td><td>更新包索引信息</td></tr><tr><td>apt-get upgrade</td><td>更新已安装软件包</td></tr><tr><td>apt-get clean</td><td>清理缓存</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10/11 网络断连，无网络原因及解决方法</title>
      <link href="/2021/10/16/Win1011%E7%BD%91%E7%BB%9C%E6%96%AD%E8%BF%9E%EF%BC%8C%E6%97%A0%E7%BD%91%E7%BB%9C%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2021/10/16/Win1011%E7%BD%91%E7%BB%9C%E6%96%AD%E8%BF%9E%EF%BC%8C%E6%97%A0%E7%BD%91%E7%BB%9C%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>win10 更新之后经常会出现已经连接wifi但提示无网络的情况，搜了下b站上有up主提供了方法，修改注册表即可修复</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>在Win10 18362版以后的版本，微软在连接网络后，注册表的返回值发生了改变，之前是每当连网后，系统会自动向微软的dns.msftncsi.com发出请求，然后返回一个NCSI.txt的值，这一值如果正确时，则确认为已连网。而Win10 18362版本之后，这个返回服务器和值有了新变化并反映为6个注册表项中。这些变化因国内部分运行商的网络重定向，不能得到正确的反馈，因此出现实际能上网确显示为无internet的问题。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ol><li><p>新建一个txt文档</p></li><li><p>写入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\NlaSvc\Parameters\Internet]</span><br><span class="line">ActiveDnsProbeContent=131.107.255.255</span><br><span class="line">ActiveDnsProbeContentV6=fd3e:4f5a:5b81::1</span><br><span class="line">ActiveDnsProbeHost=dns.msftncsi.com</span><br><span class="line">ActiveDnsProbeHostV6=dns.msftncsi.com</span><br><span class="line">ActiveWebProbeContent=Microsoft NCSI</span><br><span class="line">ActiveWebProbeContentV6=Microsoft NCSI         </span><br><span class="line">ActiveWebProbeHost=www.msftncsi.com                  </span><br><span class="line">ActiveWebProbeHostV6=ipv6.msftncsi.com</span><br><span class="line">ActiveWebProbePath=ncsi.txt</span><br><span class="line">ActiveWebProbePathV6=ncsi.txt</span><br><span class="line">EnableActiveProbing=dword:00000001</span><br><span class="line">PassivePollPeriod=dword:0000000f</span><br><span class="line">StaleThreshold=dword:0000001e</span><br><span class="line">WebTimeout=dword:00000023</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\NlaSvc\Parameters\Internet\ManualProxies] </span><br></pre></td></tr></table></figure></li><li><p>保存，重命名后缀为.reg</p></li><li><p>运行即可</p></li></ol><blockquote><p>不放心的话可以备份注册表：</p><ol><li>win+R输regedit打开注册表编辑器</li><li>找到路径HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\NlaSvc\Parameters\Internet </li><li>导出</li></ol></blockquote><h1 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h1><p><a href="https://www.bilibili.com/video/BV1v44y1x7zM?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1v44y1x7zM?spm_id_from=333.999.0.0</a></p><p><a href="https://www.zhihu.com/question/268072972/answer/2165203375">https://www.zhihu.com/question/268072972/answer/2165203375</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见经典算法AND背包问题</title>
      <link href="/2021/10/15/%E5%B8%B8%E8%A7%81%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95AND%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2021/10/15/%E5%B8%B8%E8%A7%81%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95AND%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="常见经典算法策略的特点、区别与联系"><a href="#常见经典算法策略的特点、区别与联系" class="headerlink" title="常见经典算法策略的特点、区别与联系"></a>常见经典算法策略的特点、区别与联系</h1><h2 id="分治算法："><a href="#分治算法：" class="headerlink" title="分治算法："></a>分治算法：</h2><p>​    分治法的设计思想是：将一个难以解决的大问题分解为多个规模较小的子问题，以便分而治之。如果原问题可以分为k个子问题，其中国内1&lt;k&lt;=n,且这k个子问题都可解，并可利用子问题计算出原问题的解，则可以选择分治法解决该问题。</p><p>​    分治算法的特点：通过分治方法设计出的程序一般都递归算法，故分治法的计算效率可以用递归方程进行分析。但是分治与递归也有区别，分治是将原问题转换为若干个相似的小问题去解，而递归则是将原问题层层转化为一个与原问题相似的小问题然后再去求解。</p><h2 id="贪心算法："><a href="#贪心算法：" class="headerlink" title="贪心算法："></a>贪心算法：</h2><p>贪心算法指在求解问题的时候总是做出在当前情况下的最好的选择，不会考虑整体最优解，即只寻找局部最优解。不同的贪心策略会得到差异非常大的结果，如果希望对该问题使用贪心策略，则待求解的问题中的字问题需要具备无后效性——即某个状态以前的过程不会影响以后的状态，只与当前的状态有关。</p><p>贪心算法的特点：最优子结构性质和贪心选择性质。贪心选择性质指需要求解的问题的整体最优解可通过一系列局部最优解的选择来实现。对于每一个具体的问题，必须证明每一步所做的贪心选择最后都会达成一个全局最优解。最优子结构是指一个问题的最优解包含其子问题的最优解性质。</p><p>贪心算法与动态规划算法的区别和联系：贪心算法和动态规划算法都具有最优子结构的性质。但是动态规划算法中，每一步所做出的选择要依赖相关子问题的解，因此只有在求出相关子问题的解后才能做出选择。而贪心算法则不依赖全局解，仅仅依靠过去所做出的选择而不依赖将来所做出的选择，也不依赖子问题的解，即只选择局部最优解。</p><h2 id="动态规划算法："><a href="#动态规划算法：" class="headerlink" title="动态规划算法："></a>动态规划算法：</h2><p>动态规划算法的基本思想是将需要求解的问题划分为若干个子问题，先求解子问题，然后从这些子问题的解中得到原问题的解。动态规划算法通常用于求解具有某种最优子结构性质的问题。在这类问题中，可能会有许多可行的解，但是期望找到具有最优值的解。基于动态规划法的算法设计通常按一下四个步骤进行：</p><ol><li><p>找出最优解的性质，并描述其结构特征。</p></li><li><p>递归定义最优值。</p></li><li><p>自底向上的方式计算最优质。</p></li><li><p>根据计算最优值时得到的信息构造一个最优解。</p></li></ol><p>通常，在步骤3中计算最优值时，需要记录更多的信息，以便在步骤4中快速构造出一个最优解。</p><p>动态规划算法的特点：动态规划算法一般具有最优子结构，重叠子问题两个性质。设计动态规划算法的第一步是分析最优结构，当带求解的问题中包含了其子问题的最优解时，就可以定义该问题具有最优子结构性质。而可以用动态规划方法求解的问题，应具有重叠子问题的性质。在用递归算法自顶向下尝试解决此类问题时，每次产生的问题并不一定是新问题，有些子问题会被反复计算多次从而造成计算资源的浪费。而动态规划算法通过利用这种子问题的重叠性，对每个子问题只求一次解，并将结果保存在一个表中，当再次需要解相同的问题时只需要从表中调出数据即可。</p><p>动态规划算法与分治算法的区别与联系：动态规划酸粉与分治法类似，基本思想都是将带求解的问题分解成很多子问题，先求子问题然后从这些子问题中得到原问题的解。与分治法不同的地方在于使用动态规划求解的问题其子问题不是相互独立的，而使用分治法求解的问题其子问题相互独立，若使用分治法去求解子问题不相互独立的问题，则分解得到的子问题数量太大从而使得计算时间大大增加。另外使用分治法求解问题的时候有些子问题会被重复计算，而使用动态规划法去求解的时候每个子问题只需要计算一次。</p><h2 id="回溯算法："><a href="#回溯算法：" class="headerlink" title="回溯算法："></a>回溯算法：</h2><p>回溯算法是搜索算法的一种，它在包含问题所有解的空间树中，按照深度优先的策略从root节点出发去搜索整个空间树。这种算法搜索到解空间的任意一个节点时，会首先判断该节点是否不包含问题的解，如果不包含则跳过以该节点为根的子树，逐层向其祖先节点回溯；否则进入该子树并继续按深度优先遍历进行搜索。</p><p>回溯法的特点：回溯法在求解的过程中需要回溯到树根，并且在搜索树中所有节点后才结束。而用回溯法搜索问题的任意一个解时，只需要搜到其中一个问题的解即可结束。</p><h2 id="分支界限法"><a href="#分支界限法" class="headerlink" title="分支界限法"></a>分支界限法</h2><p>分支界限法是一种在问题的解空间树T上搜索问题解的算法，其特点是：在扩展节点出，首先生成器所有孩子节点，然后在从当前活动节点表中选择下一个扩展节点。为了有效的计算下一个活节点，加快搜索速度，就在每一个活节点处计算一个函数值，并根据已计算出的函数值从当前活节点表中选择一个最有利的节点作为扩展节点，使搜索朝着解空间中具有最优解的分支推进，以便尽快找出一个最优解。</p><p>分支界限法与回溯法的区别与联系：二者类似，一般而言分支界限法与回溯法的求解目标不同：分支界限法的求解目标是找出解空间树T中满足约束条件的一个解，或者在满足约束条件的解中找一个使得目标函数极大活着极小的解，即某种意义下的最优解。而回溯法则是找出T中满足约束条件的所有解。由于解题目标不同，导致分支界限法和回溯法的搜索方式也不同，回溯法以深度优先的方式搜索T，而分支界限法以广度优先或最小耗费有限的方式搜索T。</p><h1 id="参考取数问题的算法框架，写出0-1背包问题的3种算法，并写出找出最优解的算法"><a href="#参考取数问题的算法框架，写出0-1背包问题的3种算法，并写出找出最优解的算法" class="headerlink" title="参考取数问题的算法框架，写出0-1背包问题的3种算法，并写出找出最优解的算法"></a>参考取数问题的算法框架，写出0-1背包问题的3种算法，并写出找出最优解的算法</h1><p>定义一下0-1背包问题中的变量：给定n个物品和一个背包，物品i的重量是wi，其价值为vi，背包容量为c。</p><h2 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h2><h3 id="算法策略"><a href="#算法策略" class="headerlink" title="算法策略"></a>算法策略</h3><p>与贪心算法不同的是，动态规划算法需要比较选择该物品和不选择该物品所导致的最终结果，然后在做出最佳选择。如果放入第i个东西后可以取得最大价值，则前i-1个物品也取到了最大价值，重量为w-w[i]。定义dp[i][j]为放入第i个物品后可以取得最大价值，则其状态转移方程为：dp[i][j] = max(dp[i-1][j], dp[i-1][j-v[i]] +price[i])。</p><h3 id="核心算法："><a href="#核心算法：" class="headerlink" title="核心算法："></a>核心算法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Dongtaiguihua</span>(<span class="params">w,n,</span>):</span></span><br><span class="line">    listWV = [[<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">    listTemp = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        listTemp = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))  </span><br><span class="line">        listWV.append(listTemp) </span><br><span class="line"></span><br><span class="line">    value = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(w+<span class="number">1</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, w+<span class="number">1</span>):</span><br><span class="line">        <span class="comment">#若物品不能放到背包中</span></span><br><span class="line">            <span class="keyword">if</span> j &lt; listWV[i][<span class="number">0</span>]:</span><br><span class="line">           <span class="comment">#价值与之前相同    </span></span><br><span class="line">                value[i][j] = value[i-<span class="number">1</span>][j] </span><br><span class="line">            <span class="keyword">else</span>:   </span><br><span class="line">            <span class="comment">#物品可以放到背包中，最大价值在两者之中取</span></span><br><span class="line">                value[i][j] = <span class="built_in">max</span>(value[i-<span class="number">1</span>][j], value[i-<span class="number">1</span>][j-listWV[i][<span class="number">0</span>]] + listWV[i][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><h3 id="算法策略-1"><a href="#算法策略-1" class="headerlink" title="算法策略"></a>算法策略</h3><p>使用回溯法求解时，如果用wCur和vCur分别表示当前正在搜索的部分解中装入背包物体的总重量和总价值，用vBest表示当前正在搜索部分解的最大价值，则基本思路如下：</p><ol><li>把物体按单位价值降序排列</li><li>wCur vCur vBest初始化</li><li>对于有n种可选物品的0/1背包问题，其解空间由长度为n的0-1向量组成,可用子集数表示。在搜索解空间树时，只要其左儿子结点是一个可行结点，搜索就进入左子树。当右子树中有可能包含最优解时就进入右子树搜索。</li></ol><h3 id="核心算法：-1"><a href="#核心算法：-1" class="headerlink" title="核心算法："></a>核心算法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">vbest：最大价值</span></span><br><span class="line"><span class="string">vCur：背包价值</span></span><br><span class="line"><span class="string">wCur：背包重量</span></span><br><span class="line"><span class="string">x：list型，标记是否路径中是否包含了该节点</span></span><br><span class="line"><span class="string">v:list型，存放所有物品的价值</span></span><br><span class="line"><span class="string">w:list型，存放所有物品的重量</span></span><br><span class="line"><span class="string">n：物品数量</span></span><br><span class="line"><span class="string">c：背包容量</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Huisu</span>(<span class="params">vbest,vCur,wCur,x,w,v,n,c</span>):</span></span><br><span class="line">    <span class="keyword">if</span> i&gt;= n <span class="keyword">and</span> vbest&lt;vCur:</span><br><span class="line">        vbest = vCur</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> wCur+w[i]&lt;=c:</span><br><span class="line">            x[i]=<span class="number">1</span></span><br><span class="line">            wCur += w[i]</span><br><span class="line">            vCur += v[i]</span><br><span class="line">            <span class="comment"># 下一个</span></span><br><span class="line">            Huisu(i+<span class="number">1</span>)</span><br><span class="line">            wCur -= w[i]</span><br><span class="line">            vCur -= v[i]</span><br><span class="line">        x[i]=<span class="number">0</span></span><br><span class="line">        <span class="comment"># 下一个</span></span><br><span class="line">        Huisu(i+<span class="number">1</span>)</span><br><span class="line"><span class="comment"># vbest中存放了最优解</span></span><br><span class="line">    <span class="keyword">return</span> vbest</span><br></pre></td></tr></table></figure><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><blockquote><p>理论上贪心算法只能够求解背包问题，没法求解0-1背包问题，但是本来应该作为第三种算法的分支界限算法跑到最后一问去了，还找不到其他算法就把贪心算法放这强行充3个挽尊了orz</p></blockquote><h3 id="算法策略-2"><a href="#算法策略-2" class="headerlink" title="算法策略"></a>算法策略</h3><p>使用贪心选择求解0-1背包问题本质上还是计算单位重量价值最高的物品装到包里，但是与背包问题不同的地方在于这里没有办法对物品进行拆分，即在选择装入背包的物品时对每种物品i只有两个选择——装或者不装。不能将物品i装入背包多次，也不能只装入部分物品i，故使用该策略计算0-1背包问题的时候会存在背包装不满的情况，这符合贪心策略的最优解，即局部最优解；但是不符合整体最优解。</p><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><ol><li>计算出每种物品的单位重量价值vi/wi</li><li>依贪心选择策略，将尽可能多的单位重量价值最高的物品（设其重量为wi）装进去</li><li>将物品全部装完之后，背包内总重量未超过c则按单位价值排序选择重量不超过c-wi的下一个物品全部装进去。</li><li>依此策略一直进行下去，一直到背包装满或者剩余空间不够装剩下的物品。</li></ol><h3 id="核心算法"><a href="#核心算法" class="headerlink" title="核心算法"></a>核心算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Listv:list型，存放所有物品的价值</span></span><br><span class="line"><span class="comment"># Listw:list型，存放所有物品的重量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Tanxin</span>(<span class="params">n,C,Listv,Listw</span>):</span></span><br><span class="line"><span class="comment"># 计算单位价值并排序</span></span><br><span class="line">value = [(x,Listv[x] / Listw[x], Listv[x], Listw[x]) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n)]</span><br><span class="line">value.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始放往包里放东西</span></span><br><span class="line">maxvalue = <span class="number">0</span></span><br><span class="line">Listx = []</span><br><span class="line"><span class="keyword">for</span> x,xi,vi,wi <span class="keyword">in</span> value:</span><br><span class="line">    <span class="comment"># 如果能放的下就全放进去</span></span><br><span class="line">    <span class="keyword">if</span> vi &lt;= C:</span><br><span class="line">        C -= wi</span><br><span class="line">        maxvalue += vi</span><br><span class="line">        Listx.append(x)</span><br><span class="line"><span class="comment"># Listx中存放的是放进包的物品，maxvalue是使用贪心算法时包内物品的总价值</span></span><br><span class="line"><span class="keyword">return</span> Listx, maxvalue</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>算法Tanxin的主要计算时间在于将各种物品依其单位重量的价值从大到小排序。因此，算法的计算时间上界为O（nlogn）。</p><h1 id="写出0-1背包问题的分支界限算法"><a href="#写出0-1背包问题的分支界限算法" class="headerlink" title="写出0-1背包问题的分支界限算法"></a>写出0-1背包问题的分支界限算法</h1><h2 id="算法策略-3"><a href="#算法策略-3" class="headerlink" title="算法策略"></a>算法策略</h2><p>采用优先队列方式，按照物品的单位价值从大到小进行优先级排序，使用大根堆结构存储物品数据。构造上界函数maxbound( )计算当前结点下的价值上界，如果当前结点下的价值上界比当前的最优值大，则将当前结点加入堆中，否则剪去该节点下的所有路径(即剪去子集树的枝)，直到堆中所有结点均被弹出。基本步骤如下：</p><ol><li><p>把物体按单位价值降序排列</p></li><li><p>节点的优先级由已装的物品价值加上剩下的最大单位重量价值的物品装满剩余容量的价值和</p></li><li><p>算法首先检查当前扩展结点的左子树结点，若满足约束条件则加入优先队列中</p></li><li><p>检查右子树结点，若满足约束条件则加入优先队列中</p></li></ol><h2 id="算法代码"><a href="#算法代码" class="headerlink" title="算法代码"></a>算法代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fenzhijiexian</span>(<span class="params">vw, limit</span>):</span></span><br><span class="line"><span class="comment"># 上界函数：计算当前结点下的价值上界</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bound</span>(<span class="params">v, w, j</span>):</span></span><br><span class="line">        <span class="keyword">if</span> j &gt;= <span class="built_in">len</span>(vw) <span class="keyword">or</span> w &gt; limit:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(vw) <span class="keyword">and</span> w + vw[j][<span class="number">1</span>] &lt;= limit:</span><br><span class="line">                v, w, j = v + vw[j][<span class="number">0</span>], w + vw[j][<span class="number">1</span>], j + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j &lt; <span class="built_in">len</span>(vw):</span><br><span class="line">                v += (limit - w) * vw[j][<span class="number">0</span>] / (vw[j][<span class="number">1</span>] * <span class="number">1.0</span>)</span><br><span class="line">            <span class="keyword">return</span> v</span><br><span class="line">    <span class="comment"># 分支限界算法求解01背包</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse</span>(<span class="params">v, w, j</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> maxValue</span><br><span class="line">        <span class="keyword">if</span> bound(v, w, j) &gt;= maxValue: <span class="comment"># promising </span></span><br><span class="line">            <span class="keyword">if</span> w + vw[j][<span class="number">1</span>] &lt;= limit:  <span class="comment"># w/ j</span></span><br><span class="line">                maxValue = <span class="built_in">max</span>(maxValue, v + vw[j][<span class="number">0</span>])</span><br><span class="line">                traverse(v + vw[j][<span class="number">0</span>], w + vw[j][<span class="number">1</span>], j + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> j &lt; <span class="built_in">len</span>(vw) - <span class="number">1</span>:        <span class="comment"># w/o j</span></span><br><span class="line">                traverse(v, w, j + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    maxValue = <span class="number">0</span></span><br><span class="line">    traverse(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> maxValue</span><br></pre></td></tr></table></figure><p>先对 vw 按照单位重量的价值排序，然后利用 bound 函数确定价值上限。如果价值上限超过了已经出现的最大价值，再分别计算加上当前物品和不加当前物品的两种情况，否则就跳过。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><blockquote><p><a href="https://blog.csdn.net/qq_42939527/article/details/104043900">https://blog.csdn.net/qq_42939527/article/details/104043900</a></p><p><a href="https://blog.csdn.net/yue_luo_/article/details/95097844">https://blog.csdn.net/yue_luo_/article/details/95097844</a></p><p><a href="https://www.cnblogs.com/chenleideblog/p/11254578.html">https://www.cnblogs.com/chenleideblog/p/11254578.html</a></p><p><a href="https://blog.csdn.net/weixin_42260102/article/details/96008327">https://blog.csdn.net/weixin_42260102/article/details/96008327</a></p><p><a href="https://www.jlao.net/technology/10188/">https://www.jlao.net/technology/10188/</a></p><p>王红珍,李竹林,延飞波.基于0-1背包问题的两种算法[J].信息技术,2011,35(02):27-29.</p><p>荣政主编. 数据结构与算法分析. 西安：西安电子科技大学出版社, 2012.02.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全规约第一讲</title>
      <link href="/2021/10/12/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/"/>
      <url>/2021/10/12/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>安全规约课程笔记，整理一下以备以后查询使用，如果有错误欢迎留言讨论</p><p>本文的内容和图片均来自b站的郭福春老师的安全规约课程：<a href="https://space.bilibili.com/2095536965">https://space.bilibili.com/2095536965</a></p><h1 id="密码发展史"><a href="#密码发展史" class="headerlink" title="密码发展史"></a>密码发展史</h1><ul><li><p>经典密码：古罗马</p></li><li><p>近代密码：二战</p></li><li><p>现代密码（科学）：70年代以后</p></li></ul><p>模型：计算模型，安全模型</p><h1 id="概念澄清："><a href="#概念澄清：" class="headerlink" title="概念澄清："></a>概念澄清：</h1><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012123908460.png" alt="image-20211012123908460"></p><ul><li><p>Cryptography：对称密码，工要密码，等等，是一种方法来达到一种目标（security）</p></li><li><p>Cryptanalysis：已有Cryptography的分析。比如分析一些公钥密码，提出一些攻击方案.etc</p></li><li><p>Cryptosystem：提出一种具体的security studys</p></li><li><p>Scheme：实现cryptosystem的一种方案</p></li></ul><p>四者关系如下：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012123920826.png" alt="image-20211012123920826"></p><h1 id="如何定义一个算法"><a href="#如何定义一个算法" class="headerlink" title="如何定义一个算法"></a>如何定义一个算法</h1><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012123942284.png" alt="image-20211012123942284"></p><p>当现有方案无法解决需求的时候，就必须要提出一种新的算法来满足需求</p><h2 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h2><ol><li><p>确定一个完整的安全目标</p></li><li><p>确定涉及到几个参与方</p></li><li><p>需要确定至少需要几个算法（当然越少越好，但也不可能无限制优化）Ex：签名，有一个签名算法必然有一个对应的验证算法。</p></li><li><p>每个算法的名字该如何命名（类似编程中的函数名）</p></li><li><p>每个算法应该由2中的谁运行（为了给审稿人理清思路hhh）</p></li><li><p>每个算法的输入输出是啥</p></li><li><p>算法的正确性（下回分解）</p></li></ol><h2 id="举个例子：定义一个数字签名的算法"><a href="#举个例子：定义一个数字签名的算法" class="headerlink" title="举个例子：定义一个数字签名的算法"></a>举个例子：定义一个数字签名的算法</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012123959709.png" alt="image-20211012123959709"></p><p>上面就是一个讲故事的方式（只有讲故事的时候才Alice，bob，正式的描述算法的时候要精确一些，比如服务器，路由器，云，AS等，这种场景下使用ABC审稿人会锤爆你的狗头#滑稽），在这个过程中：</p><ul><li><p>参与方：signer，verifier</p></li><li><p>有几个算法：看涉及到几个计算，一个计算对应一个算法。故有3个计算（算法）+ 1个系统参数（system parameter generation）</p></li><li><p>给算法取名：SysGen，KeyGen，Sign，Verify</p></li></ul><blockquote><p>注：取名的要求</p><ol><li><p>美观</p></li><li><p>简洁</p></li><li><p>易懂</p></li></ol><p>Ex：KeyGen（完美），KeyGeneration（太长），Key_Gen（少用下划线），Key Gen（不要用空格），i（审稿人提刀在路上了）</p></blockquote><ul><li>每个算法由谁运行：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124014972.png" alt="image-20211012124014972"></p><ul><li>抽象化：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124020329.png" alt="image-20211012124020329"></p><blockquote><ol><li><p>箭头和等号是有区别的，谨慎使用</p></li><li><p>输入和输出的符号有一般的约定，不要乱用</p></li><li><p>就算抄，也要改几个符号，简简单单的修改</p></li></ol></blockquote><ul><li>正确性：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124027422.png" alt="image-20211012124027422"></p><h1 id="如何定义一个安全模型（第29期）"><a href="#如何定义一个安全模型（第29期）" class="headerlink" title="如何定义一个安全模型（第29期）"></a>如何定义一个安全模型（第29期）</h1><h2 id="如何分析一个方案的安全性"><a href="#如何分析一个方案的安全性" class="headerlink" title="如何分析一个方案的安全性"></a>如何分析一个方案的安全性</h2><p>可以从以下几个方面考虑：</p><ol><li><p>如何分析一个scheme的安全性</p></li><li><p>一个scheme（在安全模型下是安全的）可以抵抗所有（any）攻击吗？</p></li></ol><p>安全模型是为了提出一个方案而定义的吗</p><ol><li>安全模型是为了提出一个方案而定义的吗</li></ol><h2 id="什么是安全模型？"><a href="#什么是安全模型？" class="headerlink" title="什么是安全模型？"></a>什么是安全模型？</h2><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124045272.png" alt="image-20211012124045272"></p><ul><li><p>一个安全模型可以当成一个集合，攻击类型可以看成一个一个点。一个集合无法包含所有的点，即一个安全模型无法包含所有的攻击</p></li><li><p>抽象攻击：侧重介绍敌手可以获取什么信息以及如何获取这些信息。</p></li><li><p>安全模型是为了cryptosystem定义而不是为了某一个具体scheme定义</p></li></ul><blockquote><p>比如有个cryptosystem；里面有个scheme用到了hash函数，那你定义安全模型的时候就不能用hash函数，因为一个cryptosystem不一定用到hash函数，如果你定义了hash函数就意味着所有的cryptosystem都用到了hash函数</p></blockquote><h2 id="定义安全模型的方法"><a href="#定义安全模型的方法" class="headerlink" title="定义安全模型的方法"></a>定义安全模型的方法</h2><ul><li><p>game，下面用的这个种</p></li><li><p>伪代码（对新手不友好）</p></li></ul><p>Game方法：通过一种game的方式（adversary vs challenger）来描述</p><ul><li><p>challenger：crypsystem的拥有者，产生公私钥</p></li><li><p>adversary：尝试break这个cryptsystem（而不是scheme）</p></li></ul><blockquote><p>显而易见，二者存在信息差</p></blockquote><p>则一个安全模型定义了：</p><p>adversary能力：</p><ul><li><p>what：他可以查询什么信息</p></li><li><p>when：他什么时候可以查询这些信息</p></li></ul><p>adversary的安全目标：</p><ul><li>how：如何赢得这场game（break the cryptsystem）</li></ul><p>定义安全模型的四步：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124056662.png" alt="image-20211012124056662"></p><ol><li>setup：初始化定义双方</li></ol><p>2.capabilities：描述什么时间敌手会以什么方式获取信息（query），并且challenger要诚实的回应（response）</p><blockquote><p>当然要诚实的回答，这个问题类似减法的时候高位不给低位借咋整（锤爆高位的狗头#滑稽）</p></blockquote><p>3.安全目标：定义一个敌手赢得游戏的目标</p><p>4.优势（advantage）：定义一个满足条件的参数（parameter）</p><p>Ex：对于一个签名方案，定义一个安全模型</p><p><img src="C:/Users/happy/Desktop/%25E6%259C%2589%25E9%2581%2593%25E4%25BA%2591%25E7%25AC%2594%25E8%25AE%25B0%25E5%25AF%25BC%25E5%2587%25BA/youdaonote-pull-master/youdaonote/youdaonote-images/WEBRESOURCE2838a5247c371604f5504a3ace992c58.png" alt=""></p><blockquote><ol><li><p>并不是所有的放哪都有Advantage</p></li><li><p>有些行为必须被禁止，比如问问challenger的私钥是啥</p></li></ol></blockquote><h2 id="什么时候该定义一个安全模型"><a href="#什么时候该定义一个安全模型" class="headerlink" title="什么时候该定义一个安全模型"></a>什么时候该定义一个安全模型</h2><p>当我们需要考虑一个算法的输入和输出的是时候就可以定义一个安全模型。</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124118557.png" alt="image-20211012124118557"></p><p>需要确定哪些需要考虑，哪些不需要，并且抽象化</p><blockquote><p>比如确认参与方应该问啥</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124128683.png" alt="image-20211012124128683"></p><h1 id="形式化描述一个安全模型（可以借鉴，不能copy）"><a href="#形式化描述一个安全模型（可以借鉴，不能copy）" class="headerlink" title="形式化描述一个安全模型（可以借鉴，不能copy）"></a>形式化描述一个安全模型（可以借鉴，不能copy）</h1><p>Ex：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124135249.png" alt="image-20211012124135249"></p><h1 id="安全模型定义的一些注释（听不清了，变身截图狂魔）"><a href="#安全模型定义的一些注释（听不清了，变身截图狂魔）" class="headerlink" title="安全模型定义的一些注释（听不清了，变身截图狂魔）"></a>安全模型定义的一些注释（听不清了，变身截图狂魔）</h1><ul><li>一个Cryptosystem可能有多个sercuity service</li></ul><blockquote><p>比如Alice给bob发消息，会对其加密并且签名，故这里alice提供了两个服务，签名和加密。</p></blockquote><ul><li>一个sercuity service 需要一个security model 去定义</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124147481.png" alt="image-20211012124147481"></p><ul><li>一个安全模型可以对应多个sercuity service</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124153964.png" alt="image-20211012124153964"></p><blockquote><p>standard model是一种计算模型</p><p>standard security model 是一种安全模型</p></blockquote><ul><li><p>标准的安全模型不一定是最强的，没有对比的话很难区分standard &amp; strong</p></li><li><p>标准/强/弱的区别在证明的时候区别是很大的</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124203183.png" alt="image-20211012124203183"></p><blockquote><p>19期文章有更加详细的解释</p></blockquote><ul><li><p>没有安全模型，就无法把攻破方案抽象成解决一个计算问题</p></li><li><p>无法把攻破方案抽象成解决一个计算问题，就没法定义一个安全模型</p></li></ul><h1 id="一些例子和练习"><a href="#一些例子和练习" class="headerlink" title="一些例子和练习"></a>一些例子和练习</h1><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124335581.png" alt="image-20211012124335581"></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124342656.png" alt="image-20211012124342656"></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124349493.png" alt="image-20211012124349493"></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124358144.png" alt="image-20211012124358144"></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%E7%AC%AC%E4%B8%80%E8%AE%B2/image-20211012124405842.png" alt="image-20211012124405842"></p><ul><li>以上的定义和解释可以从一些论文和公开资料中获得</li></ul><blockquote><p>密码学报 2019 第六期的文章也有一些资料可以查看</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安全规约 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全规约 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开机执行python脚本自动登录SNNU校园网</title>
      <link href="/2021/10/02/%E5%BC%80%E6%9C%BA%E6%89%A7%E8%A1%8Cpython%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91/"/>
      <url>/2021/10/02/%E5%BC%80%E6%9C%BA%E6%89%A7%E8%A1%8Cpython%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95SNNU%E6%A0%A1%E5%9B%AD%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="需要准备的东西"><a href="#需要准备的东西" class="headerlink" title="需要准备的东西"></a>需要准备的东西</h1><ul><li>一位大佬写的python脚本一份：<a href="https://github.com/LiYW-SL/SNNU_login">https://github.com/LiYW-SL/SNNU_login</a></li><li>搭建python环境一个（python3测试通过）</li><li>windows10 OR 11一台</li></ul><h1 id="设置步骤"><a href="#设置步骤" class="headerlink" title="设置步骤"></a>设置步骤</h1><ol><li><p>新建个txt文件，打开填入以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@echo off  </span><br><span class="line">python  D:\loginSNNU.py</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>如果还想在自动开启热点（给我自己的电脑和手机和板子提供wifi用，<del>一懒到底</del>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@echo off  </span><br><span class="line">python  D:\loginSNNU.py</span><br><span class="line">powershell.exe -encodedCommand WwBXAGkAbgBkAG8AdwBzAC4AUwB5AHMAdABlAG0ALgBVAHMAZQByAFAAcgBvAGYAaQBsAGUALgBMAG8AYwBrAFMAYwByAGUAZQBuACwAVwBpAG4AZABvAHcAcwAuAFMAeQBzAHQAZQBtAC4AVQBzAGUAcgBQAHIAbwBmAGkAbABlACwAQwBvAG4AdABlAG4AdABUAHkAcABlAD0AVwBpAG4AZABvAHcAcwBSAHUAbgB0AGkAbQBlAF0AIAB8ACAATwB1AHQALQBOAHUAbABsAA0ACgBBAGQAZAAtAFQAeQBwAGUAIAAtAEEAcwBzAGUAbQBiAGwAeQBOAGEAbQBlACAAUwB5AHMAdABlAG0ALgBSAHUAbgB0AGkAbQBlAC4AVwBpAG4AZABvAHcAcwBSAHUAbgB0AGkAbQBlAA0ACgAkAGEAcwBUAGEAcwBrAEcAZQBuAGUAcgBpAGMAIAA9ACAAKABbAFMAeQBzAHQAZQBtAC4AVwBpAG4AZABvAHcAcwBSAHUAbgB0AGkAbQBlAFMAeQBzAHQAZQBtAEUAeAB0AGUAbgBzAGkAbwBuAHMAXQAuAEcAZQB0AE0AZQB0AGgAbwBkAHMAKAApACAAfAAgAD8AIAB7ACAAJABfAC4ATgBhAG0AZQAgAC0AZQBxACAAJwBBAHMAVABhAHMAawAnACAALQBhAG4AZAAgACQAXwAuAEcAZQB0AFAAYQByAGEAbQBlAHQAZQByAHMAKAApAC4AQwBvAHUAbgB0ACAALQBlAHEAIAAxACAALQBhAG4AZAAgACQAXwAuAEcAZQB0AFAAYQByAGEAbQBlAHQAZQByAHMAKAApAFsAMABdAC4AUABhAHIAYQBtAGUAdABlAHIAVAB5AHAAZQAuAE4AYQBtAGUAIAAtAGUAcQAgACcASQBBAHMAeQBuAGMATwBwAGUAcgBhAHQAaQBvAG4AYAAxACcAIAB9ACkAWwAwAF0ADQAKAEYAdQBuAGMAdABpAG8AbgAgAEEAdwBhAGkAdAAoACQAVwBpAG4AUgB0AFQAYQBzAGsALAAgACQAUgBlAHMAdQBsAHQAVAB5AHAAZQApACAAewANAAoAIAAgACAAIAAkAGEAcwBUAGEAcwBrACAAPQAgACQAYQBzAFQAYQBzAGsARwBlAG4AZQByAGkAYwAuAE0AYQBrAGUARwBlAG4AZQByAGkAYwBNAGUAdABoAG8AZAAoACQAUgBlAHMAdQBsAHQAVAB5AHAAZQApAA0ACgAgACAAIAAgACQAbgBlAHQAVABhAHMAawAgAD0AIAAkAGEAcwBUAGEAcwBrAC4ASQBuAHYAbwBrAGUAKAAkAG4AdQBsAGwALAAgAEAAKAAkAFcAaQBuAFIAdABUAGEAcwBrACkAKQANAAoAIAAgACAAIAAkAG4AZQB0AFQAYQBzAGsALgBXAGEAaQB0ACgALQAxACkAIAB8ACAATwB1AHQALQBOAHUAbABsAA0ACgAgACAAIAAgACQAbgBlAHQAVABhAHMAawAuAFIAZQBzAHUAbAB0AA0ACgB9AA0ACgBGAHUAbgBjAHQAaQBvAG4AIABBAHcAYQBpAHQAQQBjAHQAaQBvAG4AKAAkAFcAaQBuAFIAdABBAGMAdABpAG8AbgApACAAewANAAoAIAAgACAAIAAkAGEAcwBUAGEAcwBrACAAPQAgACgAWwBTAHkAcwB0AGUAbQAuAFcAaQBuAGQAbwB3AHMAUgB1AG4AdABpAG0AZQBTAHkAcwB0AGUAbQBFAHgAdABlAG4AcwBpAG8AbgBzAF0ALgBHAGUAdABNAGUAdABoAG8AZABzACgAKQAgAHwAIAA/ACAAewAgACQAXwAuAE4AYQBtAGUAIAAtAGUAcQAgACcAQQBzAFQAYQBzAGsAJwAgAC0AYQBuAGQAIAAkAF8ALgBHAGUAdABQAGEAcgBhAG0AZQB0AGUAcgBzACgAKQAuAEMAbwB1AG4AdAAgAC0AZQBxACAAMQAgAC0AYQBuAGQAIAAhACQAXwAuAEkAcwBHAGUAbgBlAHIAaQBjAE0AZQB0AGgAbwBkACAAfQApAFsAMABdAA0ACgAgACAAIAAgACQAbgBlAHQAVABhAHMAawAgAD0AIAAkAGEAcwBUAGEAcwBrAC4ASQBuAHYAbwBrAGUAKAAkAG4AdQBsAGwALAAgAEAAKAAkAFcAaQBuAFIAdABBAGMAdABpAG8AbgApACkADQAKACAAIAAgACAAJABuAGUAdABUAGEAcwBrAC4AVwBhAGkAdAAoAC0AMQApACAAfAAgAE8AdQB0AC0ATgB1AGwAbAANAAoAfQANAAoADQAKACQAYwBvAG4AbgBlAGMAdABpAG8AbgBQAHIAbwBmAGkAbABlACAAPQAgAFsAVwBpAG4AZABvAHcAcwAuAE4AZQB0AHcAbwByAGsAaQBuAGcALgBDAG8AbgBuAGUAYwB0AGkAdgBpAHQAeQAuAE4AZQB0AHcAbwByAGsASQBuAGYAbwByAG0AYQB0AGkAbwBuACwAVwBpAG4AZABvAHcAcwAuAE4AZQB0AHcAbwByAGsAaQBuAGcALgBDAG8AbgBuAGUAYwB0AGkAdgBpAHQAeQAsAEMAbwBuAHQAZQBuAHQAVAB5AHAAZQA9AFcAaQBuAGQAbwB3AHMAUgB1AG4AdABpAG0AZQBdADoAOgBHAGUAdABJAG4AdABlAHIAbgBlAHQAQwBvAG4AbgBlAGMAdABpAG8AbgBQAHIAbwBmAGkAbABlACgAKQANAAoAJAB0AGUAdABoAGUAcgBpAG4AZwBNAGEAbgBhAGcAZQByACAAPQAgAFsAVwBpAG4AZABvAHcAcwAuAE4AZQB0AHcAbwByAGsAaQBuAGcALgBOAGUAdAB3AG8AcgBrAE8AcABlAHIAYQB0AG8AcgBzAC4ATgBlAHQAdwBvAHIAawBPAHAAZQByAGEAdABvAHIAVABlAHQAaABlAHIAaQBuAGcATQBhAG4AYQBnAGUAcgAsAFcAaQBuAGQAbwB3AHMALgBOAGUAdAB3AG8AcgBrAGkAbgBnAC4ATgBlAHQAdwBvAHIAawBPAHAAZQByAGEAdABvAHIAcwAsAEMAbwBuAHQAZQBuAHQAVAB5AHAAZQA9AFcAaQBuAGQAbwB3AHMAUgB1AG4AdABpAG0AZQBdADoAOgBDAHIAZQBhAHQAZQBGAHIAbwBtAEMAbwBuAG4AZQBjAHQAaQBvAG4AUAByAG8AZgBpAGwAZQAoACQAYwBvAG4AbgBlAGMAdABpAG8AbgBQAHIAbwBmAGkAbABlACkADQAKAA0ACgAjACAAQgBlACAAcwB1AHIAZQAgAHQAbwAgAGkAbgBjAGwAdQBkAGUAIABCAGUAbgAgAE4ALgAnAHMAIABhAHcAYQBpAHQAIABmAG8AcgAgAEkAQQBzAHkAbgBjAE8AcABlAHIAYQB0AGkAbwBuADoADQAKACMAIABoAHQAdABwAHMAOgAvAC8AcwB1AHAAZQByAHUAcwBlAHIALgBjAG8AbQAvAHEAdQBlAHMAdABpAG8AbgBzAC8AMQAzADQAMQA5ADkANwAvAHUAcwBpAG4AZwAtAGEALQB1AHcAcAAtAGEAcABpAC0AbgBhAG0AZQBzAHAAYQBjAGUALQBpAG4ALQBwAG8AdwBlAHIAcwBoAGUAbABsAA0ACgANAAoAIwAgAEMAaABlAGMAawAgAHcAaABlAHQAaABlAHIAIABNAG8AYgBpAGwAZQAgAEgAbwB0AHMAcABvAHQAIABpAHMAIABlAG4AYQBiAGwAZQBkAA0ACgAkAHQAZQB0AGgAZQByAGkAbgBnAE0AYQBuAGEAZwBlAHIALgBUAGUAdABoAGUAcgBpAG4AZwBPAHAAZQByAGEAdABpAG8AbgBhAGwAUwB0AGEAdABlAA0ACgANAAoAIwAgAEkAZgAgAE0AbwBiAGkAbABlACAASABvAHQAcwBwAG8AdAAgAGkAcwAgAG8AbgAgAC0AIAB0AHUAcgBuACAAaQB0ACAAbwBmAGYALgANAAoAaQBmACAAKAAkAHQAZQB0AGgAZQByAGkAbgBnAE0AYQBuAGEAZwBlAHIALgBUAGUAdABoAGUAcgBpAG4AZwBPAHAAZQByAGEAdABpAG8AbgBhAGwAUwB0AGEAdABlACAALQBlAHEAIAAxACkAewANAAoAIAAgACAAIAAjACAAUwB0AG8AcAAgAE0AbwBiAGkAbABlACAASABvAHQAcwBwAG8AdAANAAoAIAAgACAAIABBAHcAYQBpAHQAIAAoACQAdABlAHQAaABlAHIAaQBuAGcATQBhAG4AYQBnAGUAcgAuAFMAdABvAHAAVABlAHQAaABlAHIAaQBuAGcAQQBzAHkAbgBjACgAKQApACAAKABbAFcAaQBuAGQAbwB3AHMALgBOAGUAdAB3AG8AcgBrAGkAbgBnAC4ATgBlAHQAdwBvAHIAawBPAHAAZQByAGEAdABvAHIAcwAuAE4AZQB0AHcAbwByAGsATwBwAGUAcgBhAHQAbwByAFQAZQB0AGgAZQByAGkAbgBnAE8AcABlAHIAYQB0AGkAbwBuAFIAZQBzAHUAbAB0AF0AKQANAAoAfQANAAoAIwAgAEkAZgAgAE0AbwBiAGkAbABlACAASABvAHQAcwBwAG8AdAAgAGkAcwAgAG8AZgBmACAALQAgAHQAdQByAG4AIABpAHQAIABvAG4ALgANAAoAZQBsAHMAZQB7AA0ACgAgACAAIAAgACMAIABTAHQAYQByAHQAIABNAG8AYgBpAGwAZQAgAEgAbwB0AHMAcABvAHQADQAKACAAIAAgACAAQQB3AGEAaQB0ACAAKAAkAHQAZQB0AGgAZQByAGkAbgBnAE0AYQBuAGEAZwBlAHIALgBTAHQAYQByAHQAVABlAHQAaABlAHIAaQBuAGcAQQBzAHkAbgBjACgAKQApACAAKABbAFcAaQBuAGQAbwB3AHMALgBOAGUAdAB3AG8AcgBrAGkAbgBnAC4ATgBlAHQAdwBvAHIAawBPAHAAZQByAGEAdABvAHIAcwAuAE4AZQB0AHcAbwByAGsATwBwAGUAcgBhAHQAbwByAFQAZQB0AGgAZQByAGkAbgBnAE8AcABlAHIAYQB0AGkAbwBuAFIAZQBzAHUAbAB0AF0AKQANAAoAfQANAAoADQAKAA==</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>其中<code>D:\loginSNNU.py</code>是登录文件绝对路径</p></li><li><p>将文件命名为loginSNNU.bat</p></li><li><p>搜索<code>计划任务</code>程序，打开然后点击<code>创建任务</code></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E7%99%BB%E5%BD%95snnu/image-20211002224758046.png" alt="image-20211002224758046"></p></li><li><p>填下名称，其他配置参考如下：</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E7%99%BB%E5%BD%95snnu/image-20211002224908184.png" alt="image-20211002224908184"></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E7%99%BB%E5%BD%95snnu/image-20211002224934712.png" alt="image-20211002224934712"></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E7%99%BB%E5%BD%95snnu/image-20211002225005425.png" alt="image-20211002225005425"></p></li></ol><p>OVER</p><h1 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h1><h2 id="启动脚本方式"><a href="#启动脚本方式" class="headerlink" title="启动脚本方式"></a>启动脚本方式</h2><ol><li><p>bat文件创建过程同上</p></li><li><p>win+R输入<code>gpedit.msc</code>启动组策略编辑器</p></li><li><p>选择启动配置项</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E7%99%BB%E5%BD%95snnu/image-20211002201724296.png" alt="image-20211002201724296"></p></li><li><p>点击<code>浏览</code>添加需要运行的bat脚本</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E7%99%BB%E5%BD%95snnu/image-20211002210159374.png" alt="image-20211002210159374"></p></li><li><p>设置一下脚本最长运行时间，要不然一出错就运行个没完了</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/%E7%99%BB%E5%BD%95snnu/image-20211002202815469.png" alt="image-20211002202815469"></p></li></ol><h2 id="启动文件夹方式"><a href="#启动文件夹方式" class="headerlink" title="启动文件夹方式"></a>启动文件夹方式</h2><p><code>stackoverflow</code>上找到的，这个更简单：<a href="https://stackoverflow.com/questions/51622702/windows-10-run-python-program-in-startup">https://stackoverflow.com/questions/51622702/windows-10-run-python-program-in-startup</a></p><ol><li><p>win+r运行<code>shell:startup</code></p></li><li><p>把bat文件扔进去</p></li><li>over</li></ol>]]></content>
      
      
      <categories>
          
          <category> SNNU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win11启用wsl2</title>
      <link href="/2021/09/30/win11%E5%90%AF%E7%94%A8wsl2/"/>
      <url>/2021/09/30/win11%E5%90%AF%E7%94%A8wsl2/</url>
      
        <content type="html"><![CDATA[<p>前两天帮师兄跑一个docker，发现安装完docker for windows后死活打不开，今天晚上决定捣鼓捣鼓这个问题。。。</p><h1 id="安装vmware-16"><a href="#安装vmware-16" class="headerlink" title="安装vmware 16"></a>安装vmware 16</h1><p>据传闻说vm16版本好像支持共存，故直接安装最新版本的即可。</p><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><ol><li><p>先去windows功能里面启用<code>虚拟机平台</code>和<code>适用于linux的windows子系统</code></p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/win11%E5%90%AF%E7%94%A8wsl2/image-20210930203355617.png" alt="image-20210930203355617"></p></li><li><p>重启，管理员身份打开cmd，输入以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/win11启用wsl2/image-20210930203527442.png" alt=""></p></li><li><p>更新一下wsl到最新版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --update</span><br><span class="line">wsl --install</span><br></pre></td></tr></table></figure></li><li><p>下载安装docker for windows，启动成功</p><p><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/win11%E5%90%AF%E7%94%A8wsl2/image-20210930205420308.png" alt="image-20210930205420308"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v2ray搭建+Cloudflare Workers反向代理</title>
      <link href="/2021/09/13/%E4%BD%BF%E7%94%A8Cloudflare%20Workers%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>/2021/09/13/%E4%BD%BF%E7%94%A8Cloudflare%20Workers%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="v2ray搭建-Cloudflare-Workers反向代理"><a href="#v2ray搭建-Cloudflare-Workers反向代理" class="headerlink" title="v2ray搭建+Cloudflare Workers反向代理"></a>v2ray搭建+Cloudflare Workers反向代理</h1><h2 id="v2ray搭建"><a href="#v2ray搭建" class="headerlink" title="v2ray搭建"></a>v2ray搭建</h2><ul><li><p><a href="https://github.com/wulabing/V2Ray_ws-tls_bash_onekey">https://github.com/wulabing/V2Ray_ws-tls_bash_onekey</a> 脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate -q -O install.sh &quot;https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/master/install.sh&quot; &amp;&amp; chmod +x install.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure></li><li><p>233boy脚本（好久没更新了感觉不太稳定）</p><p>使用 root 用户输入下面命令安装或卸载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure><blockquote><p>如果提示 curl: command not found ，那是因为你的 VPS 没装 Curl<br>ubuntu/debian 系统安装 Curl 方法: <code>apt-get update -y &amp;&amp; apt-get install curl -y</code><br>centos 系统安装 Curl 方法: <code>yum update -y &amp;&amp; yum install curl -y</code><br>安装好 curl 之后就能安装脚本了</p></blockquote><p>备注：安装完成后，输入 <code>v2ray</code> 即可管理 V2Ray</p></li></ul><p><strong>注意</strong>：</p><ul><li>选择wb+tls协议</li><li>反代地址：<a href="https://hitokoto.cn">https://hitokoto.cn</a></li></ul><h2 id="安装锐速BBR-cake"><a href="#安装锐速BBR-cake" class="headerlink" title="安装锐速BBR+cake"></a>安装<del>锐速</del>BBR+cake</h2><p><strong>支持系统：</strong><code>Centos 6+</code>/<code>Debian 7+</code>/<code>Ubuntu 14+</code>，<code>BBR</code>魔改版不支持<code>Debian 8</code>。<br><strong>注意：</strong>该脚本在<code>Vultr</code>各个系统均测试通过，如果期间有出现任何问题，可向原作者反映帮助改善。<br>运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://github.com/ylx2016/Linux-NetSpeed/raw/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br><span class="line"></span><br><span class="line">选择安装bbr原版内核</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget --no-check-certificate -qO- wget https://git.io/Kernel.sh)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/dlxg/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><p>激活</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget --no-check-certificate -qO-  https://git.io/lotServerInstall.sh) install</span><br></pre></td></tr></table></figure><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>使用脚本后会出现如下选项：<br><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/v2ray+cf%E5%8F%8D%E4%BB%A3/Snipaste_2020-04-23_00-42-15.png" alt="img"></p><p>根据自己需求操作，重启后再使用<code>./tcp.sh</code>命令接着操作。</p><p>脚本会自动检测安装的情况，请注意脚本菜单下的状态检测即可。</p><p>如果在删除内核环节出现这样一张图，注意选择<code>NO</code>，然后根据提示重启系统。</p><p><a href="https://camo.githubusercontent.com/b047b125b25b3c5d441394e1d891691a209b8dbc/68747470733a2f2f7777772e6d6f65726174732e636f6d2f7573722f706963747572652f7169616e79696e676262722832292e706e67"><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/v2ray+cf%E5%8F%8D%E4%BB%A3/68747470733a2f2f7777772e6d6f65726174732e636f6d2f7573722f706963747572652f7169616e79696e676262722832292e706e67" alt="img"></a></p><h2 id="使用Cloudflare-Workers反向代理"><a href="#使用Cloudflare-Workers反向代理" class="headerlink" title="使用Cloudflare Workers反向代理"></a>使用Cloudflare Workers反向代理</h2><p>要使用 Cloud­flare 加速梯子，首先梯子必须是用 web­socket 作为传输方式的，比如 v2ray 的 web­socket，gost 的 web­socket 隧道，SS 的 v2-plu­gin 等等，关于这些东西的搭建教程有很多，我就不赘述了，只讲如何使用 Cloud­flare，并自选 ip 来达到最好的加速效果，你所需要的只是一个域名</p><p>先创建一个 Cloud­flare 账号，然后在主页面右下角点击 Work­ers，进入创建一个 Worker</p><p><a href="https://maofun.com/wp-content/uploads/2020/11/20201123233753-2eea3.png"><img src="https://maofun.com/wp-content/uploads/2020/11/20201123233753-2eea3.png" alt="img"></a></p><p>接着在编辑区域粘贴以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(</span><br><span class="line">    <span class="string">&quot;fetch&quot;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> url = <span class="keyword">new</span> URL(event.request.url);</span><br><span class="line">        url.hostname = <span class="string">&quot;your.domain&quot;</span>;</span><br><span class="line">        url.protocol = <span class="string">&quot;protocol&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> request = <span class="keyword">new</span> Request(url, event.request);</span><br><span class="line">        event.respondWith(</span><br><span class="line">            fetch(request)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>将 <code>your.domain</code> 改成你的域名，<code>protocol</code> 如果后端使用 https 就写 https，http 就写 http，如下图所示</p><p><a href="https://maofun.com/wp-content/uploads/2020/11/20201123233753-6b726.png"><img src="https://maofun.com/wp-content/uploads/2020/11/20201123233753-6b726.png" alt="img"></a></p><p>然后在左上角自定义你的子域</p><p><a href="https://maofun.com/wp-content/uploads/2020/11/20201123233753-be0fe.png"><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/v2ray+cf%E5%8F%8D%E4%BB%A3/20201123233753-be0fe.png" alt="img"></a></p><p>最后点击保存并部署即可</p><p>在左上角点击访问你的应用，如果出现的是你的网站的内容那说明反代成功了，将 v2ray 的客户端的地址改成 Worker 应用的地址即可，客户端没有开启 tls 的要开启，并将连接端口设为 443</p><p><a href="https://maofun.com/wp-content/uploads/2020/11/20201123233753-dca95.png"><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/v2ray+cf%E5%8F%8D%E4%BB%A3/20201123233753-dca95.png" alt="img"></a></p><h2 id="自选Cloudflare的ip"><a href="#自选Cloudflare的ip" class="headerlink" title="自选Cloudflare的ip"></a>自选Cloudflare的ip</h2><p>为了实现这一点需要使用这个项目：<a href="https://github.com/Spedoske/CloudflareScanner">https://github.com/Spedoske/CloudflareScanner</a><br>在 Re­lease 页面下载对应平台的二进制运行即可，参数如下，当然你也可以自定义，但记得 tcping 协程数不要超过一千</p><p><a href="https://maofun.com/wp-content/uploads/2020/11/20201123233753-eee3f.png"><img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/v2ray+cf%E5%8F%8D%E4%BB%A3/20201123233753-eee3f.png" alt="img"></a></p><p>在同目录的result.csv文件中就可以看到筛选出的优质ip，一般第一行的ip就可以使用了</p><p>然后修改系统的 hosts 文件加入这一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CF的优质ip Worker应用的域名</span><br></pre></td></tr></table></figure><p>这时候重启你的代理软件，应该已经使用到了 CF 的自选 ip 了</p><p>如果你想要在 CF 前再套一个国内中转机，只需要在中转机上将流量转发到筛选出的 CF 优质 ip，端口为 443，然后在代理软件上将地址和端口修改为中转机的地址和端口，host 设置为 Work­ers 应用的域名</p><ul><li>测试 Cloudflare CDN 延迟和速度，获取最快 IP (IPv4+IPv6)！ <a href="https://github.com/XIU2/CloudflareSpeedTest">https://github.com/XIU2/CloudflareSpeedTest</a></li></ul><p>直接运行就能自动延迟测速+下载测速，并列出速度最快的 IP。 当然还有进阶使用方法，自行搭配各种参数来获得更个性化的测速结果！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> v2ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>travis-ci在Node.js v14.0下自动构建hexo报错</title>
      <link href="/2020/05/22/travis-ci%E5%9C%A8Node.js-v14.0%E4%B8%8B%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAhexo%E6%8A%A5%E9%94%99/"/>
      <url>/2020/05/22/travis-ci%E5%9C%A8Node.js-v14.0%E4%B8%8B%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAhexo%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>参考<a href="https://vensing.com/a-bug-in-nodejs-v14/">https://vensing.com/a-bug-in-nodejs-v14/</a></p></blockquote><h1 id="报错情况"><a href="#报错情况" class="headerlink" title="报错情况"></a>报错情况</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1.27s$ hexo clean</span><br><span class="line">(node:5971) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:5971) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5971) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5971) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5971) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5971) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">322The command &quot;hexo clean&quot; exited with 0.</span><br><span class="line">6.83s$ hexo g</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 3.93 s</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:5991) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br></pre></td></tr></table></figure><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在travis.yml里面的Node.js版本那里把<strong>stable</strong>改成指定版本号就行，错误已经提交至hexo项目的issue，估计过一段时间就能修复</p><h1 id="附travis-yml中的language用法"><a href="#附travis-yml中的language用法" class="headerlink" title="附travis.yml中的language用法"></a>附travis.yml中的language用法</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><p>其中版本号可填如下内容：</p><ul><li><p><code>node</code> latest stable Node.js release</p></li><li><p><code>lts/*</code> latest LTS Node.js release</p></li><li><p><code>14</code> latest 14.x release</p></li><li><p><code>13</code> latest 13.x release</p></li><li><p><code>12</code> latest 12.x release</p></li><li><p><code>11</code> latest 11.x release</p></li><li><p><code>10</code> latest 10.x release</p></li></ul><blockquote><p>参考自<a href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs/">https://docs.travis-ci.com/user/languages/javascript-with-nodejs/</a></p></blockquote><h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><p>有点想换GitHub Actions了…</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> travis CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows XP安装pyqt5和pyinstaller的坑</title>
      <link href="/2020/03/24/windows-XP%E5%AE%89%E8%A3%85pyqt5%E5%92%8Cpyinstaller%E7%9A%84%E5%9D%91/"/>
      <url>/2020/03/24/windows-XP%E5%AE%89%E8%A3%85pyqt5%E5%92%8Cpyinstaller%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="xp支持的python和qt版本"><a href="#xp支持的python和qt版本" class="headerlink" title="xp支持的python和qt版本"></a>xp支持的python和qt版本</h1><ul><li><p>Windows xp 不能运行python3.5及以上版本python。</p></li><li><p>Windows xp 不能运行qt5.7及以上版本qt。</p></li><li><p>Pyqt5官方预编译二进制文件不能在xp上运行。</p></li><li><p>Windows xp 能运行的最高版本的python版本为：python3.4和python2.7</p></li><li><p>Windows xp 上能运行的最高版本的qt为qt5.6.3</p></li></ul><h1 id="准备安装包"><a href="#准备安装包" class="headerlink" title="准备安装包"></a>准备安装包</h1><ul><li>windows xp镜像（itellyou.cn）要下载vl版本的</li><li>Python 3.4.4 (官网下载安装程序)</li><li>pip (官网下载get-pip.py文件安装)</li><li>PyQt 5.5.1</li><li>pywin32 220 (221和最新的222没有尝试)</li><li>PyInstaller 3.2.1 (pip install pyinstaller==3.2.1)</li><li>pySrial 3.0.1 (pip install pyserial==3.0.1)</li><li>eric6 ：可以安装17.03.1，Eric6的主程序文件是 $python安装文件夹$\Lib\site-packages\eric6\eric6.pyw</li></ul><p>注1：如果不手动安装pywin32是无法安装PyInstaller的.</p><p>注2：pip install 安装慢的话可以用清华源：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</a></p><p>注3：相关安装包下载地址：<a href="https://www.lanzous.com/b015akode">https://www.lanzous.com/b015akode</a> 密码:7zjp</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windowsXP </tag>
            
            <tag> pyqt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改WIFI名称&amp;暴力多拨提升网速</title>
      <link href="/2020/01/20/%E6%9A%B4%E5%8A%9B%E6%8F%90%E5%8D%87%E7%BD%91%E9%80%9F%E2%80%94%E2%80%94%E5%A4%9A%E6%8B%A8/"/>
      <url>/2020/01/20/%E6%9A%B4%E5%8A%9B%E6%8F%90%E5%8D%87%E7%BD%91%E9%80%9F%E2%80%94%E2%80%94%E5%A4%9A%E6%8B%A8/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>打开wifi列表全是CMCC-XXXX，找自己家的wifi好麻烦啊，把名字一改岂不美滋滋，另外今天突然发现东站的宽带好像可以多拨，而且一个账号可以在不同地方拨号</p></blockquote><h1 id="可以用来干什么？"><a href="#可以用来干什么？" class="headerlink" title="可以用来干什么？"></a>可以用来干什么？</h1><h2 id="修改wifi名称"><a href="#修改wifi名称" class="headerlink" title="修改wifi名称"></a>修改wifi名称</h2><ul><li>当然是<del>装逼</del>（搜索wifi的时候快速找到自己的家的呀hhh）</li></ul><h2 id="多拨"><a href="#多拨" class="headerlink" title="多拨"></a>多拨</h2><ul><li>如果对网速有要求的话可以通过多拨暴力提升网速，比如200M宽带可以通过双拨变400M，三拨600M，五拨就可以提前体验5G速度了#滑稽</li><li>如果有多间屋子的话就可以只办一个宽带，去哪间屋子就在哪间屋子拨个号就能上网了，省钱大法好</li></ul><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><ul><li><p>修改wifi的名称（去掉开头的CMCC+配置中文名）</p><p><img src="https://pptqdq.ch.files.1drv.com/y4mBJZ-mW2qN-3RoSAsYiePZ_-zsIiGgFIaZSDokxG8KsBfJO2MtXxqDO0N8c8HMsKyn5Hqqe-uRuIOhs0hfA307vvA1ZEuuGAhgUx6CkceI7jk2XILRg5zWMaEUkPb24_s4_eXf2pST1aGrNrf7g0kksKPji9DUo5qhZ3obonjjks0n0N4gBiON-L6g7maEqHYR66jWhtqUiJyLhumLtvmdQ?width=371&amp;height=660&amp;cropmode=none" alt=""></p></li><li><p>双路200M宽带双拨</p><p><img src="https://ppqbdg.ch.files.1drv.com/y4mIfCsNxDB6CLQOYWnbz_ZhzI2YYzqdXBg1Tm454FGzFM6PoghY6Y97HgOykrTsEVENTytObilCqtQwoRV1FXs1z1UJTBUP63WXMz7RPM5v-uYPOPeaeR5MQiCaYVB3JNyah6zg_TVqeSufU_iMpO9AJH2eGdxK0sXwcynDlUgGNUIasu8RmE1zqfxqgtgimSuO8C_Exe13bR1qL9Fcj-M5A?width=790&amp;height=395&amp;cropmode=none" alt=""></p><p><img src="https://ppqcdg.ch.files.1drv.com/y4m9MMd6JTL3Z9bm_49dB-fmZbIjxnJCJ7qdF14Q8UPo0_2TD4_gT_ZFunSr_Q67ribivOgpkJSJdqW-idtqkuKJK0IrxCD7VJLTftdrnW0Z6iUUV9D8xROGkQnffOoWAHHOmtmJ171_FIBiaPsixkJy_RzgNijckg_THurGP_ZwdsGkPgX_29DxOWvA3P1kHL8yyEGt2giY5WObViUvX4nGw?width=1071&amp;height=581&amp;cropmode=none" alt=""></p></li></ul><h1 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h1><h2 id="修改wifi名字"><a href="#修改wifi名字" class="headerlink" title="修改wifi名字"></a>修改wifi名字</h2><h3 id="所需工具（二选一即可）"><a href="#所需工具（二选一即可）" class="headerlink" title="所需工具（二选一即可）"></a>所需工具（二选一即可）</h3><ul><li>chrome浏览器</li><li>Burp Suite + 任意浏览器</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="单chrome浏览器方法"><a href="#单chrome浏览器方法" class="headerlink" title="单chrome浏览器方法"></a>单chrome浏览器方法</h4><ol><li>连接光猫，登录192.168.1.1后台，超级管理员用户名CMCCAdmin，密码aDm8H%MdA</li><li><p>进入网络-WLAN网络设置</p></li><li><p>按F12，ctrl+shift+F，在search里面搜索gp_ssidPre（或者Frm_ESSID），可以搜到在<strong>4980</strong>行有一行代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setValue(&quot;ESSID&quot;, gp_ssidPre+getValue(&quot;Frm_ESSID&quot;));</span><br></pre></td></tr></table></figure><p><img src="https://ppqedg.ch.files.1drv.com/y4mGT1R2WBo13RDfywEpFkZ-kad16l5cjofSwSx2zCumi1L0-B2ph6dP4pL_KdkHIOQMaXEeh1eY_rHB5Ve51HhYGsq-oI0qoLbYgV8C6yY-WlS8GEBbm8sHj1s7YCzPxonaAiM0NxjJ-sWLw3Sc4JVQfQZ8_VWj6d4vTf_thqbGSVJgwtbGzmjEak_2xNRwBBpoNPYSXqzRoCMDSwONy-K2w?width=1920&amp;height=942&amp;cropmode=none" alt=""></p></li><li><p>在<strong>4981</strong>行（即该行代码的下一行）的数字那里点一下设置断电，会变蓝</p></li><li><p>F5刷新页面</p></li><li><p>先修改SSID名称，然后确定提交</p></li><li><p>页面会中断在4981行</p><p><img src="https://ppqddg.ch.files.1drv.com/y4mHEmuS0gEe_JDnnjiArZ-5KyKWi6P6KeJhdBTVKMCzy3szk1jtt8-mXabBBIKHzIioKeeG93HZkbp-4Hv4x4Vapa9eCf0S-Mj3tZnDWQs_cm0QbyYzR1KnqB5StUtpQHzReY-m43brC4y-JofHRgF6r3lx-DjqhJdZaMPX_h7iCL9BCeVbF7uyq0JF12RoWqw3nsaD8Z1I3NRjBbVHwEPLg?width=1920&amp;height=943&amp;cropmode=none" alt=""></p></li><li><p>进入Console标签，输入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setValue(&quot;ESSID&quot;, getValue(&quot;Frm_ESSID&quot;));</span><br></pre></td></tr></table></figure><p><img src="https://95qcdg.ch.files.1drv.com/y4mBBYKOwQS4zojZt31ATs8kmKWOTVx5gd3p31YZMbZ8U4jR98OZACErLTdQVLTOB0c0oKex-_UVV5O0a8-HqDuKnvvNTJXq5hsioc42X-6-X7Yw6t8f7gXUAHNxu5Bmg95Pl_2Oa1JsJUI6YSaH28n8KEShk_AzzG5EUv1M5wVt9VIRyssxrv7zKBUa_vRX7o3A4p_Ondkg5GZLer0EVTnYA?width=1920&amp;height=938&amp;cropmode=none" alt=""></p><p>为了确认ESSID已经被修改，可以输入ESSID查看修改前后的代码，结果就是已经把cmcc去掉了</p></li><li><p>点页面顶上蓝色的箭头执行断点，提交成功，然后wifi名字就被修改了</p><p><img src="https://95tqdq.ch.files.1drv.com/y4mLowTxTPtn0g5jxT9O9nRvYr9c0haevAuV16o7Ifd22P5qrZjcdNxH8GIVyrml2-A2CSMl1lv7CnUqIt95cCts8Eau4l7d7ukj2I8J9f4kQynKcAaUwpr87v--5uH5ogYSgT_lk5DfnPzFGBgBjV4Qkwaotff4RCWBItqDYVKScvYetc2-qCBYLQam1_3M9KqlkxPRcde9FwptG_j6cwCSw?width=1035&amp;height=185&amp;cropmode=none" alt=""></p><p><img src="https://pptqdq.ch.files.1drv.com/y4mBJZ-mW2qN-3RoSAsYiePZ_-zsIiGgFIaZSDokxG8KsBfJO2MtXxqDO0N8c8HMsKyn5Hqqe-uRuIOhs0hfA307vvA1ZEuuGAhgUx6CkceI7jk2XILRg5zWMaEUkPb24_s4_eXf2pST1aGrNrf7g0kksKPji9DUo5qhZ3obonjjks0n0N4gBiON-L6g7maEqHYR66jWhtqUiJyLhumLtvmdQ?width=371&amp;height=660&amp;cropmode=none" alt=""></p></li></ol><h4 id="Burp-Suite-任意浏览器"><a href="#Burp-Suite-任意浏览器" class="headerlink" title="Burp Suite + 任意浏览器"></a>Burp Suite + 任意浏览器</h4><p>慢更…</p><h2 id="多拨-1"><a href="#多拨-1" class="headerlink" title="多拨"></a>多拨</h2><ul><li><p>实现多拨需要使用自己的路由器（千兆端口）</p></li><li><p>需要将光猫设置为桥接，在路由器里面使用pppoe拨号</p><p><img src="https://95qadg.ch.files.1drv.com/y4mZdqSghJOmPL07KH7WpVou7sqNLIp2W6vANxUznlhug-kI3mvdrQofVcUscNa21WeGe5Lgv0gcC7KosJgC4tN8pNmLC-ml442TDT_LLnyru_LG0F_QKCmpchtXnXqJ7cSZLXDLyBVnWxHgJ_89IZXyerJYaUf2zXlWVKx6f7Sc1QdnyrlimUDAKom4fmjhIvFN7fYZ8vytqApBk9UKTb2Kw?width=937&amp;height=571&amp;cropmode=none" alt=""></p></li><li><p>如果使用多拨的话必须要有路由器固件支持，推荐老毛子&amp;潘多拉固件，内置了多拨的功能。</p></li><li><p>如果是华硕路由器里面内置了双wan，可以直接双拨。（AC66U B1以上型号）</p><p><img src="https://ppqbdg.ch.files.1drv.com/y4mIfCsNxDB6CLQOYWnbz_ZhzI2YYzqdXBg1Tm454FGzFM6PoghY6Y97HgOykrTsEVENTytObilCqtQwoRV1FXs1z1UJTBUP63WXMz7RPM5v-uYPOPeaeR5MQiCaYVB3JNyah6zg_TVqeSufU_iMpO9AJH2eGdxK0sXwcynDlUgGNUIasu8RmE1zqfxqgtgimSuO8C_Exe13bR1qL9Fcj-M5A?width=790&amp;height=395&amp;cropmode=none" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 宽带 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宽带 </tag>
            
            <tag> 多拨 </tag>
            
            <tag> 提速 </tag>
            
            <tag> wifi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客上线</title>
      <link href="/2019/12/26/hello-world/"/>
      <url>/2019/12/26/hello-world/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客又双叒叕上线了，这次使用的是hexo + Github Pages + travis CI + 语雀 + serverless + onedrive图床，部署完成之后可以直接在语雀上编辑文章然后自动发布到博客，云端写作不是梦hhh </p></blockquote><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><blockquote><p>部署部分是按照博客<a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">https://www.simon96.online/2018/10/12/hexo-tutorial/</a> 配置的，仅做备份之用以便日后博客迁移可以照着这篇文文章重新恢复(ಥ _ ಥ)</p></blockquote><p>本地环境：windows Linux Ubuntu 18.04</p><h2 id="（可选）配置git"><a href="#（可选）配置git" class="headerlink" title="（可选）配置git"></a>（可选）配置git</h2><p>首先我得重新在git设置一下身份的名字和邮箱（因为当初都忘了设置啥了，因为遇到坑了）进入到需要提交的文件夹底下（因为直接打开git Bash，在没有路径的情况下，根本没！法！改！刚使用git时遇到的坑。。。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email“your@email.com&quot;</span><br></pre></td></tr></table></figure><p>注：yourname是你要设置的名字，your@email是你要设置的邮箱。</p><h2 id="安装-Node-js和npm"><a href="#安装-Node-js和npm" class="headerlink" title="安装 Node.js和npm"></a>安装 Node.js和npm</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><p>如果报错,请更改软件源—清华大学开源软件源,并更新</p><p>注：查看nodejs和npm版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nodejs -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>可以正常打印版本号说明,安装成功</p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><ol><li><p>创建博客所在目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir hexo </span><br></pre></td></tr></table></figure></li><li><p>创建目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir hexo</span><br></pre></td></tr></table></figure></li><li><p>切换目录</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd hexo</span><br></pre></td></tr></table></figure></li><li><p>全局安装 Hexo，需要最高权限，记得输入root密码</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>初始化 Hexo</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p> 注：如果报错执行代码,不报错忽略</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm config set user 0</span><br><span class="line">sudo npm config set unsafe-perm true</span><br><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ol><li><p>如果安装慢就安装proxychains，并且定义alias npm=’proxychains4 npm’</p></li><li><p>如果要永久定义（重启不失效的话就编辑：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>   并且在末尾添加以下代码并定义 alias</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias npm=&#x27;proxychains4 npm&#x27;</span><br></pre></td></tr></table></figure></li><li><p>配置完代理后就可以安装npm插件了</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-tag-aplayer --save</span><br><span class="line">npm install aplayer --save</span><br><span class="line">npm i --save hexo-wordcount</span><br><span class="line">npm install aplayer --save</span><br><span class="line">npm install --save hexo-helper-live2d</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ol><h2 id="测试安装成功"><a href="#测试安装成功" class="headerlink" title="测试安装成功"></a>测试安装成功</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo server</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/部署成功.png" alt="本地部署成功"></p><h1 id="同步到githubpages"><a href="#同步到githubpages" class="headerlink" title="同步到githubpages"></a>同步到githubpages</h1><h2 id="方案一：GithubPages"><a href="#方案一：GithubPages" class="headerlink" title="方案一：GithubPages"></a>方案一：GithubPages</h2><ol><li><p>创建<a href="https://github.com/">Github</a>账号</p></li><li><p>创建仓库， 仓库名为：<Github账号名称>.github.io</p></li><li><p>将本地Hexo博客推送到GithubPages</p><ul><li><p>安装hexo-deployer-git插件。在命令行（即Git Bash）运行以下命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>添加SSH key。</p><p>创建一个 SSH key 。在命令行（即Git Bash）输入以下命令，     回车三下即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;  </span><br></pre></td></tr></table></figure></li><li><p>添加到 github。 复制密钥文件内容（路径形如C:\Users\Administrator.ssh\id_rsa.pub），粘贴到<a href="https://github.com/settings/keys">New SSH Key</a>即可。</p></li><li><p>测试是否添加成功。在命令行（即Git     Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com  </span><br><span class="line">$ yes  </span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改_config.yml（在站点目录下）。文件末尾修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment  </span><br><span class="line">  ## Docs: https://hexo.io/docs/deployment.html  </span><br><span class="line">  deploy:  </span><br><span class="line">  type: git  </span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git  </span><br><span class="line">  branch: master  </span><br></pre></td></tr></table></figure><p>注意：上面仓库地址写ssh地址，不写http地址。(windows使用git的话建议用https，可以挂代理)</p></li><li><p>推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回INFO Deploy done: git即成功推送：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g  </span><br><span class="line">$ hexo d  </span><br></pre></td></tr></table></figure></li><li><p>等待1分钟左右，浏览器访问网址：https://<github账号名称>.github.io</p></li></ol><p>至此，的Hexo博客已经搭建在GithubPages, 域名为https://<Github账号名称>.github.io。</p><h2 id="方案二：GithubPages-域名"><a href="#方案二：GithubPages-域名" class="headerlink" title="方案二：GithubPages + 域名"></a>方案二：GithubPages + 域名</h2><p>在方案一的基础上，添加自定义域名（购买的域名）。</p><ol><li><p>域名解析。</p><pre><code>类型选择为 CNAME；主机记录即域名前缀，填写为www；记录值填写为&lt;Github账号名称&gt;.github.io；解析线路，TTL 默认即可。</code></pre></li><li><p>仓库设置。</p><ul><li>打开博客仓库设置：<a href="https://github.com/">https://github.com/</a><Github账号名称>/<Github账号名称>.github.io/settings</li><li>在Custom domain下，填写自定义域名，点击save。</li><li>在站点目录的source文件夹下，创建并打开CNAME.txt，写入你的域名，保存，并重命名为CNAME。 </li></ul></li><li><p>等待10分钟左右。</p><pre><code>浏览器访问自定义域名。至此，Hexo博客已经解析到自定义域名，https://&lt;Github账号名称&gt;.github.io依然可用。</code></pre></li></ol><h1 id="主题，插件配置"><a href="#主题，插件配置" class="headerlink" title="主题，插件配置"></a>主题，插件配置</h1><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>hexo博客主题用的是<a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a>，配置信息：<a href="https://jerryc.me/posts/21cfbf15/">https://jerryc.me/posts/21cfbf15/</a> ，感谢作者~</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><blockquote><p>插件部分引自博客<a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">https://www.simon96.online/2018/10/12/hexo-tutorial/</a> ，仅做备份之用以便日后博客迁移可以照着这篇文文章重新恢复(ಥ _ ಥ)</p></blockquote><h3 id="live2d"><a href="#live2d" class="headerlink" title="live2d"></a>live2d</h3><ul><li><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></li><li><p>复制你喜欢的模型名字：</p><p> Epsilon2.1</p><p> <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/20220513103605.png" alt=""></p><p> Gantzert_Felixander</p><p> <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/Gantzert_Felixander.gif" alt="Gantzert_Felixander"></p><p> haru</p><p> <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/haru.gif" alt="haru"></p><p> miku</p><p> <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/miku.gif" alt="miku"></p><p> ni-j</p><p> <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/ni-j.gif" alt="ni-j"></p><p> nico</p><p> <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/nico.gif" alt="nico"></p><p> nietzche</p><p> <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/nietzche.gif" alt="nietzche"></p></li></ul><p>   nipsilon</p><p>   <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/nipsilon.gif" alt="nipsilon"></p><p>   nito</p><p>   <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/nito.gif" alt="nito"></p><p>   shizuku</p><p>   <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/shizuku.gif" alt="shizuku"></p><p>   tsumiki</p><p>   <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/tsumiki.gif" alt="tsumiki"></p><p>   wanko</p><p>   <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/wanko.gif" alt="wanko"></p><p>   z16</p><p>   <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/z16.gif" alt="z16"></p><p>   hibiki</p><p>   <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/hibiki.gif" alt="hibiki"></p><p>   koharu</p><p>   <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/koharu.gif" alt="koharu"></p><p>   haruto</p><p>   <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/koharu.gif" alt=""></p><p>   Unitychan</p><p>   <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/Unitychan.gif" alt="Unitychan"></p><p>   tororo</p><p>   <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/tororo.gif" alt="tororo"></p><p>   hijiki</p><p>   <img src="https://cdn.jsdelivr.net/gh/HPShark/blogimages@master/hello-world/hijiki.gif" alt="hijiki"></p><ul><li><p>将以下代码添加到主题配置文件<code>_config.yml</code>，修改&lt;你喜欢的模型名字&gt;：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-hijiki</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></table></figure></li><li><p>建配置文件</p><ul><li><p>在站点目录下建文件夹<code>live2d_models</code>，</p></li><li><p>再在<code>live2d_models</code>下建文件夹<code>&lt;你喜欢的模型名字&gt;</code>,</p></li><li><p>再在<code>&lt;你喜欢的模型名字&gt;</code>下建json文件：&lt;你喜欢的模型名字&gt;.model.json</p></li></ul></li><li><p>安装模型。在命令行（即Git Bash）运行以下命令即可：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save live2d-widget-model-hijiki</span><br></pre></td></tr></table></figure></li><li><p>在命令行（即Git Bash）运行以下命令， 在<code>http://127.0.0.1:4000/</code>查看测试结果:</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></li></ul><h3 id="评论插件（2021年9月12日更新）"><a href="#评论插件（2021年9月12日更新）" class="headerlink" title="评论插件（2021年9月12日更新）"></a>评论插件（2021年9月12日更新）</h3><ul><li>博客评论采用gitalk，配置过程参考<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">https://github.com/gitalk/gitalk/blob/master/readme-cn.md</a></li><li>创建 <strong>GitHub Application</strong>的时候需要注意一下，url填个人博客的完整地址。</li></ul><h1 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h1><h2 id="github-actions自动构建（2021年9月12日更新）"><a href="#github-actions自动构建（2021年9月12日更新）" class="headerlink" title="github actions自动构建（2021年9月12日更新）"></a>github actions自动构建（2021年9月12日更新）</h2><p>由于不经常用语雀（就是懒），再加上travis ci要求构建的库必须是公共库，所以转战github actions。</p><ul><li><p>创建 <code>blog</code> 仓库用来存放 Hexo 项目</p></li><li><p>创建 <code>your.github.io</code> 仓库用来存放静态博客页面</p></li></ul><ol><li><p>生成ssh密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f github-deploy-key</span><br></pre></td></tr></table></figure><p>会生成 <code>github-deploy-key</code> 和 <code>github-deploy-key.pub</code> 两个文件。</p></li><li><p>配置部署密钥</p><p>复制 <code>github-deploy-key</code> 文件内容，在 <code>blog</code> 仓库 <code>Settings -&gt; Secrets -&gt; Add a new secret</code> 页面上添加。</p><ul><li>在 <code>Name</code> 输入框填写 <code>HEXO_DEPLOY_PRI</code>。</li><li>在 <code>Value</code> 输入框填写 <code>github-deploy-key</code> 文件内容。</li></ul><p>复制 <code>github-deploy-key.pub</code> 文件内容，在 <code>your.github.io</code> 仓库 <code>Settings -&gt; Deploy keys -&gt; Add deploy key</code> 页面上添加。</p><ul><li><p>在 <code>Title</code> 输入框填写 <code>HEXO_DEPLOY_PUB</code>。</p></li><li><p>在 <code>Key</code> 输入框填写 <code>github-deploy-key.pub</code> 文件内容。</p></li><li><p>勾选 <code>Allow write access</code> 选项。</p></li></ul></li><li><p>编写 Github Actions</p><p><strong>Workflow 模版</strong></p><p>3.1 在 <code>blog</code> 仓库根目录下创建 <code>.github/workflows/deploy.yml</code> 文件，目录结构如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blog (repository)</span><br><span class="line">└── .github</span><br><span class="line">    └── workflows</span><br><span class="line">        └── deploy.yml</span><br></pre></td></tr></table></figure><p>3.2 </p><p>在 <code>deploy.yml</code> 文件中粘贴以下内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">name: CI</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  GIT_USER: HPShark</span><br><span class="line">  GIT_EMAIL: www.yaoyuchao@qq.com</span><br><span class="line">  THEME_REPO: HPShark/happyshark</span><br><span class="line">  THEME_BRANCH: master</span><br><span class="line">  DEPLOY_REPO: HPShark/HPShark.github.io</span><br><span class="line">  DEPLOY_BRANCH: master</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    name: Build on node $&#123;&#123; matrix.node_version &#125;&#125; and $&#123;&#123; matrix.os &#125;&#125;</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        os: [ubuntu-latest]</span><br><span class="line">        node_version: [14.x]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">      - name: Checkout theme repo</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          repository: $&#123;&#123; env.THEME_REPO &#125;&#125;</span><br><span class="line">          ref: $&#123;&#123; env.THEME_BRANCH &#125;&#125;</span><br><span class="line">          path: themes/concise</span><br><span class="line"></span><br><span class="line">      - name: Checkout deploy repo</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          repository: $&#123;&#123; env.DEPLOY_REPO &#125;&#125;</span><br><span class="line">          ref: $&#123;&#123; env.DEPLOY_BRANCH &#125;&#125;</span><br><span class="line">          path: .deploy_git</span><br><span class="line"></span><br><span class="line">      - name: Use Node.js $&#123;&#123; matrix.node_version &#125;&#125;</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: $&#123;&#123; matrix.node_version &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: Configuration environment</span><br><span class="line">        env:</span><br><span class="line">          HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span><br><span class="line">          mkdir -p ~/.ssh/</span><br><span class="line">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">          chmod 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">          git config --global user.name $GIT_USER</span><br><span class="line">          git config --global user.email $GIT_EMAIL</span><br><span class="line"></span><br><span class="line">      - name: Install dependencies</span><br><span class="line">        run: |</span><br><span class="line">          npm install</span><br><span class="line"></span><br><span class="line">      - name: Deploy hexo</span><br><span class="line">        run: |</span><br><span class="line">          npm run deploy</span><br></pre></td></tr></table></figure><p><code>name</code> 是当前 Action 的名字，最后你可以在仓库的 Actions 菜单项中看到它。<br><code>on</code>是此 Action 触发条件，当满足条件时会触发此任务，上面的 on.push.branches.source-<code>action</code> 是指当 source-action 分支收到 push 后会触发 Action 执行任务。<br><code>env</code>为环境变量对象</p><ul><li><p><code>env.GIT_USER</code>为 Hexo 编译后使用此 git 用户部署到仓库</p></li><li><p><code>env.GIT_EMAIL</code> 为 Hexo 编译后使用此 git 邮箱部署到仓库</p></li><li><code>env.THEME_REPO</code> 为 Hexo 所使用的主题的仓库，这里为 vensing/Kratos-Rebirth</li><li><code>env.THEME_BRANCH</code> 为 Hexo 所使用的主题仓库的版本，可以是：branch、tag 或者 SHA</li><li><code>env.DEPLOY_REPO</code>为 Hexo 编译后要部署的仓库，例如：vensing/vensing.github.io</li><li><code>env.DEPLOY_BRANCH</code> 为 Hexo 编译后要部署到的分支，例如：master</li></ul><p><code>jobs</code> 为此 Action 下的任务列表</p><ul><li><code>jobs.&#123;job&#125;.name</code> 任务名称</li><li><code>jobs.&#123;job&#125;.runs-on</code>任务所需容器，可选值：ubuntu-latest、windows-latest、macos-latest。</li><li><code>jobs.&#123;job&#125;.strategy</code> 策略下可以写 array 格式，此 job 会遍历此数组执行。</li><li><p><code>jobs.&#123;job&#125;.steps</code> 一个步骤数组，可以把所要干的事分步骤放到这里。</p><ul><li><p><code>jobs.&#123;job&#125;.steps.$.name</code> 步骤名，编译时会会以 LOG 形式输出。</p></li><li><p><code>jobs.&#123;job&#125;.steps.$.uses</code>所要调用的 Action，可以到 <a href="https://github.com/actions">https://github.com/actions</a> 查看更多。</p></li><li><p><code>jobs.&#123;job&#125;.steps.$.with</code>一个对象，调用 Action 传的参数，具体可以查看所使用 Action 的说明。</p></li></ul></li></ul><p>在上面配置文件中的代码段，指定了 Action 依赖的 OS 实例为 ubuntu-latest，以及 node 运行环境版本为 14.x，任务 steps 中引用了一个 版本为 v2 的 Action checkout ，actions/checkout@v2 的作用是 Checkout 一个 git 仓库到当前 ubuntu 容器。</p><ul><li>Checkout theme repo step 中从环境变量中拿出 $ 指定本站使用的博客仓库名及分支 hexo5-custom，检出到 themes/Kratos-Rebirth 目录下。</li><li>Checkout deploy repo step 中从环境变量中拿出 $ 指定部署备份的博客仓库，及要部署备份生成的静态网页的分支 master，检出到 .deploy_git 目录下。</li><li>Use Node.js step 中使用了 actions/setup-node@v1 action 指定了 node 的版本。</li></ul><p>检出主题分支和 Github Pages 部署分支之后，接着配置执行环境：</p><ul><li>设置容器的时区；</li><li>将在 Settings -&gt; Secrets 中的 SSH 私钥写入到 ~/.ssh/id_rsa 文件中；</li><li>设置 id_rsa 的文件权限及 know_hosts、git 全局用户信息</li></ul><p>接着执行 npm install 安装依赖和 npm run deploy 部署到 Github Pages 进行备份。run: | 可分行连续执行多条命令，需要注意的是使用 hexo 的 deploy 命令需要我们安装 hexo-deployer-git 依赖，所以需要先在本地安装下依赖写入 package.json 中。</p></li><li><p>执行任务</p><p>写一篇文章，<code>push</code> 到 <code>blog</code> 仓库的 <code>master</code> 分支，在此仓库 <code>Actions</code> 页面查看当前 task。</p></li></ol><h2 id="语雀云端写作-腾讯云serverless提交-Travis-ci自动构建-github-pages发布"><a href="#语雀云端写作-腾讯云serverless提交-Travis-ci自动构建-github-pages发布" class="headerlink" title="语雀云端写作+腾讯云serverless提交+ Travis-ci自动构建+github-pages发布"></a><del>语雀云端写作+腾讯云serverless提交+ Travis-ci自动构建+github-pages发布</del></h2><blockquote><p>目前博客使用github action发布，好处是源代码仓库可以设为<code>私有</code>,而travis-ci构建的代码仓库必须是公开，所以这一部分的配置已经废弃~</p><p>实现语雀云端协作部分引自博客<a href="https://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/">https://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/</a> 以及<a href="https://aqpcet.coding.me/%E8%AF%AD%E9%9B%80+TravisCI+Serverless/3689364350.html">https://aqpcet.coding.me/%E8%AF%AD%E9%9B%80+TravisCI+Serverless/3689364350.html</a> ，仅做备份之用以便日后博客迁移可以照着这篇文文章重新恢复(ಥ _ ಥ)</p></blockquote><ul><li><p>语雀</p><p><a href="https://yuque.com/">语雀</a>是阿里巴巴旗下的专业云端知识库，支持<a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin">Markdown</a>语法，个人和团队皆可用于文档编写。它不仅仅是一个在线编写文档的工具，还集成了<a href="https://www.yuque.com/yuque/developer/doc-webhook">Web Hook</a> ，为自动化部署Hexo建立了基础。而<a href="https://github.com/x-cold/yuque-hexo">yuque-hexo</a>是<a href="https://github.com/x-cold">x-cold</a>根据语雀的API为Hexo博客写的插件，可以很方便的将语雀指定知识库里的文章全部更新到hexo博客中。</p></li></ul><ul><li><p>Travis CI</p><p><a href="https://travis-ci.com/">Travis CI</a>可以很方便地将<a href="https://github.com/">GitHub</a>的项目持续集成并构建。</p></li></ul><ul><li><p>Serverless</p><p><a href="https://cloud.tencent.com/developer/article/1200169">Serverless</a>可以通过代码唤起Travis CI执行构建项目。</p></li></ul><p>自动部署总体流程如下。</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/部署流程.png" alt="图片来自aqpcet.coding.me"></p><h3 id="关键文件："><a href="#关键文件：" class="headerlink" title="关键文件："></a>关键文件：</h3><ul><li><p>.travis.yml：（参考自<a href="https://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/">IT范儿</a>）</p><p>如果使用这两个问卷配置travis-ci的话，travis-ci.com上仓库的设置里面环境变量只需要设置Travis_Token，变量值为github上取得的Token（DISPLAY VALUE IN BUILD LOG一定要关上！）</p></li></ul><p>  <strong>20200324更新：语雀会对频繁调用的请求进行限流，故需要将语雀token加入到该文件中。${YUQUE_TOKEN}即为语雀token，为保证安全故将token值加进travic网站中而不保存在文件中，添加方法与Travis_Token添加方法相同</strong></p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span> <span class="comment"># 设置语言</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span> <span class="comment"># 设置相应版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cache:</span></span><br><span class="line"><span class="comment">#     apt: true</span></span><br><span class="line"><span class="comment">#     directories:</span></span><br><span class="line"><span class="comment">#         - node_modules # 缓存不经常更改的内容</span></span><br><span class="line"></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line">    <span class="attr">email:</span></span><br><span class="line">        <span class="attr">recipients:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">happyshark520@outlook.com</span></span><br><span class="line">        <span class="attr">on_success:</span> <span class="string">change</span></span><br><span class="line">        <span class="attr">on_failure:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">cheerio</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">./publish-to-gh-pages.sh</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">-g</span> <span class="string">yuque-hexo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yuque-hexo</span> <span class="string">clean</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">YUQUE_TOKEN=$&#123;YUQUE_TOKEN&#125;</span> <span class="string">yuque-hexo</span> <span class="string">sync</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">sync</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./publish-to-gh-pages.sh</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">    <span class="attr">only:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">master</span> <span class="comment">#只监测hexo分支，hexo是我的分支的名称，可根据自己情况设置</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">    <span class="attr">global:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">GH_REF:</span> <span class="string">github.com/HPShark/HPShark.github.io.git</span> <span class="comment">#设置GH_REF，注意更改yourname</span></span><br></pre></td></tr></table></figure><ul><li><p>publish-to-gh-pages.sh：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">set -ev</span><br><span class="line">git clone https://$&#123;GH_REF&#125; .deploy_git</span><br><span class="line">cd .deploy_git</span><br><span class="line">git checkout master</span><br><span class="line">cd ../</span><br><span class="line">mv .deploy_git/.git/ ./public/</span><br><span class="line">cd ./public</span><br><span class="line">git config user.name &quot;HPShark&quot; # 修改name</span><br><span class="line">git config user.email &quot;&lt;github登录邮箱&gt;&quot; # 修改email</span><br><span class="line"># add commit timestamp</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Travis CI Auto Builder at `date +&quot;%Y-%m-%d %H:%M&quot;`&quot;</span><br><span class="line">git push --force --quiet &quot;https://$&#123;Travis_Token&#125;@$&#123;GH_REF&#125;&quot; master:master</span><br></pre></td></tr></table></figure></li><li><p>腾讯云serverless函数配置，因为travis-ci.org的网址换成了travis-ci.com，所以要对网上的一些老版本的函数内容中的api部分进行修改，然后再加上token和repos即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main_handler</span>(<span class="params"><span class="variable">$event</span>, <span class="variable">$context</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 解析语雀post的数据</span></span><br><span class="line">    <span class="variable">$update_title</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$event</span>-&gt;body)&#123;</span><br><span class="line">        <span class="variable">$yuque_data</span>= json_decode(<span class="variable">$event</span>-&gt;body);</span><br><span class="line">        <span class="variable">$update_title</span> .= <span class="variable">$yuque_data</span>-&gt;data-&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// default params</span></span><br><span class="line">    <span class="variable">$repos</span> = <span class="string">&#x27;&#x27;</span>;  <span class="comment">// 用户名%2F源码仓库名，斜杠用%2F代替</span></span><br><span class="line">    <span class="variable">$token</span> = <span class="string">&#x27;&#x27;</span>; <span class="comment">// 你的登录token</span></span><br><span class="line">    <span class="variable">$message</span> = date(<span class="string">&quot;Y/m/d&quot;</span>).<span class="string">&#x27;:yuque update:&#x27;</span>.<span class="variable">$update_title</span>;</span><br><span class="line">    <span class="variable">$branch</span> = <span class="string">&#x27;master&#x27;</span>;</span><br><span class="line">    <span class="comment">// post params</span></span><br><span class="line">    <span class="variable">$queryString</span> = <span class="variable">$event</span>-&gt;queryString;</span><br><span class="line">    <span class="variable">$q_token</span> = <span class="variable">$queryString</span>-&gt;token ? <span class="variable">$queryString</span>-&gt;token : <span class="variable">$token</span>;</span><br><span class="line">    <span class="variable">$q_repos</span> = <span class="variable">$queryString</span>-&gt;repos ? <span class="variable">$queryString</span>-&gt;repos : <span class="variable">$repos</span>;</span><br><span class="line">    <span class="variable">$q_message</span> = <span class="variable">$queryString</span>-&gt;message ? <span class="variable">$queryString</span>-&gt;message : <span class="variable">$message</span>;</span><br><span class="line">    <span class="variable">$q_branch</span> = <span class="variable">$queryString</span>-&gt;branch ? <span class="variable">$queryString</span>-&gt;branch : <span class="string">&#x27;master&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$q_token</span>);</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&#x27;===&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="variable">$q_repos</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">&#x27;===&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="variable">$q_message</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">&#x27;===&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="variable">$q_branch</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">&#x27;===&#x27;</span>);</span><br><span class="line">    <span class="comment">//request travis ci</span></span><br><span class="line">    <span class="variable">$res_info</span> = triggerTravisCI(<span class="variable">$q_repos</span>, <span class="variable">$q_token</span>, <span class="variable">$q_message</span>, <span class="variable">$q_branch</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$res_code</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$res_message</span> = <span class="string">&#x27;未知&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res_info</span>[<span class="string">&#x27;http_code&#x27;</span>])&#123;</span><br><span class="line">        <span class="variable">$res_code</span> = <span class="variable">$res_info</span>[<span class="string">&#x27;http_code&#x27;</span>];</span><br><span class="line">        <span class="keyword">switch</span>(<span class="variable">$res_info</span>[<span class="string">&#x27;http_code&#x27;</span>])&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">202</span>:</span><br><span class="line">                <span class="variable">$res_message</span> = <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$res_message</span> = <span class="string">&#x27;faild&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$res</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span>=&gt;<span class="variable">$res_code</span>,</span><br><span class="line">        <span class="string">&#x27;message&#x27;</span>=&gt;<span class="variable">$res_message</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span>  travis api , trigger a build</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $repos string 仓库ID、slug</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $token string 登录验证token</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $message string 触发信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $branch string 分支</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> $info array 回包信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">triggerTravisCI</span> (<span class="params"><span class="variable">$repos</span>, <span class="variable">$token</span>, <span class="variable">$message</span>=<span class="string">&#x27;yuque update&#x27;</span>, <span class="variable">$branch</span>=<span class="string">&#x27;master&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="variable">$curl</span> = curl_init();</span><br><span class="line">    <span class="comment">//设置抓取的url</span></span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_URL, <span class="string">&#x27;https://api.travis-ci.com/repo/&#x27;</span>.<span class="variable">$repos</span>.<span class="string">&#x27;/requests&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置获取的信息以文件流的形式返回，而不是直接输出。</span></span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//设置post方式提交</span></span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_CUSTOMREQUEST, <span class="string">&quot;POST&quot;</span>);</span><br><span class="line">    <span class="comment">//设置post数据</span></span><br><span class="line">    <span class="variable">$post_data</span> = json_encode(<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&quot;request&quot;</span>=&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;message&quot;</span>=&gt;<span class="variable">$message</span>,</span><br><span class="line">            <span class="string">&quot;branch&quot;</span>=&gt;<span class="variable">$branch</span></span><br><span class="line">        )</span><br><span class="line">    ));</span><br><span class="line">    <span class="variable">$header</span> = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;Content-Type: application/json&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Travis-API-Version: 3&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Authorization:token &#x27;</span>.<span class="variable">$token</span>,</span><br><span class="line">      <span class="string">&#x27;Content-Length:&#x27;</span> . strlen(<span class="variable">$post_data</span>)</span><br><span class="line">    );</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_HTTPHEADER, <span class="variable">$header</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_POSTFIELDS, <span class="variable">$post_data</span>);</span><br><span class="line">    <span class="comment">//执行命令</span></span><br><span class="line">    <span class="variable">$data</span> = curl_exec(<span class="variable">$curl</span>);</span><br><span class="line">    <span class="variable">$info</span> = curl_getinfo(<span class="variable">$curl</span>);</span><br><span class="line">    <span class="comment">//关闭URL请求</span></span><br><span class="line">    curl_close(<span class="variable">$curl</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$info</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h3><ol><li><p>源码上传至github</p><ul><li>建一个新的仓库，专门存放源代码（也可以直接在github.io 的那个仓库新建一个分支，不过设置麻烦，就放弃了）</li><li>将本地代码上传（可能有信息安全风险，所以建议为博客单独开设一个帐号）。注意仓库要设为公开，travis-ci构建私人仓库是要付费的orz..</li></ul><p>注意事项：</p><ul><li><p>上传前建议先执行hexo clean，可以减少上传体积。</p></li><li><p>也可以通过配置.gitignore控制上传内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol><li><p>配置travis-ci</p><ul><li><p>把.travis.yml和publish-to-gh-pages.sh放在根目录</p><ul><li><p>登录<a href="https://travis-ci.com/">travis-ci</a>，绑定github，允许访问github仓库，进入<strong>博客源码</strong>仓库</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/travis设置.png" alt=""></p></li><li><p>设置Environment Variables(环境变量)，设置Travis_Token，YUQUE_TOKEN添加方法类似</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/travis的token设置.png" alt=""></p></li><li><p>配置完成后等待腾讯云serverless触发即可构建，构建成功会return 0，如果有其他问题（一般是缺环境）缺啥在.travis.yml中的install那里npm装包即可~</p></li></ul></li></ul></li></ol><ol><li><p>腾讯云serverless函数配置：</p><ul><li><p>新建php空白函数：（可以用python，aqpcet.coding.me用的就是python设置的）</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/serverless新建plp文件.png" alt=""></p></li><li><p>编辑serverless函数内容，需要获取以下两个信息，填入对应的地方就行</p><ul><li><p>travis登录token，在travis-ci.com中设置界面获取：</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/travis登录token.png" alt=""></p></li><li><p>博客源码的仓库名</p><p>现在可以直接用\<github用户名>%2F&lt;博客源码仓库名&gt;代替原来的仓库id了，不用在拿抓包工具抓仓库ID 或 扩展名了</p></li></ul></li><li><p>配置触发方式</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/serverless设置触发方式.png" alt=""></p><p>一般会得到这么个api：<a href="https://service-s08f6nvk-1251833201.ap-guangzhou.apigateway.myqcloud.com/release/xxx">https://service-s08f6nvk-1251833201.ap-guangzhou.apigateway.myqcloud.com/release/xxx</a></p></li></ul></li><li><p>语雀配置：</p><p>配置一个仓库的webhook:</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/语雀配置.png" alt=""></p><p>可以选择所有更新触发或者主动触发，主动触发的意思即发布需要勾选一个选项才会触发webhook。具体可参见语雀文档：<a href="https://www.yuque.com/yuque/developer/doc-webhook；">https://www.yuque.com/yuque/developer/doc-webhook；</a><br>将serverless生成的api填入,可以在链接后面带参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">token 登录token</span><br><span class="line">repos 仓库id</span><br><span class="line">message 提交信息</span><br><span class="line">branch 分支</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">https://service-s08f6nvk-1251833201.ap-guangzhou.apigateway.myqcloud.com/release/xxx?repos=xxx&amp;token=xxx&amp;message=xxx&amp;branch=xxx</span><br></pre></td></tr></table></figure><p>如果不在链接带参数则写在serverless函数内。</p></li></ol><h3 id="通过语雀插件对front-matter进行处理"><a href="#通过语雀插件对front-matter进行处理" class="headerlink" title="通过语雀插件对front-matter进行处理"></a>通过语雀插件对front-matter进行处理</h3><p>插件地址：<a href="https://github.com/x-cold/yuque-hexo">https://github.com/x-cold/yuque-hexo</a></p><p>需要对package.json，.travis.yml进行配置，在编辑语雀文章时头部要这么写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tags: [hexo, node]</span><br><span class="line">categories: fe</span><br><span class="line">cover: https://cdn.nlark.com/yuque/0/2019/jpeg/155457/1546857679810-d82e3d46-e960-419c-a715-0a82c48a2fd6.jpeg#align=left&amp;display=inline&amp;height=225&amp;name=image.jpeg&amp;originHeight=225&amp;originWidth=225&amp;size=6267&amp;width=225</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">some description</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">more detail</span><br></pre></td></tr></table></figure><p>注：冒号后面是<strong>空格</strong>！tags后面必须有中<strong>括号</strong>！有时候同步完之后空格会变成tab造成front-matter无法被插件识别，就会出现front-matter重叠的情况<a href="https://github.com/x-cold/yuque-hexo/issues/45">issues#45</a></p><p><strong>大功告成！在语雀上正常发布一篇文章即可自动触发serverless函数提交给travis-ci构建博客</strong></p><h1 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h1><h2 id="serverless-python版"><a href="#serverless-python版" class="headerlink" title="serverless python版"></a>serverless python版</h2><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/serverlesspython版.png" alt=""></p><h2 id="私人图床：onedrive"><a href="#私人图床：onedrive" class="headerlink" title="私人图床：onedrive"></a>私人图床：onedrive</h2><p>使用方法非常简单，具体步骤如下：</p><ul><li><p>注册账户，已有的可直接略过。</p></li><li><p>登录OneDrive，上传需要外链的图片。</p></li><li><p>在图片上右键选择“嵌入”按钮，再在弹出的窗口中点击“生成”选项。</p></li><li><p>将链接复制到需要展示的地方。</p></li></ul><p>来自 <a href="https://osk.ink/archives/12/">https://osk.ink/archives/12/</a> </p><h2 id="travis渲染时报错："><a href="#travis渲染时报错：" class="headerlink" title="travis渲染时报错："></a>travis渲染时报错：</h2><blockquote><p>travis /bin/bash^M: bad interpreter: No such file or directory</p><p>If you use <strong>Sublime Text</strong> on Windows or Mac to edit your scripts:</p><p>Click on View &gt; Line Endings &gt; Unix and <strong>save</strong> the file again.</p></blockquote><p>原因：编码问题，如下解决即可</p><p><img src="https://raw.githubusercontent.com/HPShark/blogimages/master/hello-world/travis编码报错解决.png" alt=""></p><h2 id="Ubuntu安装Proxychains"><a href="#Ubuntu安装Proxychains" class="headerlink" title="Ubuntu安装Proxychains"></a>Ubuntu安装Proxychains</h2><p>Proxychains是Linux上一款全局代理工具，通过Hook Socket函数实现透明代理，这和Windows上的Proxifier有点类似。 在Ubuntu上安装Proxychains的方法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install proxychains </span><br></pre></td></tr></table></figure><p>安装的是3.1版本，配置文件的路径是：/etc/proxychains.conf，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"># proxychains.conf  VER 3.1</span><br><span class="line">#</span><br><span class="line">#        HTTP, SOCKS4, SOCKS5 tunneling proxifier with DNS.</span><br><span class="line">#</span><br><span class="line"># The option below identifies how the ProxyList is treated.</span><br><span class="line"># only one option should be uncommented at time,</span><br><span class="line"># otherwise the last appearing option will be accepted</span><br><span class="line">#</span><br><span class="line">#dynamic_chain</span><br><span class="line">#</span><br><span class="line"># Dynamic - Each connection will be done via chained proxies</span><br><span class="line"># all proxies chained in the order as they appear in the list</span><br><span class="line"># at least one proxy must be online to play in chain</span><br><span class="line"># (dead proxies are skipped)</span><br><span class="line"># otherwise EINTR is returned to the app</span><br><span class="line">#</span><br><span class="line">strict_chain</span><br><span class="line">#</span><br><span class="line"># Strict - Each connection will be done via chained proxies</span><br><span class="line"># all proxies chained in the order as they appear in the list</span><br><span class="line"># all proxies must be online to play in chain</span><br><span class="line"># otherwise EINTR is returned to the app</span><br><span class="line">#</span><br><span class="line">#random_chain</span><br><span class="line">#</span><br><span class="line"># Random - Each connection will be done via random proxy</span><br><span class="line"># (or proxy chain, see  chain_len) from the list.</span><br><span class="line"># this option is good to test your IDS :)</span><br><span class="line"># Make sense only if random_chain</span><br><span class="line">#chain_len = 2</span><br><span class="line"># Quiet mode (no output from library)</span><br><span class="line">#quiet_mode</span><br><span class="line"># Proxy DNS requests - no leak for DNS data</span><br><span class="line">proxy_dns </span><br><span class="line"># Some timeouts in milliseconds</span><br><span class="line">tcp_read_time_out 15000</span><br><span class="line">tcp_connect_time_out 8000</span><br><span class="line"># ProxyList format</span><br><span class="line">#       type  host  port [user pass]</span><br><span class="line">#       (values separated by &#x27;tab&#x27; or &#x27;blank&#x27;)</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#        Examples:</span><br><span class="line">#</span><br><span class="line">#               socks5  192.168.67.78   1080    lamer   secret</span><br><span class="line">#               http    192.168.89.3    8080    justu   hidden</span><br><span class="line">#               socks4  192.168.1.49    1080</span><br><span class="line">#               http    192.168.39.93   8080</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#       proxy types: http, socks4, socks5</span><br><span class="line">#        ( auth types supported: &quot;basic&quot;-http  &quot;user/pass&quot;-socks )</span><br><span class="line">#</span><br><span class="line">[ProxyList]</span><br><span class="line"># add proxy here ...</span><br><span class="line"># meanwile</span><br><span class="line"># defaults set to &quot;tor&quot;</span><br><span class="line">socks4         127.0.0.1 9050</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Proxychains支持HTTP（HTTP-Connect）、SOCKS4和SOCKS5三种类型的代理，需要注意的是：配置代理服务器只能使用ip地址，不能使用域名，否则会连不上。</p><p>Proxychains支持3种模式： </p><ol><li>动态模式 按照配置的代理顺序连接，不存活的代理服务器会被跳过 </li><li>严格模式     按照配置的代理顺序连接，必须保证所有代理服务器都是存活的，否则会连接失败 </li><li>随机模式     随机选择一台代理服务器连接，也可以使用代理链</li></ol><p>如果不需要代理DNS的话，可以注释掉proxy_dns这行。</p><p>使用的时候在命令行前加上proxychains即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-pc:~# proxychains telnet [www.baidu.com](http://www.baidu.com) 80 ProxyChains-3.1 ([http://proxychains.sf.net](http://proxychains.sf.net/)) Trying 14.215.177.37… |R-chain|-&lt;&gt;-10.0.0.10:8080-&lt;&gt;&lt;&gt;-14.215.177.37:80-&lt;&gt;&lt;&gt;-OK Connected to [www.a.shifen.com](http://www.a.shifen.com). Escape character is ‘^]’. </span><br><span class="line"></span><br><span class="line">proxychains命令其实是个脚本文件，内容如下：</span><br><span class="line"></span><br><span class="line">\#!/bin/sh</span><br><span class="line"> echo &quot;ProxyChains-3.1 (http://proxychains.sf.net)&quot;</span><br><span class="line"> if [ $# = 0 ] ; then</span><br><span class="line">     echo &quot; usage:&quot;</span><br><span class="line">     echo &quot;     proxychains &lt;prog&gt; [args]&quot;</span><br><span class="line">     exit</span><br><span class="line"> fi</span><br><span class="line"> export LD_PRELOAD=libproxychains.so.3</span><br><span class="line"> exec &quot;$@&quot;</span><br></pre></td></tr></table></figure><p>它的目的是设置LD_PRELOAD环境变量，以便创建的新进程会加载libproxychains.so.3，这个so的作用是Hook Socket函数。因此，也可以在当前shell中执行： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_PRELOAD=libproxychains.so.3</span><br></pre></td></tr></table></figure><p>这样之后执行的命令都会使用代理访问。</p><p>不过这个版本有个问题，配置代理后所有的连接都会走代理，包括对回环地址的访问。这并不是我们所期望的，幸好有个版本提供了解决方案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/rofl0r/proxychains cd proxychains ./configure make make install </span><br></pre></td></tr></table></figure><p>安装后在配置文件中加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localnet 127.0.0.0/255.0.0.0 </span><br></pre></td></tr></table></figure><p>安装后的命令是proxychains4，因此可以和旧版本命令并存。这样对于回环地址就可以绕过代理，使用直连了。</p><p>相对于Proxifier而言，这种方式还是弱了一点，毕竟有时候我们还是需要根据不同的情况使用不同的代理服务器。</p><h2 id="有东西传不到github上去？"><a href="#有东西传不到github上去？" class="headerlink" title="有东西传不到github上去？"></a>有东西传不到github上去？</h2><p>删掉.deploy_git:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- rm -rf .deploy_git/</span><br></pre></td></tr></table></figure><h2 id="语雀防盗链解决办法："><a href="#语雀防盗链解决办法：" class="headerlink" title="语雀防盗链解决办法："></a>语雀防盗链解决办法：</h2><p>临时方案是直接在 html 模版中添加 head 进行绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p> (来自 <a href="https://github.com/x-cold/yuque-hexo/issues/41">https://github.com/x-cold/yuque-hexo/issues/41</a> )</p><p>注：对于butterfly主题的话对themes\Butterfly\layout\includes\layout.pug修改head部分即可，但是会造成网站访客数和文章阅读数无法加载</p><h2 id="gem失败"><a href="#gem失败" class="headerlink" title="gem失败"></a>gem失败</h2><p>apt-get install ruby-dev </p><h2 id="Windows-的-Linux-子系统的文件同步和-Windows-不是实时的问题"><a href="#Windows-的-Linux-子系统的文件同步和-Windows-不是实时的问题" class="headerlink" title="Windows 的 Linux 子系统的文件同步和 Windows 不是实时的问题"></a>Windows 的 Linux 子系统的文件同步和 Windows 不是实时的问题</h2><p>如果使用windows子系统的Ubuntu的话，可能会出现Windows 的 Linux 子系统的文件同步和 Windows 不是实时的问题（来自 <a href="https://www.zhihu.com/question/318832524/answer/641951256">https://www.zhihu.com/question/318832524/answer/641951256</a> ）</p><p>你可以在Windows下存储文件，然后在wsl中使用/mnt/盘符/路径 访问</p><p>你也可以在1903更新发布后在Linux rootfs中存储文件，Windows程序使用\wsl$\Ubuntu\unix路径 访问</p><p>唯独不正确的操作是找到AppData里rootfs文件夹直接用Windows程序修改，因为这里面的文件在NTFS中除了存储文件内容，Windows文件元数据，还存储unix文件元数据（比如rwx权限，unix用户组和用户），你创建的文件并不具有这样的属性，因此会导致权限混乱。</p><p>详见：<a href="https://link.zhihu.com/?target=https%3A//blogs.msdn.microsoft.com/commandline/2016/11/17/do-not-change-linux-files-using-windows-apps-and-tools/">https://blogs.msdn.microsoft.com/commandline/2016/11/17/do-not-change-linux-files-using-windows-apps-and-tools/</a></p><p>1903（19H1，20195月更新）的改动</p><p><strong>Linux Files inside of File Explorer</strong></p><p>The best way to get started with this feature is to open your Linux files in File Explorer! To do this, open your favorite distro, make sure your current folder is your Linux home directory, and type in:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explorer.exe .</span><br></pre></td></tr></table></figure><p>来自 <a href="https://devblogs.microsoft.com/commandline/whats-new-for-wsl-in-windows-10-version-1903/">https://devblogs.microsoft.com/commandline/whats-new-for-wsl-in-windows-10-version-1903/</a> </p><h2 id="npm淘宝源的问题"><a href="#npm淘宝源的问题" class="headerlink" title="npm淘宝源的问题"></a>npm淘宝源的问题</h2><p>这玩意有毛病，经常会出奇奇怪怪的bug，最好的方式还是挂代理</p><p>C盘用户文件夹下的.npmrc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy=http://127.0.0.1:1081</span><br><span class="line">https-proxy=http://127.0.0.1:1081/</span><br></pre></td></tr></table></figure><h2 id="github-action错误提示"><a href="#github-action错误提示" class="headerlink" title="github action错误提示"></a>github action错误提示</h2><blockquote><p>How to fix ‘Unsupported platform for fsevents@1.2.9: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”win32”,”arch”:”x64”})</p></blockquote><p>解决办法：</p><ul><li><p>在deploy.yml中添加          </p><p><code>npm i -f</code></p></li></ul><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li><p>[语雀+TravisCI+Serverless]: <a href="https://segmentfault.com/a/1190000017797561">https://segmentfault.com/a/1190000017797561</a></p></li><li><p>[【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析]: <a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">https://www.simon96.online/2018/10/12/hexo-tutorial/</a></p></li><li><p>[使用Travis CI自动部署Hexo博客]: <a href="https://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/">https://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/</a></p></li><li><p>[hexo-theme-butterfly安裝文檔]: <a href="https://jerryc.me/posts/21cfbf15/">https://jerryc.me/posts/21cfbf15/</a></p></li><li><p>[Hexo 博客终极玩法：云端写作，自动部署]: <a href="https://segmentfault.com/a/1190000017797561">https://segmentfault.com/a/1190000017797561</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> travis CI </tag>
            
            <tag> serverless </tag>
            
            <tag> 语雀 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
